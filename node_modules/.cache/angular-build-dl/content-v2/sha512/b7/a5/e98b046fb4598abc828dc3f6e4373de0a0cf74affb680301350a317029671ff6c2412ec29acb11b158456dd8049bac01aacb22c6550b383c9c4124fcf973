{"version":3,"sources":["./node_modules/esc-pos-encoder-ionic/src/esc-pos-encoder.js","./node_modules/linewrap/index.js","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/encodings/sbcs-data-generated.js","./node_modules/canvas/browser.js","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/lib/index.js","./streams (ignored)","./extend-node (ignored)","./node_modules/canvas/lib/parse-font.js","./src/app/datecsprinter.service.ts","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/encodings/dbcs-codec.js","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/encodings/sbcs-codec.js","./node_modules/base64-js/index.js","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/encodings/index.js","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/encodings/internal.js","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/encodings/utf7.js","./node_modules/canvas-dither/src/canvas-dither.js","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/encodings/sbcs-data.js","./node_modules/string_decoder/lib/string_decoder.js","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/encodings/utf16.js","./node_modules/safe-buffer/index.js","./node_modules/ieee754/index.js","./node_modules/canvas-flatten/src/canvas-flatten.js","./node_modules/buffer/index.js","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/lib/bom-handling.js","./node_modules/esc-pos-encoder-ionic/node_modules/iconv-lite/encodings/dbcs-data.js","./node_modules/safer-buffer/safer.js"],"names":[],"mappings":";;;;;;;;;AAAA,cAAc,mBAAO,CAAC,wBAAY;AAClC,iBAAiB,mBAAO,CAAC,sBAAU;AACnC,OAAO,aAAa,GAAG,mBAAO,CAAC,oBAAQ;AACvC,eAAe,mBAAO,CAAC,2BAAe;AACtC,gBAAgB,mBAAO,CAAC,4BAAgB;;;AAGxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yEAAyE;AACzE,iEAAiE;AACjE,wEAAwE;AACxE,4DAA4D;AAC5D;;AAEA;;AAEA;;AAEA,uBAAuB,YAAY;AACnC,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;AC/lBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,cAAc;AACvD,wCAAwC,cAAc;AACtD;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,0BAA0B,uBAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2BAA2B;AACxD,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,6BAA6B,8BAA8B;AAC3D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,uCAAuC,8BAA8B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,kBAAkB;AAC7C;AACA;AACA,mCAAmC,cAAc;AACjD;AACA;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,OAAO;AACjE,8DAA8D,OAAO;AACrE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;;AAEA,+BAA+B,UAAU;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;;AAEA,2CAA2C,SAAS;AACpD;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA,2CAA2C,SAAS;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mBAAmB,gBAAgB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChxBa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,uNAAuN,iEAAiE,EAAE;AAC1R,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,2JAA2J,iEAAiE,EAAE;AAC9N,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,yLAAyL,iEAAiE,EAAE;AAC5P,GAAG;AACH;AACA;AACA,uNAAuN,iEAAiE,EAAE;AAC1R,GAAG;AACH;AACA;AACA,uNAAuN,gEAAgE,EAAE;AACzR,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,C;;;;;;;;;;;AClcA;;AAEA,kBAAkB,mBAAO,CAAC,8BAAkB;;AAE5C;;AAEA;AACA,0DAA0D,+BAA+B;AACzF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,WAAW;AAC3C,iCAAiC,WAAW;;AAE5C;AACA,GAAG;AACH;;;;;;;;;;;;;AClCa;;AAEb;AACA;AACA,aAAa,mBAAO,CAAC,0BAAc;;AAEnC,kBAAkB,mBAAO,CAAC,4BAAgB;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B;;AAE3B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,mBAAO,CAAC,0BAAc,EAAE;;AAElD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yEAAyE;AACzE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD,EAAE;AACtD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,mBAAO,CAAC,kBAAW;AAC3B;;AAEA;AACA,IAAI,mBAAO,CAAC,sBAAe;AAC3B;;AAEA,IAAI,KAAe,EAAE,EAEpB;;;;;;;;;;;;ACxJD,e;;;;;;;;;;;ACAA,e;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC,+BAA+B,OAAO;AACtC,iCAAiC,SAAS;AAC1C,iCAAiC,UAAU;AAC3C;AACA,iBAAiB,MAAM,SAAS,OAAO,YAAY,OAAO;;AAE1D;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;ACpG2C;IAO9B,oBAAoB,SAApB,oBAAoB;IAG/B;QA8IF;;;UAGE;QAEK,gBAAW,GAAG;YAEnB;;;;;;;;eAQG;YACH,aAAa,EAAE,UAAS,MAAM;gBAE5B,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,EAChB,CAAC,GAAG,MAAM,CAAC,MAAM,EACjB,EAAE,GAAG,CAAC,GAAG,CAAC,EACV,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACxD,MAAM,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,kCAAkC;gBAE/E,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,2BAA2B;gBACxE,cAAc,GAAG,MAAM,GAAG,CAAC,EAAkB,oBAAoB;gBACjE,UAAU,GAAG,GAAG,GAAG,cAAc,EAAY,gCAAgC;gBAE7E,IAAI,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,EAAW,6BAA6B;gBAC1E,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAoB,iCAAiC;gBAC9E,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBAEtC,oBAAoB;gBACpB,MAAM,CAAC,MAAM,CAAC,CAAC,CAAU,KAAK;gBAC9B,MAAM,CAAC,UAAU,CAAC,CAAC,CAAM,eAAe;gBACxC,GAAG,IAAI,CAAC,CAAC,CAAgB,qBAAqB;gBAC9C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAY,mBAAmB;gBAE5C,aAAa;gBACb,MAAM,CAAC,GAAG,CAAC,CAAC,CAAa,cAAc;gBACvC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAQ,2BAA2B;gBACpD,MAAM,CAAC,CAAC,CAAC,CAAC,CAAe,UAAU;gBACnC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAc,iBAAiB;gBAC1C,MAAM,CAAC,CAAC,CAAC,CAAC,CAAe,mCAAmC;gBAC5D,MAAM,CAAC,cAAc,CAAC,CAAC,CAAE,8CAA8C;gBACvE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAY,4CAA4C;gBACrE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAY,iBAAiB;gBAC1C,GAAG,IAAI,CAAC,CAAC,CAAgB,8BAA8B;gBACvD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAQ,mBAAmB;gBAC5C,MAAM,CAAC,MAAM,CAAC,CAAC,CAAU,qBAAqB;gBAC9C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAY,oBAAoB;gBAC7C,MAAM,CAAC,UAAU,CAAC,CAAC,CAAM,qBAAqB;gBAC9C,MAAM,CAAC,UAAU,CAAC,CAAC,CAAM,qBAAqB;gBAE9C,4CAA4C;gBAC5C,OAAO,CAAC,GAAG,CAAC,EAAE;oBACZ,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,2BAA2B;oBAClD,CAAC,GAAG,CAAC,CAAC;oBACN,OAAO,CAAC,GAAG,EAAE,EAAE;wBACb,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAqB,WAAW;wBAChD,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAwB,gBAAgB;wBACrD,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW;wBAChD,CAAC,IAAI,CAAC,CAAC;qBACR;oBACD,CAAC,EAAE;iBACJ;gBAED,OAAO,IAAI,CAAC;gBAEZ,gDAAgD;gBAChD,SAAS,MAAM,CAAC,IAAI,IAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAC;gBACjE,SAAS,MAAM,CAAC,IAAI,IAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAC;YACnE,CAAC;YAED;;;;;;;eAOG;YACH,MAAM,EAAE,UAAS,MAAM;gBACrB,OAAO,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE;oBAC5C,IAAI,EAAE,WAAW;iBAClB,CAAC,CAAC;YACL,CAAC;YAED;;;;;;eAMG;YACH,SAAS,EAAE,UAAS,MAAM;gBACxB,IAAI,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EACnD,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC;oBAAE,EAAE,IAAI,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACrD,OAAO,wBAAwB,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;YAC7C,CAAC;SACF,CAAC;QAnPE,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;IAC9C,CAAC;IAEK,oBAAoB;;YACxB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnC,MAAM,CAAC,aAAa,CAAC,oBAAoB,CACvC,UAAU,OAAO;oBACf,OAAO,CAAC,OAAO,CAAC,CAAC;gBACnB,CAAC,EACD,UAAU,KAAK;oBACb,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;YACT,CAAC,CAAC,CAAC;QAEL,CAAC;KAAA;IACA,OAAO,CAAC,OAAc;QACrB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,EAChC,UAAU,OAAO;gBACf,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,EACD,UAAU,KAAK;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC;IACD,UAAU;QACR,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,aAAa,CAAC,UAAU,CAC3B,UAAU,OAAO;gBACf,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,EACD,UAAU,KAAK;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC;IACD,SAAS,CAAC,QAAe,CAAC;QACxB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,EAChC,UAAU,OAAO;gBACf,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,EACD,UAAU,KAAK;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC;IACD,SAAS,CAAE,IAAW,EAAE,UAAiB,YAAY;QACnD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAE,IAAI,EAClC,OAAO,EACL,UAAU,OAAO;gBACf,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,EACD,UAAU,KAAK;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,UAAU,CAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM;QAC1C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,aAAa,CAAC,UAAU,CAC7B,KAAK,EACL,KAAK,EACL,KAAK,EACL,GAAG,EACH,MAAM,EACJ,UAAU,OAAO;gBACf,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,EACD,UAAU,KAAK;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,YAAY,CAAC,IAAI,GAAG,YAAY,EAAE,IAAI,GAAG,EAAE;QACzC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,aAAa,CAAC,YAAY,CAC/B,IAAI,EACJ,IAAI,EACF,UAAU,OAAO;gBACf,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,EACD,UAAU,KAAK;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,SAAS;QACP,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,aAAa,CAAC,SAAS,CAC5B,UAAU,OAAO;gBACb,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,EACD,UAAU,KAAK;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC;IACD,cAAc;QACZ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,aAAa,CAAC,cAAc,CACjC,UAAU,OAAO;gBACb,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,EACD,UAAU,KAAK;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC;IACD,UAAU,CAAE,KAAY,EAAE,MAAa,EAAE,KAAY,EAAE,KAAK,GAAG,CAAC;QAC9D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,aAAa,CAAC,UAAU,CAC7B,KAAK,EACL,MAAM,EACN,KAAK,EACL,KAAK,EACL,UAAU,OAAO;gBACb,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,EACD,UAAU,KAAK;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC;CA4GF;;AAzPY,oBAAoB;IAJhC,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GAEW,oBAAoB,CAyPhC;AAzPgC;;;;;;;;;;;;;ACPpB;AACb,aAAa,mBAAO,CAAC,0BAAc;;AAEnC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,WAAW;AAC1B;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;;AAEpD;AACA;;AAEA;AACA,mBAAmB,yBAAyB;AAC5C;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,wCAAwC;AAC/D;AACA;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,8CAA8C;;AAE9C;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B,WAAW;AACrC;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA,0BAA0B,WAAW;AACrC;AACA,0BAA0B,WAAW;AACrC;AACA,K;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU,UAAU;AACpB;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO,OAAO;AAC9C;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,kBAAkB;AACrC;AACA,uCAAuC;AACvC,2BAA2B,iBAAiB;AAC5C;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,mCAAmC,SAAS;AAC5C,uDAAuD;;AAEvD;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,S;AACA,4CAA4C;AAC5C;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA,0DAA0D;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;;AAEA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0B;AACA;;AAEA;AACA,gDAAgD;AAChD,iCAAiC;AACjC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;;AAEA;AACA;AACA,0DAA0D;AAC1D;AACA,8CAA8C;AAC9C;AACA;;AAEA,aAAa,uCAAuC;AACpD;;AAEA,aAAa,iCAAiC;;AAE9C;AACA;AACA;AACA,uCAAuC;AACvC,qCAAqC;;AAErC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE,qEAAqE;AACrE,mEAAmE;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;;AAEf;;AAEA,sBAAsB;AACtB;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,8CAA8C;AAC9C;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B,gBAAgB;AAC1C;;AAEA;AACA;;AAEA,yB;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,sCAAsC;AACtC;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACziBa;AACb,aAAa,mBAAO,CAAC,0BAAc;;AAEnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,gBAAgB;AACnC;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,wBAAwB;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACvEY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,UAAU;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;ACrJa;;AAEb;AACA;AACA;AACA,IAAI,mBAAO,CAAC,wBAAY;AACxB,IAAI,mBAAO,CAAC,qBAAS;AACrB,IAAI,mBAAO,CAAC,oBAAQ;AACpB,IAAI,mBAAO,CAAC,0BAAc;AAC1B,IAAI,mBAAO,CAAC,yBAAa;AACzB,IAAI,mBAAO,CAAC,mCAAuB;AACnC,IAAI,mBAAO,CAAC,0BAAc;AAC1B,IAAI,mBAAO,CAAC,yBAAa;AACzB;;AAEA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrBa;AACb,aAAa,mBAAO,CAAC,0BAAc;;AAEnC;;AAEA;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,mCAAmC;AAChD;;AAEA,aAAa,mCAAmC;AAChD;;AAEA,aAAa,oBAAoB;AACjC,aAAa,oBAAoB;AACjC,aAAa,oBAAoB;;AAEjC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,oBAAoB,mBAAO,CAAC,4BAAgB;;AAE5C;AACA;;;AAGA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA,wCAAwC;AACxC,gCAAgC;AAChC;AACA;AACA;;AAEA,iCAAiC;AACjC;AACA,aAAa,2BAA2B;AACxC;AACA,8BAA8B;AAC9B,aAAa,2BAA2B;AACxC;AACA,8BAA8B;AAC9B,aAAa,OAAO;AACpB;AACA;AACA,SAAS,OAAO;AAChB,gCAAgC;AAChC;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3La;AACb,aAAa,mBAAO,CAAC,0BAAc;;AAEnC;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,SAAS;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,gBAAgB;AACnC,wBAAwB;AACxB;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA,SAAS,OAAO;AAChB,uCAAuC;AACvC,wDAAwD;AACxD;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D;AAC5D,KAAK;AACL;;AAEA,+DAA+D;AAC/D,iDAAiD;AACjD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA;;AAEA,SAAS,OAAO;AAChB;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC,wBAAwB;AACxB;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA,SAAS,OAAO;AAChB,2CAA2C;AAC3C,wDAAwD;AACxD;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D;AAC5D,KAAK;AACL;;AAEA,+DAA+D;AAC/D,iDAAiD;AACjD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,uBAAuB;AACjD;AACA;;AAEA,0BAA0B,uBAAuB;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,uBAAuB;AACjD;AACA;;AAEA,0BAA0B,uBAAuB;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACjIa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;AC5KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;;AAEA,aAAa,mBAAO,CAAC,yBAAa;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,sCAAsC,sCAAsC;AACzG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;ACvSa;AACb,aAAa,mBAAO,CAAC,0BAAc;;AAEnC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,gBAAgB;AACnC,yBAAyB,mBAAmB;AAC5C;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;;AAEA,UAAU,kBAAkB;AAC5B;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,+DAA+D,4BAA4B;;AAE3F;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;;AAEnE,2BAA2B,UAAU;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;AC9KA;AACA;AACA,aAAa,mBAAO,CAAC,oBAAQ;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,QAAQ,WAAW;;AAEnB;AACA;AACA,QAAQ,UAAU;;AAElB;AACA;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,MAAM;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEY;;AAEZ,aAAa,mBAAO,CAAC,uBAAW;AAChC,cAAc,mBAAO,CAAC,qBAAS;;AAE/B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,oDAAoD,YAAY;AACrF;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,wBAAwB,QAAQ;AAChC;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChvDa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;AClDa;;AAEb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,QAAQ,mBAAO,CAAC,oCAAwB,GAAG;AACtE,oBAAoB,+BAA+B;AACnD,0BAA0B,yBAAyB;AACnD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,QAAQ,mBAAO,CAAC,iCAAqB,GAAG;AACnE,oBAAoB,+BAA+B;AACnD,KAAK;;AAEL;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,mBAAO,CAAC,iCAAqB,GAAG;AACnE,KAAK;;AAEL;AACA;AACA;AACA,2BAA2B,QAAQ,mBAAO,CAAC,iCAAqB,SAAS,mBAAO,CAAC,qCAAyB,IAAI;AAC9G,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,mBAAO,CAAC,iCAAqB,SAAS,mBAAO,CAAC,qCAAyB,IAAI;AAC9G,6BAA6B,QAAQ,mBAAO,CAAC,0CAA8B,GAAG;AAC9E;AACA,oBAAoB,YAAY;AAChC,KAAK;;AAEL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,mBAAO,CAAC,iCAAqB,GAAG;AACnE,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,mBAAO,CAAC,iCAAqB,GAAG;AACnE,KAAK;;AAEL;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,mBAAO,CAAC,iCAAqB,SAAS,mBAAO,CAAC,sCAA0B,IAAI;AAC/G;AACA,KAAK;;AAEL;AACA;AACA;AACA;;;;;;;;;;;;;AC/KA;;AAEY;;AAEZ,aAAa,mBAAO,CAAC,oBAAQ;AAC7B;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"default~orders-detail-orders-detail-module~orders-edit-orders-edit-module~orders-payment-qris-orders~8c9f9247-es2015.js","sourcesContent":["const iconv = require('iconv-lite');\r\nconst linewrap = require('linewrap');\r\nconst {createCanvas} = require('canvas');\r\nconst Dither = require('canvas-dither');\r\nconst Flatten = require('canvas-flatten');\r\n\r\n\r\n/**\r\n * Create a byte stream based on commands for ESC/POS printers\r\n */\r\nclass EscPosEncoder {\r\n    /**\r\n     * Create a new object\r\n     *\r\n    */\r\n    constructor() {\r\n        this._reset();\r\n    }\r\n\r\n    /**\r\n     * Reset the state of the object\r\n     *\r\n    */\r\n    _reset() {\r\n        this._buffer = [];\r\n        this._codepage = 'ascii';\r\n\r\n        this._state = {\r\n            'bold': false,\r\n            'italic': false,\r\n            'underline': false,\r\n            'hanzi': false,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Encode a string with the current code page\r\n     *\r\n     * @param  {string}   value  String to encode\r\n     * @return {object}          Encoded string as a ArrayBuffer\r\n     *\r\n    */\r\n    _encode(value) {\r\n        return iconv.encode(value, this._codepage);\r\n    }\r\n\r\n    /**\r\n     * Add commands to the buffer\r\n     *\r\n     * @param  {array}   value  And array of numbers, arrays, buffers or Uint8Arrays to add to the buffer\r\n     *\r\n    */\r\n    _queue(value) {\r\n        value.forEach((item) => this._buffer.push(item));\r\n    }\r\n\r\n    /**\r\n     * Initialize the printer\r\n     *\r\n     * @return {object}          Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    initialize() {\r\n        this._queue([\r\n            0x1b, 0x40,\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Change the code page\r\n     *\r\n     * @param  {string}   value  The codepage that we set the printer to\r\n     * @return {object}          Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    codepage(value) {\r\n        const codepages = {\r\n            'cp437': [0x00, false],\r\n            'cp737': [0x40, false],\r\n            'cp850': [0x02, false],\r\n            'cp775': [0x5f, false],\r\n            'cp852': [0x12, false],\r\n            'cp855': [0x3c, false],\r\n            'cp857': [0x3d, false],\r\n            'cp858': [0x13, false],\r\n            'cp860': [0x03, false],\r\n            'cp861': [0x38, false],\r\n            'cp862': [0x3e, false],\r\n            'cp863': [0x04, false],\r\n            'cp864': [0x1c, false],\r\n            'cp865': [0x05, false],\r\n            'cp866': [0x11, false],\r\n            'cp869': [0x42, false],\r\n            'cp936': [0xff, true],\r\n            'cp949': [0xfd, true],\r\n            'cp950': [0xfe, true],\r\n            'cp1252': [0x10, false],\r\n            'iso88596': [0x16, false],\r\n            'shiftjis': [0xfc, true],\r\n            'windows1250': [0x48, false],\r\n            'windows1251': [0x49, false],\r\n            'windows1252': [0x47, false],\r\n            'windows1253': [0x5a, false],\r\n            'windows1254': [0x5b, false],\r\n            'windows1255': [0x20, false],\r\n            'windows1256': [0x5c, false],\r\n            'windows1257': [0x19, false],\r\n            'windows1258': [0x5e, false],\r\n        };\r\n\r\n        let codepage;\r\n\r\n        if (!iconv.encodingExists(value)) {\r\n            throw new Error('Unknown codepage');\r\n        }\r\n\r\n        if (value in iconv.encodings) {\r\n            if (typeof iconv.encodings[value] === 'string') {\r\n                codepage = iconv.encodings[value];\r\n            } else {\r\n                codepage = value;\r\n            }\r\n        } else {\r\n            throw new Error('Unknown codepage');\r\n        }\r\n\r\n        if (typeof codepages[codepage] !== 'undefined') {\r\n            this._codepage = codepage;\r\n            this._state.hanzi = codepages[codepage][1];\r\n\r\n            this._queue([\r\n                0x1b, 0x74, codepages[codepage][0],\r\n            ]);\r\n        } else {\r\n            throw new Error('Codepage not supported by printer');\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Print text\r\n     *\r\n     * @param  {string}   value  Text that needs to be printed\r\n     * @param  {number}   wrap   Wrap text after this many positions\r\n     * @return {object}          Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    text(value, wrap) {\r\n        if (wrap) {\r\n            let w = linewrap(wrap, {lineBreak: '\\r\\n'});\r\n            value = w(value);\r\n        }\r\n\r\n        let bytes = this._encode(value);\r\n\r\n        if (this._state.hanzi) {\r\n            this._queue([\r\n                0x1c, 0x26, bytes, 0x1c, 0x2e,\r\n            ]);\r\n        } else {\r\n            this._queue([\r\n                bytes,\r\n            ]);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Print a newline\r\n     *\r\n     * @return {object}          Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    newline() {\r\n        this._queue([\r\n            0x0a, 0x0d,\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Print text, followed by a newline\r\n     *\r\n     * @param  {string}   value  Text that needs to be printed\r\n     * @param  {number}   wrap   Wrap text after this many positions\r\n     * @return {object}          Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    line(value, wrap) {\r\n        this.text(value, wrap);\r\n        this.newline();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Underline text\r\n     *\r\n     * @param  {boolean|number}   value  true to turn on underline, false to turn off, or 2 for double underline\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    underline(value) {\r\n        if (typeof value === 'undefined') {\r\n            value = ! this._state.underline;\r\n        }\r\n\r\n        this._state.underline = value;\r\n\r\n        this._queue([\r\n            0x1b, 0x2d, Number(value),\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Italic text\r\n     *\r\n     * @param  {boolean}          value  true to turn on italic, false to turn off\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    italic(value) {\r\n        if (typeof value === 'undefined') {\r\n            value = ! this._state.italic;\r\n        }\r\n\r\n        this._state.italic = value;\r\n\r\n        this._queue([\r\n            0x1b, 0x34, Number(value),\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Bold text\r\n     *\r\n     * @param  {boolean}          value  true to turn on bold, false to turn off, or 2 for double underline\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    bold(value) {\r\n        if (typeof value === 'undefined') {\r\n            value = ! this._state.bold;\r\n        }\r\n\r\n        this._state.bold = value;\r\n\r\n        this._queue([\r\n            0x1b, 0x45, Number(value),\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n   /**\r\n     * Change text size\r\n     *\r\n     * @param  {string}          value   small or normal\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    size(value) {\r\n        if (value === 'small') {\r\n            value = 0x01;\r\n        } else {\r\n            value = 0x00;\r\n        }\r\n\r\n        this._queue([\r\n            0x1b, 0x4d, value,\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n   /**\r\n     * Change text alignment\r\n     *\r\n     * @param  {string}          value   left, center or right\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    align(value) {\r\n        const alignments = {\r\n            'left': 0x00,\r\n            'center': 0x01,\r\n            'right': 0x02,\r\n        };\r\n\r\n        if (value in alignments) {\r\n            this._queue([\r\n                0x1b, 0x61, alignments[value],\r\n            ]);\r\n        } else {\r\n            throw new Error('Unknown alignment');\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Barcode\r\n     *\r\n     * @param  {string}           value  the value of the barcode\r\n     * @param  {string}           symbology  the type of the barcode\r\n     * @param  {number}           height  height of the barcode\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    barcode(value, symbology, height) {\r\n        const symbologies = {\r\n            'upca': 0x00,\r\n            'upce': 0x01,\r\n            'ean13': 0x02,\r\n            'ean8': 0x03,\r\n            'coda39': 0x04,\r\n            'itf': 0x05,\r\n            'codabar': 0x06,\r\n        };\r\n\r\n        if (symbology in symbologies) {\r\n            let bytes = iconv.encode(value, 'ascii');\r\n\r\n            this._queue([\r\n                0x1d, 0x68, height,\r\n                0x1d, 0x77, symbology === 'code39' ? 0x02 : 0x03,\r\n                0x1d, 0x6b, symbologies[symbology],\r\n                bytes,\r\n                0x00,\r\n            ]);\r\n        } else {\r\n            throw new Error('Symbology not supported by printer');\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * QR code\r\n     *\r\n     * @param  {string}           value  the value of the qr code\r\n     * @param  {number}           model  model of the qrcode, either 1 or 2\r\n     * @param  {number}           size   size of the qrcode, a value between 1 and 8\r\n     * @param  {string}           errorlevel  the amount of error correction used, either 'l', 'm', 'q', 'h'\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    qrcode(value, model, size, errorlevel) {\r\n        /* Force printing the print buffer and moving to a new line */\r\n\r\n        this._queue([\r\n            0x0a,\r\n        ]);\r\n\r\n        /* Model */\r\n\r\n        const models = {\r\n            1: 0x31,\r\n            2: 0x32,\r\n        };\r\n\r\n        if (typeof model === 'undefined') {\r\n            model = 2;\r\n        }\r\n\r\n        if (model in models) {\r\n            this._queue([\r\n                0x1d, 0x28, 0x6b, 0x04, 0x00, 0x31, 0x41, models[model], 0x00,\r\n            ]);\r\n        } else {\r\n            throw new Error('Model must be 1 or 2');\r\n        }\r\n\r\n        /* Size */\r\n\r\n        if (typeof size === 'undefined') {\r\n            size = 6;\r\n        }\r\n\r\n        if (typeof size !== 'number') {\r\n            throw new Error('Size must be a number');\r\n        }\r\n\r\n        if (size < 1 || size > 8) {\r\n            throw new Error('Size must be between 1 and 8');\r\n        }\r\n\r\n        this._queue([\r\n            0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, size,\r\n        ]);\r\n\r\n        /* Error level */\r\n\r\n        const errorlevels = {\r\n            'l': 0x30,\r\n            'm': 0x31,\r\n            'q': 0x32,\r\n            'h': 0x33,\r\n        };\r\n\r\n        if (typeof errorlevel === 'undefined') {\r\n            errorlevel = 'm';\r\n        }\r\n\r\n        if (errorlevel in errorlevels) {\r\n            this._queue([\r\n                0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x45, errorlevels[errorlevel],\r\n            ]);\r\n        } else {\r\n            throw new Error('Error level must be l, m, q or h');\r\n        }\r\n\r\n        /* Data */\r\n\r\n        let bytes = iconv.encode(value, 'iso88591');\r\n        let length = bytes.length + 3;\r\n\r\n        this._queue([\r\n            0x1d, 0x28, 0x6b, length % 0xff, length / 0xff, 0x31, 0x50, 0x30, bytes,\r\n        ]);\r\n\r\n        /* Print QR code */\r\n\r\n        this._queue([\r\n            0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x51, 0x30,\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Image\r\n     *\r\n     * @param  {object}         element  an element, like a canvas or image that needs to be printed\r\n     * @param  {number}         width  width of the image on the printer\r\n     * @param  {number}         height  height of the image on the printer\r\n     * @param  {string}         algorithm  the dithering algorithm for making the image black and white\r\n     * @param  {number}         threshold  threshold for the dithering algorithm\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    image(element, width, height, algorithm, threshold) {\r\n        if (width % 8 !== 0) {\r\n            throw new Error('Width must be a multiple of 8');\r\n        }\r\n\r\n        if (height % 8 !== 0) {\r\n            throw new Error('Height must be a multiple of 8');\r\n        }\r\n\r\n        if (typeof algorithm === 'undefined') {\r\n            algorithm = 'threshold';\r\n        }\r\n\r\n        if (typeof threshold === 'undefined') {\r\n            threshold = 128;\r\n        }\r\n\r\n        let canvas = createCanvas(width, height);\r\n        let context = canvas.getContext('2d');\r\n        context.drawImage(element, 0, 0, width, height);\r\n        let image = context.getImageData(0, 0, width, height);\r\n\r\n        image = Flatten.flatten(image, [0xff, 0xff, 0xff]);\r\n\r\n        switch (algorithm) {\r\n            case 'threshold': image = Dither.threshold(image, threshold); break;\r\n            case 'bayer': image = Dither.bayer(image, threshold); break;\r\n            case 'floydsteinberg': image = Dither.floydsteinberg(image); break;\r\n            case 'atkinson': image = Dither.atkinson(image); break;\r\n        }\r\n\r\n        let getPixel = (x, y) => image.data[((width * y) + x) * 4] > 0 ? 0 : 1;\r\n\r\n        let bytes = new Uint8Array((width * height) >> 3);\r\n\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x = x + 8) {\r\n                let i = (y * (width >> 3)) + (x >> 3);\r\n                bytes[i] =\r\n                    getPixel(x + 0, y) << 7 |\r\n                    getPixel(x + 1, y) << 6 |\r\n                    getPixel(x + 2, y) << 5 |\r\n                    getPixel(x + 3, y) << 4 |\r\n                    getPixel(x + 4, y) << 3 |\r\n                    getPixel(x + 5, y) << 2 |\r\n                    getPixel(x + 6, y) << 1 |\r\n                    getPixel(x + 7, y);\r\n            }\r\n        }\r\n\r\n        this._queue([\r\n            0x1d, 0x76, 0x30, 0x00,\r\n            (width >> 3) & 0xff, (((width >> 3) >> 8) & 0xff),\r\n            height & 0xff, ((height >> 8) & 0xff),\r\n            bytes,\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Cut paper\r\n     *\r\n     * @param  {string}          value   full or partial. When not specified a full cut will be assumed\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    cut(value) {\r\n        let data = 0x00;\r\n\r\n        if (value == 'partial') {\r\n            data = 0x01;\r\n        }\r\n\r\n        this._queue([\r\n            0x1d, 0x56, data,\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Beeper sound functionality\r\n     *\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     */\r\n    beeper() {\r\n        this._queue([\r\n            0x1b, 0x42, 0x05, 0x01,\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Open cash drawer\r\n     *\r\n     * @return {object}                  Return the object, for easy chaining commands\r\n     */\r\n    openCashDrawer() {\r\n        this._queue([\r\n            0x1b, 0x70, 0x00,\r\n        ]);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Add raw printer commands\r\n     *\r\n     * @param  {array}           data   raw bytes to be included\r\n     * @return {object}          Return the object, for easy chaining commands\r\n     *\r\n     */\r\n    raw(data) {\r\n        this._queue(data);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Encode all previous commands\r\n     *\r\n     * @return {Uint8Array}         Return the encoded bytes\r\n     *\r\n     */\r\n    encode() {\r\n        let length = 0;\r\n\r\n        this._buffer.forEach((item) => {\r\n            if (typeof item === 'number') {\r\n                length++;\r\n            } else {\r\n                length += item.length;\r\n            }\r\n        });\r\n\r\n        let result = new Uint8Array(length);\r\n\r\n        let index = 0;\r\n\r\n        this._buffer.forEach((item) => {\r\n            if (typeof item === 'number') {\r\n                result[index] = item;\r\n                index++;\r\n            } else {\r\n                result.set(item, index);\r\n                index += item.length;\r\n            }\r\n        });\r\n\r\n        this._reset();\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nmodule.exports = EscPosEncoder;\r\n","\r\n// Presets\r\nvar presetMap = {\r\n    'html': {\r\n        skipScheme: 'html',\r\n        lineBreakScheme: 'html',\r\n        whitespace: 'collapse'\r\n    }\r\n};\r\n\r\n// lineBreak Schemes\r\nvar brPat = /<\\s*br(?:[\\s/]*|\\s[^>]*)>/gi;\r\nvar lineBreakSchemeMap = {\r\n    'unix': [/\\n/g, '\\n'],\r\n    'dos': [/\\r\\n/g, '\\r\\n'],\r\n    'mac': [/\\r/g, '\\r'],\r\n    'html': [brPat, '<br>'],\r\n    'xhtml': [brPat, '<br/>']\r\n};\r\n\r\n// skip Schemes\r\nvar skipSchemeMap = {\r\n    'ansi-color': /\\x1B\\[[^m]*m/g,\r\n    'html': /<[^>]*>/g,\r\n    'bbcode': /\\[[^]]*\\]/g\r\n};\r\n\r\nvar modeMap = {\r\n    'soft': 1,\r\n    'hard': 1\r\n};\r\n\r\nvar wsMap = {\r\n    'collapse': 1,\r\n    'default': 1,\r\n    'line': 1,\r\n    'all': 1\r\n};\r\n\r\nvar rlbMap = {\r\n    'all': 1,\r\n    'multi': 1,\r\n    'none': 1\r\n};\r\nvar rlbSMPat = /([sm])(\\d+)/;\r\n\r\nvar escapePat = /[-/\\\\^$*+?.()|[\\]{}]/g;\r\nfunction escapeRegExp(s) {\r\n    return s.replace(escapePat, '\\\\$&');\r\n}\r\n\r\nvar linewrap = module.exports = function (start, stop, params) {\r\n    if (typeof start === 'object') {\r\n        params = start;\r\n        start = params.start;\r\n        stop = params.stop;\r\n    }\r\n\r\n    if (typeof stop === 'object') {\r\n        params = stop;\r\n        start = start || params.start;\r\n        stop = undefined;\r\n    }\r\n\r\n    if (!stop) {\r\n        stop = start;\r\n        start = 0;\r\n    }\r\n\r\n    if (!params) { params = {}; }\r\n    // Supported options and default values.\r\n    var preset,\r\n        mode = 'soft',\r\n        whitespace = 'default',\r\n        tabWidth = 4,\r\n        skip, skipScheme, lineBreak, lineBreakScheme,\r\n        respectLineBreaks = 'all',\r\n        respectNum,\r\n        preservedLineIndent,\r\n        wrapLineIndent, wrapLineIndentBase;\r\n\r\n    var skipPat;\r\n    var lineBreakPat, lineBreakStr;\r\n    var multiLineBreakPat;\r\n    var preservedLinePrefix = '';\r\n    var wrapLineIndentPat, wrapLineInitPrefix = '';\r\n    var tabRepl;\r\n    var item, flags;\r\n    var i;\r\n\r\n    // First process presets, because these settings can be overwritten later.\r\n    preset = params.preset;\r\n    if (preset) {\r\n        if (!(preset instanceof Array)) {\r\n            preset = [preset];\r\n        }\r\n        for (i = 0; i < preset.length; i++) {\r\n            item = presetMap[preset[i]];\r\n            if (item) {\r\n                if (item.mode) {\r\n                    mode = item.mode;\r\n                }\r\n                if (item.whitespace) {\r\n                    whitespace = item.whitespace;\r\n                }\r\n                if (item.tabWidth !== undefined) {\r\n                    tabWidth = item.tabWidth;\r\n                }\r\n                if (item.skip) {\r\n                    skip = item.skip;\r\n                }\r\n                if (item.skipScheme) {\r\n                    skipScheme = item.skipScheme;\r\n                }\r\n                if (item.lineBreak) {\r\n                    lineBreak = item.lineBreak;\r\n                }\r\n                if (item.lineBreakScheme) {\r\n                    lineBreakScheme = item.lineBreakScheme;\r\n                }\r\n                if (item.respectLineBreaks) {\r\n                    respectLineBreaks = item.respectLineBreaks;\r\n                }\r\n                if (item.preservedLineIndent !== undefined) {\r\n                    preservedLineIndent = item.preservedLineIndent;\r\n                }\r\n                if (item.wrapLineIndent !== undefined) {\r\n                    wrapLineIndent = item.wrapLineIndent;\r\n                }\r\n                if (item.wrapLineIndentBase) {\r\n                    wrapLineIndentBase = item.wrapLineIndentBase;\r\n                }\r\n            } else {\r\n                throw new TypeError('preset must be one of \"' + Object.keys(presetMap).join('\", \"') + '\"');\r\n            }\r\n        }\r\n    }\r\n\r\n    if (params.mode) {\r\n        if (modeMap[params.mode]) {\r\n            mode = params.mode;\r\n        } else {\r\n            throw new TypeError('mode must be one of \"' + Object.keys(modeMap).join('\", \"') + '\"');\r\n        }\r\n    }\r\n    // Available options: 'collapse', 'default', 'line', and 'all'\r\n    if (params.whitespace) {\r\n        if (wsMap[params.whitespace]) {\r\n            whitespace = params.whitespace;\r\n        } else {\r\n            throw new TypeError('whitespace must be one of \"' + Object.keys(wsMap).join('\", \"') + '\"');\r\n        }\r\n    }\r\n\r\n    if (params.tabWidth !== undefined) {\r\n        if (parseInt(params.tabWidth, 10) >= 0) {\r\n            tabWidth = parseInt(params.tabWidth, 10);\r\n        } else {\r\n            throw new TypeError('tabWidth must be a non-negative integer');\r\n        }\r\n    }\r\n    tabRepl = new Array(tabWidth + 1).join(' ');\r\n\r\n    // Available options: 'all', 'multi', 'm\\d+', 's\\d+', 'none'\r\n    if (params.respectLineBreaks) {\r\n        if (rlbMap[params.respectLineBreaks] || rlbSMPat.test(params.respectLineBreaks)) {\r\n            respectLineBreaks = params.respectLineBreaks;\r\n        } else {\r\n            throw new TypeError('respectLineBreaks must be one of \"' + Object.keys(rlbMap).join('\", \"') +\r\n                                '\", \"m<num>\", \"s<num>\"');\r\n        }\r\n    }\r\n    // After these conversions, now we have 4 options in `respectLineBreaks`:\r\n    // 'all', 'none', 'm' and 's'.\r\n    // `respectNum` is applicable iff `respectLineBreaks` is either 'm' or 's'.\r\n    if (respectLineBreaks === 'multi') {\r\n        respectLineBreaks = 'm';\r\n        respectNum = 2;\r\n    } else if (!rlbMap[respectLineBreaks]) {\r\n        var match = rlbSMPat.exec(respectLineBreaks);\r\n        respectLineBreaks = match[1];\r\n        respectNum = parseInt(match[2], 10);\r\n    }\r\n\r\n    if (params.preservedLineIndent !== undefined) {\r\n        if (parseInt(params.preservedLineIndent, 10) >= 0) {\r\n            preservedLineIndent = parseInt(params.preservedLineIndent, 10);\r\n        } else {\r\n            throw new TypeError('preservedLineIndent must be a non-negative integer');\r\n        }\r\n    }\r\n\r\n    if (preservedLineIndent > 0) {\r\n        preservedLinePrefix = new Array(preservedLineIndent + 1).join(' ');\r\n    }\r\n\r\n    if (params.wrapLineIndent !== undefined) {\r\n        if (!isNaN(parseInt(params.wrapLineIndent, 10))) {\r\n            wrapLineIndent = parseInt(params.wrapLineIndent, 10);\r\n        } else {\r\n            throw new TypeError('wrapLineIndent must be an integer');\r\n        }\r\n    }\r\n    if (params.wrapLineIndentBase) {\r\n        wrapLineIndentBase = params.wrapLineIndentBase;\r\n    }\r\n\r\n    if (wrapLineIndentBase) {\r\n        if (wrapLineIndent === undefined) {\r\n            throw new TypeError('wrapLineIndent must be specified when wrapLineIndentBase is specified');\r\n        }\r\n        if (wrapLineIndentBase instanceof RegExp) {\r\n            wrapLineIndentPat = wrapLineIndentBase;\r\n        } else if (typeof wrapLineIndentBase === 'string') {\r\n            wrapLineIndentPat = new RegExp(escapeRegExp(wrapLineIndentBase));\r\n        } else {\r\n            throw new TypeError('wrapLineIndentBase must be either a RegExp object or a string');\r\n        }\r\n    } else if (wrapLineIndent > 0) {\r\n        wrapLineInitPrefix = new Array(wrapLineIndent + 1).join(' ');\r\n    } else if (wrapLineIndent < 0) {\r\n        throw new TypeError('wrapLineIndent must be non-negative when a base is not specified');\r\n    }\r\n\r\n    // NOTE: For the two RegExps `skipPat` and `lineBreakPat` that can be specified\r\n    //       by the user:\r\n    //       1. We require them to be \"global\", so we have to convert them to global\r\n    //          if the user specifies a non-global regex.\r\n    //       2. We cannot call `split()` on them, because they may or may not contain\r\n    //          capturing parentheses which affect the output of `split()`.\r\n\r\n    // Precedence: Regex = Str > Scheme\r\n    if (params.skipScheme) {\r\n        if (skipSchemeMap[params.skipScheme]) {\r\n            skipScheme = params.skipScheme;\r\n        } else {\r\n            throw new TypeError('skipScheme must be one of \"' + Object.keys(skipSchemeMap).join('\", \"') + '\"');\r\n        }\r\n    }\r\n    if (params.skip) {\r\n        skip = params.skip;\r\n    }\r\n\r\n    if (skip) {\r\n        if (skip instanceof RegExp) {\r\n            skipPat = skip;\r\n            if (!skipPat.global) {\r\n                flags = 'g';\r\n                if (skipPat.ignoreCase) { flags += 'i'; }\r\n                if (skipPat.multiline) { flags += 'm'; }\r\n                skipPat = new RegExp(skipPat.source, flags);\r\n            }\r\n        } else if (typeof skip === 'string') {\r\n            skipPat = new RegExp(escapeRegExp(skip), 'g');\r\n        } else {\r\n            throw new TypeError('skip must be either a RegExp object or a string');\r\n        }\r\n    }\r\n    if (!skipPat && skipScheme) {\r\n        skipPat = skipSchemeMap[skipScheme];\r\n    }\r\n\r\n    // Precedence:\r\n    // - for lineBreakPat: Regex > Scheme > Str\r\n    // - for lineBreakStr: Str > Scheme > Regex\r\n    if (params.lineBreakScheme) {\r\n        if (lineBreakSchemeMap[params.lineBreakScheme]) {\r\n            lineBreakScheme = params.lineBreakScheme;\r\n        } else {\r\n            throw new TypeError('lineBreakScheme must be one of \"' + Object.keys(lineBreakSchemeMap).join('\", \"') + '\"');\r\n        }\r\n    }\r\n    if (params.lineBreak) {\r\n        lineBreak = params.lineBreak;\r\n    }\r\n\r\n    if (lineBreakScheme) {\r\n        // Supported schemes: 'unix', 'dos', 'mac', 'html', 'xhtml'\r\n        item = lineBreakSchemeMap[lineBreakScheme];\r\n        if (item) {\r\n            lineBreakPat = item[0];\r\n            lineBreakStr = item[1];\r\n        }\r\n    }\r\n    if (lineBreak) {\r\n        if (lineBreak instanceof Array) {\r\n            if (lineBreak.length === 1) {\r\n                lineBreak = lineBreak[0];\r\n            } else if (lineBreak.length >= 2) {\r\n                if (lineBreak[0] instanceof RegExp) {\r\n                    lineBreakPat = lineBreak[0];\r\n                    if (typeof lineBreak[1] === 'string') {\r\n                        lineBreakStr = lineBreak[1];\r\n                    }\r\n                } else if (lineBreak[1] instanceof RegExp) {\r\n                    lineBreakPat = lineBreak[1];\r\n                    if (typeof lineBreak[0] === 'string') {\r\n                        lineBreakStr = lineBreak[0];\r\n                    }\r\n                } else if (typeof lineBreak[0] === 'string' && typeof lineBreak[1] === 'string') {\r\n                    lineBreakPat = new RegExp(escapeRegExp(lineBreak[0]), 'g');\r\n                    lineBreakStr = lineBreak[1];\r\n                } else {\r\n                    lineBreak = lineBreak[0];\r\n                }\r\n            }\r\n        }\r\n        if (typeof lineBreak === 'string') {\r\n            lineBreakStr = lineBreak;\r\n            if (!lineBreakPat) {\r\n                lineBreakPat = new RegExp(escapeRegExp(lineBreak), 'g');\r\n            }\r\n        } else if (lineBreak instanceof RegExp) {\r\n            lineBreakPat = lineBreak;\r\n        } else if (!(lineBreak instanceof Array)) {\r\n            throw new TypeError('lineBreak must be a RegExp object, a string, or an array consisted of a RegExp object and a string');\r\n        }\r\n    }\r\n    // Only assign defaults when `lineBreakPat` is not assigned.\r\n    // So if `params.lineBreak` is a RegExp, we don't have a value in `lineBreakStr`\r\n    // yet. We will try to get the value from the input string, and if failed, we\r\n    // will throw an exception.\r\n    if (!lineBreakPat) {\r\n        lineBreakPat = /\\n/g;\r\n        lineBreakStr = '\\n';\r\n    }\r\n\r\n    // Create `multiLineBreakPat` based on `lineBreakPat`, that matches strings\r\n    // consisted of one or more line breaks and zero or more whitespaces.\r\n    // Also convert `lineBreakPat` to global if not already so.\r\n    flags = 'g';\r\n    if (lineBreakPat.ignoreCase) { flags += 'i'; }\r\n    if (lineBreakPat.multiline) { flags += 'm'; }\r\n    multiLineBreakPat = new RegExp('\\\\s*(?:' + lineBreakPat.source + ')(?:' +\r\n                                   lineBreakPat.source + '|\\\\s)*', flags);\r\n    if (!lineBreakPat.global) {\r\n        lineBreakPat = new RegExp(lineBreakPat.source, flags);\r\n    }\r\n\r\n    // Initialize other useful variables.\r\n    var re = mode === 'hard' ? /\\b/ : /(\\S+\\s+)/;\r\n    var prefix = new Array(start + 1).join(' ');\r\n    var wsStrip = (whitespace === 'default' || whitespace === 'collapse'),\r\n        wsCollapse = (whitespace === 'collapse'),\r\n        wsLine = (whitespace === 'line'),\r\n        wsAll = (whitespace === 'all');\r\n    var tabPat = /\\t/g,\r\n        collapsePat = /  +/g,\r\n        pPat = /^\\s+/,\r\n        tPat = /\\s+$/,\r\n        nonWsPat = /\\S/,\r\n        wsPat = /\\s/;\r\n    var wrapLen = stop - start;\r\n\r\n    return function (text) {\r\n        text = text.toString().replace(tabPat, tabRepl);\r\n\r\n        var match;\r\n        if (!lineBreakStr) {\r\n            // Try to get lineBreakStr from `text`\r\n            lineBreakPat.lastIndex = 0;\r\n            match = lineBreakPat.exec(text);\r\n            if (match) {\r\n                lineBreakStr = match[0];\r\n            } else {\r\n                throw new TypeError('Line break string for the output not specified');\r\n            }\r\n        }\r\n\r\n        // text -> blocks; each bloc -> segments; each segment -> chunks\r\n        var blocks, base = 0;\r\n        var mo, arr, b, res;\r\n        // Split `text` by line breaks.\r\n        blocks = [];\r\n        multiLineBreakPat.lastIndex = 0;\r\n        match = multiLineBreakPat.exec(text);\r\n        while(match) {\r\n            blocks.push(text.substring(base, match.index));\r\n\r\n            if (respectLineBreaks !== 'none') {\r\n                arr = [];\r\n                b = 0;\r\n                lineBreakPat.lastIndex = 0;\r\n                mo = lineBreakPat.exec(match[0]);\r\n                while(mo) {\r\n                    arr.push(match[0].substring(b, mo.index));\r\n                    b = mo.index + mo[0].length;\r\n                    mo = lineBreakPat.exec(match[0]);\r\n                }\r\n                arr.push(match[0].substring(b));\r\n                blocks.push({type: 'break', breaks: arr});\r\n            } else {\r\n                // Strip line breaks and insert spaces when necessary.\r\n                if (wsCollapse) {\r\n                    res = ' ';\r\n                } else {\r\n                    res = match[0].replace(lineBreakPat, '');\r\n                }\r\n                blocks.push({type: 'break', remaining: res});\r\n            }\r\n\r\n            base = match.index + match[0].length;\r\n            match = multiLineBreakPat.exec(text);\r\n        }\r\n        blocks.push(text.substring(base));\r\n\r\n        var i, j, k;\r\n        var segments;\r\n        if (skipPat) {\r\n            segments = [];\r\n            for (i = 0; i < blocks.length; i++) {\r\n                var bloc = blocks[i];\r\n                if (typeof bloc !== 'string') {\r\n                    // This is an object.\r\n                    segments.push(bloc);\r\n                } else {\r\n                    base = 0;\r\n                    skipPat.lastIndex = 0;\r\n                    match = skipPat.exec(bloc);\r\n                    while(match) {\r\n                        segments.push(bloc.substring(base, match.index));\r\n                        segments.push({type: 'skip', value: match[0]});\r\n                        base = match.index + match[0].length;\r\n                        match = skipPat.exec(bloc);\r\n                    }\r\n                    segments.push(bloc.substring(base));\r\n                }\r\n            }\r\n        } else {\r\n            segments = blocks;\r\n        }\r\n\r\n        var chunks = [];\r\n        for (i = 0; i < segments.length; i++) {\r\n            var segment = segments[i];\r\n            if (typeof segment !== 'string') {\r\n                // This is an object.\r\n                chunks.push(segment);\r\n            } else {\r\n                if (wsCollapse) {\r\n                    segment = segment.replace(collapsePat, ' ');\r\n                }\r\n\r\n                var parts = segment.split(re),\r\n                    acc = [];\r\n\r\n                for (j = 0; j < parts.length; j++) {\r\n                    var x = parts[j];\r\n                    if (mode === 'hard') {\r\n                        for (k = 0; k < x.length; k += wrapLen) {\r\n                            acc.push(x.slice(k, k + wrapLen));\r\n                        }\r\n                    }\r\n                    else { acc.push(x); }\r\n                }\r\n                chunks = chunks.concat(acc);\r\n            }\r\n        }\r\n\r\n        var curLine = 0,\r\n            curLineLength = start + preservedLinePrefix.length,\r\n            lines = [ prefix + preservedLinePrefix ],\r\n            // Holds the \"real length\" (excluding trailing whitespaces) of the\r\n            // current line if it exceeds `stop`, otherwise 0.\r\n            // ONLY USED when `wsAll` is true, in `finishOffCurLine()`.\r\n            bulge = 0,\r\n            // `cleanLine` is true iff we are at the beginning of an output line. By\r\n            // \"beginning\" we mean it doesn't contain any non-whitespace char yet.\r\n            // But its `curLineLength` can be greater than `start`, or even possibly\r\n            // be greater than `stop`, if `wsStrip` is false.\r\n            //\r\n            // Note that a \"clean\" line can still contain skip strings, in addition\r\n            // to whitespaces.\r\n            //\r\n            // This variable is used to allow us strip preceding whitespaces when\r\n            // `wsStrip` is true, or `wsLine` is true and `preservedLine` is false.\r\n            cleanLine = true,\r\n            // `preservedLine` is true iff we are in a preserved input line.\r\n            //\r\n            // It's used when `wsLine` is true to (combined with `cleanLine`) decide\r\n            // whether a whitespace is at the beginning of a preserved input line and\r\n            // should not be stripped.\r\n            preservedLine = true,\r\n            // The current indent prefix for wrapped lines.\r\n            wrapLinePrefix = wrapLineInitPrefix,\r\n            remnant;\r\n\r\n        // Always returns '' if `beforeHardBreak` is true.\r\n        //\r\n        // Assumption: Each call of this function is always followed by a `lines.push()` call.\r\n        //\r\n        // This function can change the status of `cleanLine`, but we don't modify the value of\r\n        // `cleanLine` in this function. It's fine because `cleanLine` will be set to the correct\r\n        // value after the `lines.push()` call following this function call. We also don't update\r\n        // `curLineLength` when pushing a new line and it's safe for the same reason.\r\n        function finishOffCurLine(beforeHardBreak) {\r\n            var str = lines[curLine],\r\n                idx, ln, rBase;\r\n\r\n            if (!wsAll) {\r\n                // Strip all trailing whitespaces past `start`.\r\n                idx = str.length - 1;\r\n                while (idx >= start && str[idx] === ' ') { idx--; }\r\n                while (idx >= start && wsPat.test(str[idx])) { idx--; }\r\n                idx++;\r\n\r\n                if (idx !== str.length) {\r\n                    lines[curLine] = str.substring(0, idx);\r\n                }\r\n\r\n                if (preservedLine && cleanLine && wsLine && curLineLength > stop) {\r\n                    // Add the remnants to the next line, just like when `wsAll` is true.\r\n                    rBase = str.length - (curLineLength - stop);\r\n                    if (rBase < idx) {\r\n                        // We didn't reach `stop` when stripping due to a bulge.\r\n                        rBase = idx;\r\n                    }\r\n                }\r\n            } else {\r\n                // Strip trailing whitespaces exceeding stop.\r\n                if (curLineLength > stop) {\r\n                    bulge = bulge || stop;\r\n                    rBase = str.length - (curLineLength - bulge);\r\n                    lines[curLine] = str.substring(0,  rBase);\r\n                }\r\n                bulge = 0;\r\n            }\r\n\r\n            // Bug: the current implementation of `wrapLineIndent` is buggy: we are not\r\n            // taking the extra space occupied by the additional indentation into account\r\n            // when wrapping the line. For example, in \"hard\" mode, we should hard-wrap\r\n            // long words at `wrapLen - wrapLinePrefix.length` instead of `wrapLen`;\r\n            // and remnants should also be wrapped at `wrapLen - wrapLinePrefix.length`.\r\n            if (preservedLine) {\r\n                // This is a preserved line, and the next output line isn't a\r\n                // preserved line.\r\n                preservedLine = false;\r\n                if (wrapLineIndentPat) {\r\n                    idx = lines[curLine].substring(start).search(wrapLineIndentPat);\r\n                    if (idx >= 0 && idx + wrapLineIndent > 0) {\r\n                        wrapLinePrefix = new Array(idx + wrapLineIndent + 1).join(' ');\r\n                    } else {\r\n                        wrapLinePrefix = '';\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Some remnants are left to the next line.\r\n            if (rBase) {\r\n                while (rBase + wrapLen < str.length) {\r\n                    if (wsAll) {\r\n                        ln = str.substring(rBase, rBase + wrapLen);\r\n                        lines.push(prefix + wrapLinePrefix + ln);\r\n                    } else {\r\n                        lines.push(prefix + wrapLinePrefix);\r\n                    }\r\n                    rBase += wrapLen;\r\n                    curLine++;\r\n                }\r\n                if (beforeHardBreak) {\r\n                    if (wsAll) {\r\n                        ln = str.substring(rBase);\r\n                        lines.push(prefix + wrapLinePrefix + ln);\r\n                    } else {\r\n                        lines.push(prefix + wrapLinePrefix);\r\n                    }\r\n                    curLine++;\r\n                } else {\r\n                    ln = str.substring(rBase);\r\n                    return wrapLinePrefix + ln;\r\n                }\r\n            }\r\n\r\n            return '';\r\n        }\r\n\r\n        for (i = 0; i < chunks.length; i++) {\r\n            var chunk = chunks[i];\r\n\r\n            if (chunk === '') { continue; }\r\n\r\n            if (typeof chunk !== 'string') {\r\n                if (chunk.type === 'break') {\r\n                    // This is one or more line breaks.\r\n                    // Each entry in `breaks` is just zero or more whitespaces.\r\n                    if (respectLineBreaks !== 'none') {\r\n                        // Note that if `whitespace` is \"collapse\", we still need\r\n                        // to collapse whitespaces in entries of `breaks`.\r\n                        var breaks = chunk.breaks;\r\n                        var num = breaks.length - 1;\r\n\r\n                        if (respectLineBreaks === 's') {\r\n                            // This is the most complex scenario. We have to check\r\n                            // the line breaks one by one.\r\n                            for (j = 0; j < num; j++) {\r\n                                if (breaks[j+1].length < respectNum) {\r\n                                    // This line break should be stripped.\r\n                                    if (wsCollapse) {\r\n                                        breaks[j+1] = ' ';\r\n                                    } else {\r\n                                        breaks[j+1] = breaks[j] + breaks[j+1];\r\n                                    }\r\n                                } else {\r\n                                    // This line break should be preserved.\r\n                                    // First finish off the current line.\r\n                                    if (wsAll) {\r\n                                        lines[curLine] += breaks[j];\r\n                                        curLineLength += breaks[j].length;\r\n                                    }\r\n                                    finishOffCurLine(true);\r\n\r\n                                    lines.push(prefix + preservedLinePrefix);\r\n                                    curLine++;\r\n                                    curLineLength = start + preservedLinePrefix.length;\r\n\r\n                                    preservedLine = cleanLine = true;\r\n                                }\r\n                            }\r\n                            // We are adding to either the existing line (if no line break\r\n                            // is qualified for preservance) or a \"new\" line.\r\n                            if (!cleanLine || wsAll || (wsLine && preservedLine)) {\r\n                                if (wsCollapse || (!cleanLine && breaks[num] === '')) {\r\n                                    breaks[num] = ' ';\r\n                                }\r\n                                lines[curLine] += breaks[num];\r\n                                curLineLength += breaks[num].length;\r\n                            }\r\n                        } else if (respectLineBreaks === 'm' && num < respectNum) {\r\n                            // These line breaks should be stripped.\r\n                            if (!cleanLine || wsAll || (wsLine && preservedLine)) {\r\n                                if (wsCollapse) {\r\n                                    chunk = ' ';\r\n                                } else {\r\n                                    chunk = breaks.join('');\r\n                                    if (!cleanLine && chunk === '') {\r\n                                        chunk = ' ';\r\n                                    }\r\n                                }\r\n                                lines[curLine] += chunk;\r\n                                curLineLength += chunk.length;\r\n                            }\r\n                        } else {    // 'all' || ('m' && num >= respectNum)\r\n                            // These line breaks should be preserved.\r\n                            if (wsStrip) {\r\n                                // Finish off the current line.\r\n                                finishOffCurLine(true);\r\n\r\n                                for (j = 0; j < num; j++) {\r\n                                    lines.push(prefix + preservedLinePrefix);\r\n                                    curLine++;\r\n                                }\r\n\r\n                                curLineLength = start + preservedLinePrefix.length;\r\n                                preservedLine = cleanLine = true;\r\n\r\n                            } else {\r\n                                if (wsAll || (preservedLine && cleanLine)) {\r\n                                    lines[curLine] += breaks[0];\r\n                                    curLineLength += breaks[0].length;\r\n                                }\r\n\r\n                                for (j = 0; j < num; j++) {\r\n                                    // Finish off the current line.\r\n                                    finishOffCurLine(true);\r\n\r\n                                    lines.push(prefix + preservedLinePrefix + breaks[j+1]);\r\n                                    curLine++;\r\n                                    curLineLength = start + preservedLinePrefix.length + breaks[j+1].length;\r\n\r\n                                    preservedLine = cleanLine = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // These line breaks should be stripped.\r\n                        if (!cleanLine || wsAll || (wsLine && preservedLine)) {\r\n                            chunk = chunk.remaining;\r\n\r\n                            // Bug: If `wsAll` is true, `cleanLine` is false, and `chunk`\r\n                            // is '', we insert a space to replace the line break. This\r\n                            // space will be preserved even if we are at the end of an\r\n                            // output line, which is wrong behavior. However, I'm not\r\n                            // sure it's worth it to fix this edge case.\r\n                            if (wsCollapse || (!cleanLine && chunk === '')) {\r\n                                chunk = ' ';\r\n                            }\r\n                            lines[curLine] += chunk;\r\n                            curLineLength += chunk.length;\r\n                        }\r\n                    }\r\n                } else if (chunk.type === 'skip') {\r\n                    // This is a skip string.\r\n                    // Assumption: skip strings don't end with whitespaces.\r\n                    if (curLineLength > stop) {\r\n                        remnant = finishOffCurLine(false);\r\n\r\n                        lines.push(prefix + wrapLinePrefix);\r\n                        curLine++;\r\n                        curLineLength = start + wrapLinePrefix.length;\r\n\r\n                        if (remnant) {\r\n                            lines[curLine] += remnant;\r\n                            curLineLength += remnant.length;\r\n                        }\r\n\r\n                        cleanLine = true;\r\n                    }\r\n                    lines[curLine] += chunk.value;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            var chunk2;\r\n            while (1) {\r\n                chunk2 = undefined;\r\n                if (curLineLength + chunk.length > stop &&\r\n                        curLineLength + (chunk2 = chunk.replace(tPat, '')).length > stop &&\r\n                        chunk2 !== '' &&\r\n                        curLineLength > start) {\r\n                    // This line is full, add `chunk` to the next line\r\n                    remnant = finishOffCurLine(false);\r\n\r\n                    lines.push(prefix + wrapLinePrefix);\r\n                    curLine++;\r\n                    curLineLength = start + wrapLinePrefix.length;\r\n\r\n                    if (remnant) {\r\n                        lines[curLine] += remnant;\r\n                        curLineLength += remnant.length;\r\n                        cleanLine = true;\r\n                        continue;\r\n                    }\r\n\r\n                    if (wsStrip || (wsLine && !(preservedLine && cleanLine))) {\r\n                        chunk = chunk.replace(pPat, '');\r\n                    }\r\n                    cleanLine = false;\r\n\r\n                } else {\r\n                    // Add `chunk` to this line\r\n                    if (cleanLine) {\r\n                        if (wsStrip || (wsLine && !(preservedLine && cleanLine))) {\r\n                            chunk = chunk.replace(pPat, '');\r\n                            if (chunk !== '') {\r\n                                cleanLine = false;\r\n                            }\r\n                        } else {\r\n                            if (nonWsPat.test(chunk)) {\r\n                                cleanLine = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            if (wsAll && chunk2 && curLineLength + chunk2.length > stop) {\r\n                bulge = curLineLength + chunk2.length;\r\n            }\r\n            lines[curLine] += chunk;\r\n            curLineLength += chunk.length;\r\n        }\r\n        // Finally, finish off the last line.\r\n        finishOffCurLine(true);\r\n        return lines.join(lineBreakStr);\r\n    };\r\n};\r\n\r\nlinewrap.soft = linewrap;\r\n\r\nlinewrap.hard = function (/*start, stop, params*/) {\r\n    var args = [].slice.call(arguments);\r\n    var last = args.length - 1;\r\n    if (typeof args[last] === 'object') {\r\n        args[last].mode = 'hard';\r\n    } else {\r\n        args.push({ mode : 'hard' });\r\n    }\r\n    return linewrap.apply(null, args);\r\n};\r\n\r\nlinewrap.wrap = function(text/*, start, stop, params*/) {\r\n    var args = [].slice.call(arguments);\r\n    args.shift();\r\n    return linewrap.apply(null, args)(text);\r\n};\r\n","\"use strict\";\r\n\r\n// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.\r\nmodule.exports = {\r\n  \"437\": \"cp437\",\r\n  \"737\": \"cp737\",\r\n  \"775\": \"cp775\",\r\n  \"850\": \"cp850\",\r\n  \"852\": \"cp852\",\r\n  \"855\": \"cp855\",\r\n  \"856\": \"cp856\",\r\n  \"857\": \"cp857\",\r\n  \"858\": \"cp858\",\r\n  \"860\": \"cp860\",\r\n  \"861\": \"cp861\",\r\n  \"862\": \"cp862\",\r\n  \"863\": \"cp863\",\r\n  \"864\": \"cp864\",\r\n  \"865\": \"cp865\",\r\n  \"866\": \"cp866\",\r\n  \"869\": \"cp869\",\r\n  \"874\": \"windows874\",\r\n  \"922\": \"cp922\",\r\n  \"1046\": \"cp1046\",\r\n  \"1124\": \"cp1124\",\r\n  \"1125\": \"cp1125\",\r\n  \"1129\": \"cp1129\",\r\n  \"1133\": \"cp1133\",\r\n  \"1161\": \"cp1161\",\r\n  \"1162\": \"cp1162\",\r\n  \"1163\": \"cp1163\",\r\n  \"1250\": \"windows1250\",\r\n  \"1251\": \"windows1251\",\r\n  \"1252\": \"windows1252\",\r\n  \"1253\": \"windows1253\",\r\n  \"1254\": \"windows1254\",\r\n  \"1255\": \"windows1255\",\r\n  \"1256\": \"windows1256\",\r\n  \"1257\": \"windows1257\",\r\n  \"1258\": \"windows1258\",\r\n  \"28591\": \"iso88591\",\r\n  \"28592\": \"iso88592\",\r\n  \"28593\": \"iso88593\",\r\n  \"28594\": \"iso88594\",\r\n  \"28595\": \"iso88595\",\r\n  \"28596\": \"iso88596\",\r\n  \"28597\": \"iso88597\",\r\n  \"28598\": \"iso88598\",\r\n  \"28599\": \"iso88599\",\r\n  \"28600\": \"iso885910\",\r\n  \"28601\": \"iso885911\",\r\n  \"28603\": \"iso885913\",\r\n  \"28604\": \"iso885914\",\r\n  \"28605\": \"iso885915\",\r\n  \"28606\": \"iso885916\",\r\n  \"windows874\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\r\n  },\r\n  \"win874\": \"windows874\",\r\n  \"cp874\": \"windows874\",\r\n  \"windows1250\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\r\n  },\r\n  \"win1250\": \"windows1250\",\r\n  \"cp1250\": \"windows1250\",\r\n  \"windows1251\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\r\n  },\r\n  \"win1251\": \"windows1251\",\r\n  \"cp1251\": \"windows1251\",\r\n  \"windows1252\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\r\n  },\r\n  \"win1252\": \"windows1252\",\r\n  \"cp1252\": \"windows1252\",\r\n  \"windows1253\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\r\n  },\r\n  \"win1253\": \"windows1253\",\r\n  \"cp1253\": \"windows1253\",\r\n  \"windows1254\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\r\n  },\r\n  \"win1254\": \"windows1254\",\r\n  \"cp1254\": \"windows1254\",\r\n  \"windows1255\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\r\n  },\r\n  \"win1255\": \"windows1255\",\r\n  \"cp1255\": \"windows1255\",\r\n  \"windows1256\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے\"\r\n  },\r\n  \"win1256\": \"windows1256\",\r\n  \"cp1256\": \"windows1256\",\r\n  \"windows1257\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙\"\r\n  },\r\n  \"win1257\": \"windows1257\",\r\n  \"cp1257\": \"windows1257\",\r\n  \"windows1258\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\r\n  },\r\n  \"win1258\": \"windows1258\",\r\n  \"cp1258\": \"windows1258\",\r\n  \"iso88591\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\r\n  },\r\n  \"cp28591\": \"iso88591\",\r\n  \"iso88592\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\r\n  },\r\n  \"cp28592\": \"iso88592\",\r\n  \"iso88593\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙\"\r\n  },\r\n  \"cp28593\": \"iso88593\",\r\n  \"iso88594\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙\"\r\n  },\r\n  \"cp28594\": \"iso88594\",\r\n  \"iso88595\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ\"\r\n  },\r\n  \"cp28595\": \"iso88595\",\r\n  \"iso88596\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������\"\r\n  },\r\n  \"cp28596\": \"iso88596\",\r\n  \"iso88597\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\r\n  },\r\n  \"cp28597\": \"iso88597\",\r\n  \"iso88598\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\r\n  },\r\n  \"cp28598\": \"iso88598\",\r\n  \"iso88599\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\r\n  },\r\n  \"cp28599\": \"iso88599\",\r\n  \"iso885910\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ\"\r\n  },\r\n  \"cp28600\": \"iso885910\",\r\n  \"iso885911\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\r\n  },\r\n  \"cp28601\": \"iso885911\",\r\n  \"iso885913\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’\"\r\n  },\r\n  \"cp28603\": \"iso885913\",\r\n  \"iso885914\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ\"\r\n  },\r\n  \"cp28604\": \"iso885914\",\r\n  \"iso885915\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\r\n  },\r\n  \"cp28605\": \"iso885915\",\r\n  \"iso885916\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ\"\r\n  },\r\n  \"cp28606\": \"iso885916\",\r\n  \"cp437\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\r\n  },\r\n  \"ibm437\": \"cp437\",\r\n  \"csibm437\": \"cp437\",\r\n  \"cp737\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ \"\r\n  },\r\n  \"ibm737\": \"cp737\",\r\n  \"csibm737\": \"cp737\",\r\n  \"cp775\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ \"\r\n  },\r\n  \"ibm775\": \"cp775\",\r\n  \"csibm775\": \"cp775\",\r\n  \"cp850\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\r\n  },\r\n  \"ibm850\": \"cp850\",\r\n  \"csibm850\": \"cp850\",\r\n  \"cp852\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ \"\r\n  },\r\n  \"ibm852\": \"cp852\",\r\n  \"csibm852\": \"cp852\",\r\n  \"cp855\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ \"\r\n  },\r\n  \"ibm855\": \"cp855\",\r\n  \"csibm855\": \"cp855\",\r\n  \"cp856\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ \"\r\n  },\r\n  \"ibm856\": \"cp856\",\r\n  \"csibm856\": \"cp856\",\r\n  \"cp857\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ \"\r\n  },\r\n  \"ibm857\": \"cp857\",\r\n  \"csibm857\": \"cp857\",\r\n  \"cp858\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\r\n  },\r\n  \"ibm858\": \"cp858\",\r\n  \"csibm858\": \"cp858\",\r\n  \"cp860\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\r\n  },\r\n  \"ibm860\": \"cp860\",\r\n  \"csibm860\": \"cp860\",\r\n  \"cp861\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\r\n  },\r\n  \"ibm861\": \"cp861\",\r\n  \"csibm861\": \"cp861\",\r\n  \"cp862\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\r\n  },\r\n  \"ibm862\": \"cp862\",\r\n  \"csibm862\": \"cp862\",\r\n  \"cp863\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\r\n  },\r\n  \"ibm863\": \"cp863\",\r\n  \"csibm863\": \"cp863\",\r\n  \"cp864\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�\"\r\n  },\r\n  \"ibm864\": \"cp864\",\r\n  \"csibm864\": \"cp864\",\r\n  \"cp865\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\r\n  },\r\n  \"ibm865\": \"cp865\",\r\n  \"csibm865\": \"cp865\",\r\n  \"cp866\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ \"\r\n  },\r\n  \"ibm866\": \"cp866\",\r\n  \"csibm866\": \"cp866\",\r\n  \"cp869\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ \"\r\n  },\r\n  \"ibm869\": \"cp869\",\r\n  \"csibm869\": \"cp869\",\r\n  \"cp922\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ\"\r\n  },\r\n  \"ibm922\": \"cp922\",\r\n  \"csibm922\": \"cp922\",\r\n  \"cp1046\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�\"\r\n  },\r\n  \"ibm1046\": \"cp1046\",\r\n  \"csibm1046\": \"cp1046\",\r\n  \"cp1124\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ\"\r\n  },\r\n  \"ibm1124\": \"cp1124\",\r\n  \"csibm1124\": \"cp1124\",\r\n  \"cp1125\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ \"\r\n  },\r\n  \"ibm1125\": \"cp1125\",\r\n  \"csibm1125\": \"cp1125\",\r\n  \"cp1129\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\r\n  },\r\n  \"ibm1129\": \"cp1129\",\r\n  \"csibm1129\": \"cp1129\",\r\n  \"cp1133\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�\"\r\n  },\r\n  \"ibm1133\": \"cp1133\",\r\n  \"csibm1133\": \"cp1133\",\r\n  \"cp1161\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ \"\r\n  },\r\n  \"ibm1161\": \"cp1161\",\r\n  \"csibm1161\": \"cp1161\",\r\n  \"cp1162\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\r\n  },\r\n  \"ibm1162\": \"cp1162\",\r\n  \"csibm1162\": \"cp1162\",\r\n  \"cp1163\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\r\n  },\r\n  \"ibm1163\": \"cp1163\",\r\n  \"csibm1163\": \"cp1163\",\r\n  \"maccroatian\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ\"\r\n  },\r\n  \"maccyrillic\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\r\n  },\r\n  \"macgreek\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�\"\r\n  },\r\n  \"maciceland\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\r\n  },\r\n  \"macroman\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\r\n  },\r\n  \"macromania\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\r\n  },\r\n  \"macthai\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����\"\r\n  },\r\n  \"macturkish\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ\"\r\n  },\r\n  \"macukraine\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\r\n  },\r\n  \"koi8r\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\r\n  },\r\n  \"koi8u\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\r\n  },\r\n  \"koi8ru\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\r\n  },\r\n  \"koi8t\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\r\n  },\r\n  \"armscii8\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�\"\r\n  },\r\n  \"rk1048\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\r\n  },\r\n  \"tcvn\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"\\u0000ÚỤ\\u0003ỪỬỮ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010ỨỰỲỶỸÝỴ\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ\"\r\n  },\r\n  \"georgianacademy\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\r\n  },\r\n  \"georgianps\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\r\n  },\r\n  \"pt154\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\r\n  },\r\n  \"viscii\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"\\u0000\\u0001Ẳ\\u0003\\u0004ẴẪ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013Ỷ\\u0015\\u0016\\u0017\\u0018Ỹ\\u001a\\u001b\\u001c\\u001dỴ\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ\"\r\n  },\r\n  \"iso646cn\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\r\n  },\r\n  \"iso646jp\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\r\n  },\r\n  \"hproman8\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�\"\r\n  },\r\n  \"macintosh\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\r\n  },\r\n  \"ascii\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"��������������������������������������������������������������������������������������������������������������������������������\"\r\n  },\r\n  \"tis620\": {\r\n    \"type\": \"_sbcs\",\r\n    \"chars\": \"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\r\n  }\r\n}","/* globals document, ImageData */\r\n\r\nconst parseFont = require('./lib/parse-font')\r\n\r\nexports.parseFont = parseFont\r\n\r\nexports.createCanvas = function (width, height) {\r\n  return Object.assign(document.createElement('canvas'), { width: width, height: height })\r\n}\r\n\r\nexports.createImageData = function (array, width, height) {\r\n  // Browser implementation of ImageData looks at the number of arguments passed\r\n  switch (arguments.length) {\r\n    case 0: return new ImageData()\r\n    case 1: return new ImageData(array)\r\n    case 2: return new ImageData(array, width)\r\n    default: return new ImageData(array, width, height)\r\n  }\r\n}\r\n\r\nexports.loadImage = function (src, options) {\r\n  return new Promise(function (resolve, reject) {\r\n    const image = Object.assign(document.createElement('img'), options)\r\n\r\n    function cleanup () {\r\n      image.onload = null\r\n      image.onerror = null\r\n    }\r\n\r\n    image.onload = function () { cleanup(); resolve(image) }\r\n    image.onerror = function () { cleanup(); reject(new Error('Failed to load the image \"' + src + '\"')) }\r\n\r\n    image.src = src\r\n  })\r\n}\r\n","\"use strict\";\r\n\r\n// Some environments don't have global Buffer (e.g. React Native).\r\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\r\nvar Buffer = require(\"safer-buffer\").Buffer;\r\n\r\nvar bomHandling = require(\"./bom-handling\"),\r\n    iconv = module.exports;\r\n\r\n// All codecs and aliases are kept here, keyed by encoding name/alias.\r\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\r\niconv.encodings = null;\r\n\r\n// Characters emitted in case of error.\r\niconv.defaultCharUnicode = '�';\r\niconv.defaultCharSingleByte = '?';\r\n\r\n// Public API.\r\niconv.encode = function encode(str, encoding, options) {\r\n    str = \"\" + (str || \"\"); // Ensure string.\r\n\r\n    var encoder = iconv.getEncoder(encoding, options);\r\n\r\n    var res = encoder.write(str);\r\n    var trail = encoder.end();\r\n    \r\n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\r\n}\r\n\r\niconv.decode = function decode(buf, encoding, options) {\r\n    if (typeof buf === 'string') {\r\n        if (!iconv.skipDecodeWarning) {\r\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\r\n            iconv.skipDecodeWarning = true;\r\n        }\r\n\r\n        buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\r\n    }\r\n\r\n    var decoder = iconv.getDecoder(encoding, options);\r\n\r\n    var res = decoder.write(buf);\r\n    var trail = decoder.end();\r\n\r\n    return trail ? (res + trail) : res;\r\n}\r\n\r\niconv.encodingExists = function encodingExists(enc) {\r\n    try {\r\n        iconv.getCodec(enc);\r\n        return true;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// Legacy aliases to convert functions\r\niconv.toEncoding = iconv.encode;\r\niconv.fromEncoding = iconv.decode;\r\n\r\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\r\niconv._codecDataCache = {};\r\niconv.getCodec = function getCodec(encoding) {\r\n    if (!iconv.encodings)\r\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\r\n    \r\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\r\n    var enc = iconv._canonicalizeEncoding(encoding);\r\n\r\n    // Traverse iconv.encodings to find actual codec.\r\n    var codecOptions = {};\r\n    while (true) {\r\n        var codec = iconv._codecDataCache[enc];\r\n        if (codec)\r\n            return codec;\r\n\r\n        var codecDef = iconv.encodings[enc];\r\n\r\n        switch (typeof codecDef) {\r\n            case \"string\": // Direct alias to other encoding.\r\n                enc = codecDef;\r\n                break;\r\n\r\n            case \"object\": // Alias with options. Can be layered.\r\n                for (var key in codecDef)\r\n                    codecOptions[key] = codecDef[key];\r\n\r\n                if (!codecOptions.encodingName)\r\n                    codecOptions.encodingName = enc;\r\n                \r\n                enc = codecDef.type;\r\n                break;\r\n\r\n            case \"function\": // Codec itself.\r\n                if (!codecOptions.encodingName)\r\n                    codecOptions.encodingName = enc;\r\n\r\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\r\n                // It'll be called only once (for each different options object).\r\n                codec = new codecDef(codecOptions, iconv);\r\n\r\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\r\n                return codec;\r\n\r\n            default:\r\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\r\n        }\r\n    }\r\n}\r\n\r\niconv._canonicalizeEncoding = function(encoding) {\r\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\r\n    return (''+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\r\n}\r\n\r\niconv.getEncoder = function getEncoder(encoding, options) {\r\n    var codec = iconv.getCodec(encoding),\r\n        encoder = new codec.encoder(options, codec);\r\n\r\n    if (codec.bomAware && options && options.addBOM)\r\n        encoder = new bomHandling.PrependBOM(encoder, options);\r\n\r\n    return encoder;\r\n}\r\n\r\niconv.getDecoder = function getDecoder(encoding, options) {\r\n    var codec = iconv.getCodec(encoding),\r\n        decoder = new codec.decoder(options, codec);\r\n\r\n    if (codec.bomAware && !(options && options.stripBOM === false))\r\n        decoder = new bomHandling.StripBOM(decoder, options);\r\n\r\n    return decoder;\r\n}\r\n\r\n\r\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\r\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\r\nif (nodeVer) {\r\n\r\n    // Load streaming support in Node v0.10+\r\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\r\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\r\n        require(\"./streams\")(iconv);\r\n    }\r\n\r\n    // Load Node primitive extensions.\r\n    require(\"./extend-node\")(iconv);\r\n}\r\n\r\nif (\"Ā\" != \"\\u0100\") {\r\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\r\n}\r\n","/* (ignored) */","/* (ignored) */","'use strict'\r\n\r\n/**\r\n * Font RegExp helpers.\r\n */\r\n\r\nconst weights = 'bold|bolder|lighter|[1-9]00'\r\nconst styles = 'italic|oblique'\r\nconst variants = 'small-caps'\r\nconst stretches = 'ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded'\r\nconst units = 'px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q'\r\nconst string = '\\'([^\\']+)\\'|\"([^\"]+)\"|[\\\\w\\\\s-]+'\r\n\r\n// [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]?\r\n//    <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ]\r\n// https://drafts.csswg.org/css-fonts-3/#font-prop\r\nconst weightRe = new RegExp(`(${weights}) +`, 'i')\r\nconst styleRe = new RegExp(`(${styles}) +`, 'i')\r\nconst variantRe = new RegExp(`(${variants}) +`, 'i')\r\nconst stretchRe = new RegExp(`(${stretches}) +`, 'i')\r\nconst sizeFamilyRe = new RegExp(\r\n  `([\\\\d\\\\.]+)(${units}) *((?:${string})( *, *(?:${string}))*)`)\r\n\r\n/**\r\n * Cache font parsing.\r\n */\r\n\r\nconst cache = {}\r\n\r\nconst defaultHeight = 16 // pt, common browser default\r\n\r\n/**\r\n * Parse font `str`.\r\n *\r\n * @param {String} str\r\n * @return {Object} Parsed font. `size` is in device units. `unit` is the unit\r\n *   appearing in the input string.\r\n * @api private\r\n */\r\n\r\nmodule.exports = str => {\r\n  // Cached\r\n  if (cache[str]) return cache[str]\r\n\r\n  // Try for required properties first.\r\n  const sizeFamily = sizeFamilyRe.exec(str)\r\n  if (!sizeFamily) return // invalid\r\n\r\n  // Default values and required properties\r\n  const font = {\r\n    weight: 'normal',\r\n    style: 'normal',\r\n    stretch: 'normal',\r\n    variant: 'normal',\r\n    size: parseFloat(sizeFamily[1]),\r\n    unit: sizeFamily[2],\r\n    family: sizeFamily[3].replace(/[\"']/g, '').replace(/ *, */g, ',')\r\n  }\r\n\r\n  // Optional, unordered properties.\r\n  let weight, style, variant, stretch\r\n  // Stop search at `sizeFamily.index`\r\n  const substr = str.substring(0, sizeFamily.index)\r\n  if ((weight = weightRe.exec(substr))) font.weight = weight[1]\r\n  if ((style = styleRe.exec(substr))) font.style = style[1]\r\n  if ((variant = variantRe.exec(substr))) font.variant = variant[1]\r\n  if ((stretch = stretchRe.exec(substr))) font.stretch = stretch[1]\r\n\r\n  // Convert to device units. (`font.unit` is the original unit)\r\n  // TODO: ch, ex\r\n  switch (font.unit) {\r\n    case 'pt':\r\n      font.size /= 0.75\r\n      break\r\n    case 'pc':\r\n      font.size *= 16\r\n      break\r\n    case 'in':\r\n      font.size *= 96\r\n      break\r\n    case 'cm':\r\n      font.size *= 96.0 / 2.54\r\n      break\r\n    case 'mm':\r\n      font.size *= 96.0 / 25.4\r\n      break\r\n    case '%':\r\n      // TODO disabled because existing unit tests assume 100\r\n      // font.size *= defaultHeight / 100 / 0.75\r\n      break\r\n    case 'em':\r\n    case 'rem':\r\n      font.size *= defaultHeight / 0.75\r\n      break\r\n    case 'q':\r\n      font.size *= 96 / 25.4 / 4\r\n      break\r\n  }\r\n\r\n  return (cache[str] = font)\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\ndeclare let window: any;\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class DatecsprinterService {\r\n\r\n  DatecsPrinter: any;\r\n  constructor() {\r\n    console.log('Hello DatecsPrinter Provider');\r\n  }\r\n\r\n  async listBluetoothDevices (){\r\n    return new Promise((resolve, reject) => {\r\n        window.DatecsPrinter.listBluetoothDevices(\r\n          function (success) {\r\n            resolve(success);\r\n          },\r\n          function (error) {\r\n            reject(error);\r\n          });\r\n    });\r\n\r\n  }\r\n   connect(address:string){\r\n    return new Promise((resolve, reject) => {\r\n      window.DatecsPrinter.connect(address,\r\n          function (success) {\r\n            resolve(success);\r\n          },\r\n          function (error) {\r\n            reject(error);\r\n          });\r\n    });\r\n\r\n  }\r\n  disconnect(){\r\n    return new Promise((resolve, reject) => {\r\n      window.DatecsPrinter.disconnect(\r\n          function (success) {\r\n            resolve(success);\r\n          },\r\n          function (error) {\r\n            reject(error);\r\n          });\r\n    });\r\n\r\n  }\r\n  feedPaper(lines:number = 1){\r\n    return new Promise((resolve, reject) => {\r\n      window.DatecsPrinter.feedPaper(lines,\r\n          function (success) {\r\n            resolve(success);\r\n          },\r\n          function (error) {\r\n            reject(error);\r\n          });\r\n    });\r\n\r\n  }\r\n  printText (text:string, charset:string = 'ISO-8859-1'){\r\n    return new Promise((resolve, reject) => {\r\n      window.DatecsPrinter.printText( text,\r\n        charset,\r\n          function (success) {\r\n            resolve(success);\r\n          },\r\n          function (error) {\r\n            reject(error);\r\n          });\r\n    });\r\n\r\n  }\r\n\r\n  setBarcode (align, small, scale, hri, height) {\r\n    return new Promise((resolve, reject) => {\r\n      window.DatecsPrinter.setBarcode(\r\n        align,\r\n        small,\r\n        scale,\r\n        hri,\r\n        height,\r\n          function (success) {\r\n            resolve(success);\r\n          },\r\n          function (error) {\r\n            reject(error);\r\n          });\r\n    });\r\n\r\n  }\r\n\r\n  printBarcode(data = '1234445775', type = 73) {\r\n    return new Promise((resolve, reject) => {\r\n      window.DatecsPrinter.printBarcode(\r\n        type,\r\n        data,\r\n          function (success) {\r\n            resolve(success);\r\n          },\r\n          function (error) {\r\n            reject(error);\r\n          });\r\n    });\r\n\r\n  }\r\n\r\n  getStatus(){\r\n    return new Promise((resolve, reject) => {\r\n      window.DatecsPrinter.getStatus(\r\n        function (success) {\r\n            resolve(success);\r\n          },\r\n          function (error) {\r\n            reject(error);\r\n          });\r\n    });\r\n\r\n  }\r\n  getTemperature(){\r\n    return new Promise((resolve, reject) => {\r\n      window.DatecsPrinter.getTemperature(\r\n        function (success) {\r\n            resolve(success);\r\n          },\r\n          function (error) {\r\n            reject(error);\r\n          });\r\n    });\r\n\r\n  }\r\n  printImage (image:string, height:number, width:number, align = 0){\r\n    return new Promise((resolve, reject) => {\r\n      window.DatecsPrinter.printImage(\r\n        image,\r\n        height,\r\n        width,\r\n        align,\r\n        function (success) {\r\n            resolve(success);\r\n          },\r\n          function (error) {\r\n            reject(error);\r\n          });\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n/*! canvas-to-bmp version 1.0 ALPHA\r\n    (c) 2015 Ken \"Epistemex\" Fyrstenberg\r\n    MIT License (this header required)\r\n*/\r\n\r\npublic CanvasToBMP = {\r\n\r\n  /**\r\n   * Convert a canvas element to ArrayBuffer containing a BMP file\r\n   * with support for 32-bit (alpha).\r\n   *\r\n   * Note that CORS requirement must be fulfilled.\r\n   *\r\n   * @param {HTMLCanvasElement} canvas - the canvas element to convert\r\n   * @return {ArrayBuffer}\r\n   */\r\n  toArrayBuffer: function(canvas) {\r\n\r\n    var w = canvas.width,\r\n        h = canvas.height,\r\n        w4 = w * 4,\r\n        idata = canvas.getContext(\"2d\").getImageData(0, 0, w, h),\r\n        data32 = new Uint32Array(idata.data.buffer), // 32-bit representation of canvas\r\n\r\n        stride = Math.floor((32 * w + 31) / 32) * 4, // row length incl. padding\r\n        pixelArraySize = stride * h,                 // total bitmap size\r\n        fileLength = 122 + pixelArraySize,           // header size is known + bitmap\r\n\r\n        file = new ArrayBuffer(fileLength),          // raw byte buffer (returned)\r\n        view = new DataView(file),                   // handle endian, reg. width etc.\r\n        pos = 0, x, y = 0, p, s = 0, a, v;\r\n\r\n    // write file header\r\n    setU16(0x4d42);          // BM\r\n    setU32(fileLength);      // total length\r\n    pos += 4;                // skip unused fields\r\n    setU32(0x7a);            // offset to pixels\r\n\r\n    // DIB header\r\n    setU32(108);             // header size\r\n    setU32(w);\r\n    setU32(-h >>> 0);        // negative = top-to-bottom\r\n    setU16(1);               // 1 plane\r\n    setU16(32);              // 32-bits (RGBA)\r\n    setU32(3);               // no compression (BI_BITFIELDS, 3)\r\n    setU32(pixelArraySize);  // bitmap size incl. padding (stride x height)\r\n    setU32(2835);            // pixels/meter h (~72 DPI x 39.3701 inch/m)\r\n    setU32(2835);            // pixels/meter v\r\n    pos += 8;                // skip color/important colors\r\n    setU32(0xff0000);        // red channel mask\r\n    setU32(0xff00);          // green channel mask\r\n    setU32(0xff);            // blue channel mask\r\n    setU32(0xff000000);      // alpha channel mask\r\n    setU32(0x57696e20);      // \" win\" color space\r\n\r\n    // bitmap data, change order of ABGR to BGRA\r\n    while (y < h) {\r\n      p = 0x7a + y * stride; // offset + stride x height\r\n      x = 0;\r\n      while (x < w4) {\r\n        v = data32[s++];                     // get ABGR\r\n        a = v >>> 24;                        // alpha channel\r\n        view.setUint32(p + x, (v << 8) | a); // set BGRA\r\n        x += 4;\r\n      }\r\n      y++\r\n    }\r\n\r\n    return file;\r\n\r\n    // helper method to move current buffer position\r\n    function setU16(data) {view.setUint16(pos, data, true); pos += 2}\r\n    function setU32(data) {view.setUint32(pos, data, true); pos += 4}\r\n  },\r\n\r\n  /**\r\n   * Converts a canvas to BMP file, returns a Blob representing the\r\n   * file. This can be used with URL.createObjectURL().\r\n   * Note that CORS requirement must be fulfilled.\r\n   *\r\n   * @param {HTMLCanvasElement} canvas - the canvas element to convert\r\n   * @return {Blob}\r\n   */\r\n  toBlob: function(canvas) {\r\n    return new Blob([this.toArrayBuffer(canvas)], {\r\n      type: \"image/bmp\"\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Converts the canvas to a data-URI representing a BMP file.\r\n   * Note that CORS requirement must be fulfilled.\r\n   *\r\n   * @param canvas\r\n   * @return {string}\r\n   */\r\n  toDataURL: function(canvas) {\r\n    var buffer = new Uint8Array(this.toArrayBuffer(canvas)),\r\n        bs = \"\", i = 0, l = buffer.length;\r\n    while (i < l) bs += String.fromCharCode(buffer[i++]);\r\n    return \"data:image/bmp;base64,\" + btoa(bs);\r\n  }\r\n};\r\n\r\n}\r\n","\"use strict\";\r\nvar Buffer = require(\"safer-buffer\").Buffer;\r\n\r\n// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.\r\n// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.\r\n// To save memory and loading time, we read table files only when requested.\r\n\r\nexports._dbcs = DBCSCodec;\r\n\r\nvar UNASSIGNED = -1,\r\n    GB18030_CODE = -2,\r\n    SEQ_START  = -10,\r\n    NODE_START = -1000,\r\n    UNASSIGNED_NODE = new Array(0x100),\r\n    DEF_CHAR = -1;\r\n\r\nfor (var i = 0; i < 0x100; i++)\r\n    UNASSIGNED_NODE[i] = UNASSIGNED;\r\n\r\n\r\n// Class DBCSCodec reads and initializes mapping tables.\r\nfunction DBCSCodec(codecOptions, iconv) {\r\n    this.encodingName = codecOptions.encodingName;\r\n    if (!codecOptions)\r\n        throw new Error(\"DBCS codec is called without the data.\")\r\n    if (!codecOptions.table)\r\n        throw new Error(\"Encoding '\" + this.encodingName + \"' has no data.\");\r\n\r\n    // Load tables.\r\n    var mappingTable = codecOptions.table();\r\n\r\n\r\n    // Decode tables: MBCS -> Unicode.\r\n\r\n    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.\r\n    // Trie root is decodeTables[0].\r\n    // Values: >=  0 -> unicode character code. can be > 0xFFFF\r\n    //         == UNASSIGNED -> unknown/unassigned sequence.\r\n    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.\r\n    //         <= NODE_START -> index of the next node in our trie to process next byte.\r\n    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.\r\n    this.decodeTables = [];\r\n    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.\r\n\r\n    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. \r\n    this.decodeTableSeq = [];\r\n\r\n    // Actual mapping tables consist of chunks. Use them to fill up decode tables.\r\n    for (var i = 0; i < mappingTable.length; i++)\r\n        this._addDecodeChunk(mappingTable[i]);\r\n\r\n    this.defaultCharUnicode = iconv.defaultCharUnicode;\r\n\r\n    \r\n    // Encode tables: Unicode -> DBCS.\r\n\r\n    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.\r\n    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.\r\n    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).\r\n    //         == UNASSIGNED -> no conversion found. Output a default char.\r\n    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.\r\n    this.encodeTable = [];\r\n    \r\n    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of\r\n    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key\r\n    // means end of sequence (needed when one sequence is a strict subsequence of another).\r\n    // Objects are kept separately from encodeTable to increase performance.\r\n    this.encodeTableSeq = [];\r\n\r\n    // Some chars can be decoded, but need not be encoded.\r\n    var skipEncodeChars = {};\r\n    if (codecOptions.encodeSkipVals)\r\n        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {\r\n            var val = codecOptions.encodeSkipVals[i];\r\n            if (typeof val === 'number')\r\n                skipEncodeChars[val] = true;\r\n            else\r\n                for (var j = val.from; j <= val.to; j++)\r\n                    skipEncodeChars[j] = true;\r\n        }\r\n        \r\n    // Use decode trie to recursively fill out encode tables.\r\n    this._fillEncodeTable(0, 0, skipEncodeChars);\r\n\r\n    // Add more encoding pairs when needed.\r\n    if (codecOptions.encodeAdd) {\r\n        for (var uChar in codecOptions.encodeAdd)\r\n            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))\r\n                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);\r\n    }\r\n\r\n    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];\r\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];\r\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = \"?\".charCodeAt(0);\r\n\r\n\r\n    // Load & create GB18030 tables when needed.\r\n    if (typeof codecOptions.gb18030 === 'function') {\r\n        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.\r\n\r\n        // Add GB18030 decode tables.\r\n        var thirdByteNodeIdx = this.decodeTables.length;\r\n        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);\r\n\r\n        var fourthByteNodeIdx = this.decodeTables.length;\r\n        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);\r\n\r\n        for (var i = 0x81; i <= 0xFE; i++) {\r\n            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];\r\n            var secondByteNode = this.decodeTables[secondByteNodeIdx];\r\n            for (var j = 0x30; j <= 0x39; j++)\r\n                secondByteNode[j] = NODE_START - thirdByteNodeIdx;\r\n        }\r\n        for (var i = 0x81; i <= 0xFE; i++)\r\n            thirdByteNode[i] = NODE_START - fourthByteNodeIdx;\r\n        for (var i = 0x30; i <= 0x39; i++)\r\n            fourthByteNode[i] = GB18030_CODE\r\n    }        \r\n}\r\n\r\nDBCSCodec.prototype.encoder = DBCSEncoder;\r\nDBCSCodec.prototype.decoder = DBCSDecoder;\r\n\r\n// Decoder helpers\r\nDBCSCodec.prototype._getDecodeTrieNode = function(addr) {\r\n    var bytes = [];\r\n    for (; addr > 0; addr >>= 8)\r\n        bytes.push(addr & 0xFF);\r\n    if (bytes.length == 0)\r\n        bytes.push(0);\r\n\r\n    var node = this.decodeTables[0];\r\n    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.\r\n        var val = node[bytes[i]];\r\n\r\n        if (val == UNASSIGNED) { // Create new node.\r\n            node[bytes[i]] = NODE_START - this.decodeTables.length;\r\n            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));\r\n        }\r\n        else if (val <= NODE_START) { // Existing node.\r\n            node = this.decodeTables[NODE_START - val];\r\n        }\r\n        else\r\n            throw new Error(\"Overwrite byte in \" + this.encodingName + \", addr: \" + addr.toString(16));\r\n    }\r\n    return node;\r\n}\r\n\r\n\r\nDBCSCodec.prototype._addDecodeChunk = function(chunk) {\r\n    // First element of chunk is the hex mbcs code where we start.\r\n    var curAddr = parseInt(chunk[0], 16);\r\n\r\n    // Choose the decoding node where we'll write our chars.\r\n    var writeTable = this._getDecodeTrieNode(curAddr);\r\n    curAddr = curAddr & 0xFF;\r\n\r\n    // Write all other elements of the chunk to the table.\r\n    for (var k = 1; k < chunk.length; k++) {\r\n        var part = chunk[k];\r\n        if (typeof part === \"string\") { // String, write as-is.\r\n            for (var l = 0; l < part.length;) {\r\n                var code = part.charCodeAt(l++);\r\n                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate\r\n                    var codeTrail = part.charCodeAt(l++);\r\n                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)\r\n                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);\r\n                    else\r\n                        throw new Error(\"Incorrect surrogate pair in \"  + this.encodingName + \" at chunk \" + chunk[0]);\r\n                }\r\n                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)\r\n                    var len = 0xFFF - code + 2;\r\n                    var seq = [];\r\n                    for (var m = 0; m < len; m++)\r\n                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.\r\n\r\n                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;\r\n                    this.decodeTableSeq.push(seq);\r\n                }\r\n                else\r\n                    writeTable[curAddr++] = code; // Basic char\r\n            }\r\n        } \r\n        else if (typeof part === \"number\") { // Integer, meaning increasing sequence starting with prev character.\r\n            var charCode = writeTable[curAddr - 1] + 1;\r\n            for (var l = 0; l < part; l++)\r\n                writeTable[curAddr++] = charCode++;\r\n        }\r\n        else\r\n            throw new Error(\"Incorrect type '\" + typeof part + \"' given in \"  + this.encodingName + \" at chunk \" + chunk[0]);\r\n    }\r\n    if (curAddr > 0xFF)\r\n        throw new Error(\"Incorrect chunk in \"  + this.encodingName + \" at addr \" + chunk[0] + \": too long\" + curAddr);\r\n}\r\n\r\n// Encoder helpers\r\nDBCSCodec.prototype._getEncodeBucket = function(uCode) {\r\n    var high = uCode >> 8; // This could be > 0xFF because of astral characters.\r\n    if (this.encodeTable[high] === undefined)\r\n        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.\r\n    return this.encodeTable[high];\r\n}\r\n\r\nDBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {\r\n    var bucket = this._getEncodeBucket(uCode);\r\n    var low = uCode & 0xFF;\r\n    if (bucket[low] <= SEQ_START)\r\n        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.\r\n    else if (bucket[low] == UNASSIGNED)\r\n        bucket[low] = dbcsCode;\r\n}\r\n\r\nDBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {\r\n    \r\n    // Get the root of character tree according to first character of the sequence.\r\n    var uCode = seq[0];\r\n    var bucket = this._getEncodeBucket(uCode);\r\n    var low = uCode & 0xFF;\r\n\r\n    var node;\r\n    if (bucket[low] <= SEQ_START) {\r\n        // There's already a sequence with  - use it.\r\n        node = this.encodeTableSeq[SEQ_START-bucket[low]];\r\n    }\r\n    else {\r\n        // There was no sequence object - allocate a new one.\r\n        node = {};\r\n        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.\r\n        bucket[low] = SEQ_START - this.encodeTableSeq.length;\r\n        this.encodeTableSeq.push(node);\r\n    }\r\n\r\n    // Traverse the character tree, allocating new nodes as needed.\r\n    for (var j = 1; j < seq.length-1; j++) {\r\n        var oldVal = node[uCode];\r\n        if (typeof oldVal === 'object')\r\n            node = oldVal;\r\n        else {\r\n            node = node[uCode] = {}\r\n            if (oldVal !== undefined)\r\n                node[DEF_CHAR] = oldVal\r\n        }\r\n    }\r\n\r\n    // Set the leaf to given dbcsCode.\r\n    uCode = seq[seq.length-1];\r\n    node[uCode] = dbcsCode;\r\n}\r\n\r\nDBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {\r\n    var node = this.decodeTables[nodeIdx];\r\n    for (var i = 0; i < 0x100; i++) {\r\n        var uCode = node[i];\r\n        var mbCode = prefix + i;\r\n        if (skipEncodeChars[mbCode])\r\n            continue;\r\n\r\n        if (uCode >= 0)\r\n            this._setEncodeChar(uCode, mbCode);\r\n        else if (uCode <= NODE_START)\r\n            this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);\r\n        else if (uCode <= SEQ_START)\r\n            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);\r\n    }\r\n}\r\n\r\n\r\n\r\n// == Encoder ==================================================================\r\n\r\nfunction DBCSEncoder(options, codec) {\r\n    // Encoder state\r\n    this.leadSurrogate = -1;\r\n    this.seqObj = undefined;\r\n    \r\n    // Static data\r\n    this.encodeTable = codec.encodeTable;\r\n    this.encodeTableSeq = codec.encodeTableSeq;\r\n    this.defaultCharSingleByte = codec.defCharSB;\r\n    this.gb18030 = codec.gb18030;\r\n}\r\n\r\nDBCSEncoder.prototype.write = function(str) {\r\n    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),\r\n        leadSurrogate = this.leadSurrogate,\r\n        seqObj = this.seqObj, nextChar = -1,\r\n        i = 0, j = 0;\r\n\r\n    while (true) {\r\n        // 0. Get next character.\r\n        if (nextChar === -1) {\r\n            if (i == str.length) break;\r\n            var uCode = str.charCodeAt(i++);\r\n        }\r\n        else {\r\n            var uCode = nextChar;\r\n            nextChar = -1;    \r\n        }\r\n\r\n        // 1. Handle surrogates.\r\n        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.\r\n            if (uCode < 0xDC00) { // We've got lead surrogate.\r\n                if (leadSurrogate === -1) {\r\n                    leadSurrogate = uCode;\r\n                    continue;\r\n                } else {\r\n                    leadSurrogate = uCode;\r\n                    // Double lead surrogate found.\r\n                    uCode = UNASSIGNED;\r\n                }\r\n            } else { // We've got trail surrogate.\r\n                if (leadSurrogate !== -1) {\r\n                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);\r\n                    leadSurrogate = -1;\r\n                } else {\r\n                    // Incomplete surrogate pair - only trail surrogate found.\r\n                    uCode = UNASSIGNED;\r\n                }\r\n                \r\n            }\r\n        }\r\n        else if (leadSurrogate !== -1) {\r\n            // Incomplete surrogate pair - only lead surrogate found.\r\n            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.\r\n            leadSurrogate = -1;\r\n        }\r\n\r\n        // 2. Convert uCode character.\r\n        var dbcsCode = UNASSIGNED;\r\n        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence\r\n            var resCode = seqObj[uCode];\r\n            if (typeof resCode === 'object') { // Sequence continues.\r\n                seqObj = resCode;\r\n                continue;\r\n\r\n            } else if (typeof resCode == 'number') { // Sequence finished. Write it.\r\n                dbcsCode = resCode;\r\n\r\n            } else if (resCode == undefined) { // Current character is not part of the sequence.\r\n\r\n                // Try default character for this sequence\r\n                resCode = seqObj[DEF_CHAR];\r\n                if (resCode !== undefined) {\r\n                    dbcsCode = resCode; // Found. Write it.\r\n                    nextChar = uCode; // Current character will be written too in the next iteration.\r\n\r\n                } else {\r\n                    // TODO: What if we have no default? (resCode == undefined)\r\n                    // Then, we should write first char of the sequence as-is and try the rest recursively.\r\n                    // Didn't do it for now because no encoding has this situation yet.\r\n                    // Currently, just skip the sequence and write current char.\r\n                }\r\n            }\r\n            seqObj = undefined;\r\n        }\r\n        else if (uCode >= 0) {  // Regular character\r\n            var subtable = this.encodeTable[uCode >> 8];\r\n            if (subtable !== undefined)\r\n                dbcsCode = subtable[uCode & 0xFF];\r\n            \r\n            if (dbcsCode <= SEQ_START) { // Sequence start\r\n                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];\r\n                continue;\r\n            }\r\n\r\n            if (dbcsCode == UNASSIGNED && this.gb18030) {\r\n                // Use GB18030 algorithm to find character(s) to write.\r\n                var idx = findIdx(this.gb18030.uChars, uCode);\r\n                if (idx != -1) {\r\n                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);\r\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;\r\n                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;\r\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;\r\n                    newBuf[j++] = 0x30 + dbcsCode;\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 3. Write dbcsCode character.\r\n        if (dbcsCode === UNASSIGNED)\r\n            dbcsCode = this.defaultCharSingleByte;\r\n        \r\n        if (dbcsCode < 0x100) {\r\n            newBuf[j++] = dbcsCode;\r\n        }\r\n        else if (dbcsCode < 0x10000) {\r\n            newBuf[j++] = dbcsCode >> 8;   // high byte\r\n            newBuf[j++] = dbcsCode & 0xFF; // low byte\r\n        }\r\n        else {\r\n            newBuf[j++] = dbcsCode >> 16;\r\n            newBuf[j++] = (dbcsCode >> 8) & 0xFF;\r\n            newBuf[j++] = dbcsCode & 0xFF;\r\n        }\r\n    }\r\n\r\n    this.seqObj = seqObj;\r\n    this.leadSurrogate = leadSurrogate;\r\n    return newBuf.slice(0, j);\r\n}\r\n\r\nDBCSEncoder.prototype.end = function() {\r\n    if (this.leadSurrogate === -1 && this.seqObj === undefined)\r\n        return; // All clean. Most often case.\r\n\r\n    var newBuf = Buffer.alloc(10), j = 0;\r\n\r\n    if (this.seqObj) { // We're in the sequence.\r\n        var dbcsCode = this.seqObj[DEF_CHAR];\r\n        if (dbcsCode !== undefined) { // Write beginning of the sequence.\r\n            if (dbcsCode < 0x100) {\r\n                newBuf[j++] = dbcsCode;\r\n            }\r\n            else {\r\n                newBuf[j++] = dbcsCode >> 8;   // high byte\r\n                newBuf[j++] = dbcsCode & 0xFF; // low byte\r\n            }\r\n        } else {\r\n            // See todo above.\r\n        }\r\n        this.seqObj = undefined;\r\n    }\r\n\r\n    if (this.leadSurrogate !== -1) {\r\n        // Incomplete surrogate pair - only lead surrogate found.\r\n        newBuf[j++] = this.defaultCharSingleByte;\r\n        this.leadSurrogate = -1;\r\n    }\r\n    \r\n    return newBuf.slice(0, j);\r\n}\r\n\r\n// Export for testing\r\nDBCSEncoder.prototype.findIdx = findIdx;\r\n\r\n\r\n// == Decoder ==================================================================\r\n\r\nfunction DBCSDecoder(options, codec) {\r\n    // Decoder state\r\n    this.nodeIdx = 0;\r\n    this.prevBuf = Buffer.alloc(0);\r\n\r\n    // Static data\r\n    this.decodeTables = codec.decodeTables;\r\n    this.decodeTableSeq = codec.decodeTableSeq;\r\n    this.defaultCharUnicode = codec.defaultCharUnicode;\r\n    this.gb18030 = codec.gb18030;\r\n}\r\n\r\nDBCSDecoder.prototype.write = function(buf) {\r\n    var newBuf = Buffer.alloc(buf.length*2),\r\n        nodeIdx = this.nodeIdx, \r\n        prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,\r\n        seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.\r\n        uCode;\r\n\r\n    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.\r\n        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);\r\n    \r\n    for (var i = 0, j = 0; i < buf.length; i++) {\r\n        var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];\r\n\r\n        // Lookup in current trie node.\r\n        var uCode = this.decodeTables[nodeIdx][curByte];\r\n\r\n        if (uCode >= 0) { \r\n            // Normal character, just use it.\r\n        }\r\n        else if (uCode === UNASSIGNED) { // Unknown char.\r\n            // TODO: Callback with seq.\r\n            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\r\n            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).\r\n            uCode = this.defaultCharUnicode.charCodeAt(0);\r\n        }\r\n        else if (uCode === GB18030_CODE) {\r\n            var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\r\n            var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);\r\n            var idx = findIdx(this.gb18030.gbChars, ptr);\r\n            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];\r\n        }\r\n        else if (uCode <= NODE_START) { // Go to next trie node.\r\n            nodeIdx = NODE_START - uCode;\r\n            continue;\r\n        }\r\n        else if (uCode <= SEQ_START) { // Output a sequence of chars.\r\n            var seq = this.decodeTableSeq[SEQ_START - uCode];\r\n            for (var k = 0; k < seq.length - 1; k++) {\r\n                uCode = seq[k];\r\n                newBuf[j++] = uCode & 0xFF;\r\n                newBuf[j++] = uCode >> 8;\r\n            }\r\n            uCode = seq[seq.length-1];\r\n        }\r\n        else\r\n            throw new Error(\"iconv-lite internal error: invalid decoding table value \" + uCode + \" at \" + nodeIdx + \"/\" + curByte);\r\n\r\n        // Write the character to buffer, handling higher planes using surrogate pair.\r\n        if (uCode > 0xFFFF) { \r\n            uCode -= 0x10000;\r\n            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);\r\n            newBuf[j++] = uCodeLead & 0xFF;\r\n            newBuf[j++] = uCodeLead >> 8;\r\n\r\n            uCode = 0xDC00 + uCode % 0x400;\r\n        }\r\n        newBuf[j++] = uCode & 0xFF;\r\n        newBuf[j++] = uCode >> 8;\r\n\r\n        // Reset trie node.\r\n        nodeIdx = 0; seqStart = i+1;\r\n    }\r\n\r\n    this.nodeIdx = nodeIdx;\r\n    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);\r\n    return newBuf.slice(0, j).toString('ucs2');\r\n}\r\n\r\nDBCSDecoder.prototype.end = function() {\r\n    var ret = '';\r\n\r\n    // Try to parse all remaining chars.\r\n    while (this.prevBuf.length > 0) {\r\n        // Skip 1 character in the buffer.\r\n        ret += this.defaultCharUnicode;\r\n        var buf = this.prevBuf.slice(1);\r\n\r\n        // Parse remaining as usual.\r\n        this.prevBuf = Buffer.alloc(0);\r\n        this.nodeIdx = 0;\r\n        if (buf.length > 0)\r\n            ret += this.write(buf);\r\n    }\r\n\r\n    this.nodeIdx = 0;\r\n    return ret;\r\n}\r\n\r\n// Binary search for GB18030. Returns largest i such that table[i] <= val.\r\nfunction findIdx(table, val) {\r\n    if (table[0] > val)\r\n        return -1;\r\n\r\n    var l = 0, r = table.length;\r\n    while (l < r-1) { // always table[l] <= val < table[r]\r\n        var mid = l + Math.floor((r-l+1)/2);\r\n        if (table[mid] <= val)\r\n            l = mid;\r\n        else\r\n            r = mid;\r\n    }\r\n    return l;\r\n}\r\n\r\n","\"use strict\";\r\nvar Buffer = require(\"safer-buffer\").Buffer;\r\n\r\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\r\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \r\n\r\nexports._sbcs = SBCSCodec;\r\nfunction SBCSCodec(codecOptions, iconv) {\r\n    if (!codecOptions)\r\n        throw new Error(\"SBCS codec is called without the data.\")\r\n    \r\n    // Prepare char buffer for decoding.\r\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\r\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\r\n    \r\n    if (codecOptions.chars.length === 128) {\r\n        var asciiString = \"\";\r\n        for (var i = 0; i < 128; i++)\r\n            asciiString += String.fromCharCode(i);\r\n        codecOptions.chars = asciiString + codecOptions.chars;\r\n    }\r\n\r\n    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');\r\n    \r\n    // Encoding buffer.\r\n    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));\r\n\r\n    for (var i = 0; i < codecOptions.chars.length; i++)\r\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\r\n\r\n    this.encodeBuf = encodeBuf;\r\n}\r\n\r\nSBCSCodec.prototype.encoder = SBCSEncoder;\r\nSBCSCodec.prototype.decoder = SBCSDecoder;\r\n\r\n\r\nfunction SBCSEncoder(options, codec) {\r\n    this.encodeBuf = codec.encodeBuf;\r\n}\r\n\r\nSBCSEncoder.prototype.write = function(str) {\r\n    var buf = Buffer.alloc(str.length);\r\n    for (var i = 0; i < str.length; i++)\r\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\r\n    \r\n    return buf;\r\n}\r\n\r\nSBCSEncoder.prototype.end = function() {\r\n}\r\n\r\n\r\nfunction SBCSDecoder(options, codec) {\r\n    this.decodeBuf = codec.decodeBuf;\r\n}\r\n\r\nSBCSDecoder.prototype.write = function(buf) {\r\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\r\n    var decodeBuf = this.decodeBuf;\r\n    var newBuf = Buffer.alloc(buf.length*2);\r\n    var idx1 = 0, idx2 = 0;\r\n    for (var i = 0; i < buf.length; i++) {\r\n        idx1 = buf[i]*2; idx2 = i*2;\r\n        newBuf[idx2] = decodeBuf[idx1];\r\n        newBuf[idx2+1] = decodeBuf[idx1+1];\r\n    }\r\n    return newBuf.toString('ucs2');\r\n}\r\n\r\nSBCSDecoder.prototype.end = function() {\r\n}\r\n","'use strict'\r\n\r\nexports.byteLength = byteLength\r\nexports.toByteArray = toByteArray\r\nexports.fromByteArray = fromByteArray\r\n\r\nvar lookup = []\r\nvar revLookup = []\r\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\r\n\r\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\nfor (var i = 0, len = code.length; i < len; ++i) {\r\n  lookup[i] = code[i]\r\n  revLookup[code.charCodeAt(i)] = i\r\n}\r\n\r\n// Support decoding URL-safe base64 strings, as Node.js does.\r\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\r\nrevLookup['-'.charCodeAt(0)] = 62\r\nrevLookup['_'.charCodeAt(0)] = 63\r\n\r\nfunction getLens (b64) {\r\n  var len = b64.length\r\n\r\n  if (len % 4 > 0) {\r\n    throw new Error('Invalid string. Length must be a multiple of 4')\r\n  }\r\n\r\n  // Trim off extra bytes after placeholder bytes are found\r\n  // See: https://github.com/beatgammit/base64-js/issues/42\r\n  var validLen = b64.indexOf('=')\r\n  if (validLen === -1) validLen = len\r\n\r\n  var placeHoldersLen = validLen === len\r\n    ? 0\r\n    : 4 - (validLen % 4)\r\n\r\n  return [validLen, placeHoldersLen]\r\n}\r\n\r\n// base64 is 4/3 + up to two characters of the original data\r\nfunction byteLength (b64) {\r\n  var lens = getLens(b64)\r\n  var validLen = lens[0]\r\n  var placeHoldersLen = lens[1]\r\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction _byteLength (b64, validLen, placeHoldersLen) {\r\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction toByteArray (b64) {\r\n  var tmp\r\n  var lens = getLens(b64)\r\n  var validLen = lens[0]\r\n  var placeHoldersLen = lens[1]\r\n\r\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\r\n\r\n  var curByte = 0\r\n\r\n  // if there are placeholders, only get up to the last complete 4 chars\r\n  var len = placeHoldersLen > 0\r\n    ? validLen - 4\r\n    : validLen\r\n\r\n  var i\r\n  for (i = 0; i < len; i += 4) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 18) |\r\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\r\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\r\n      revLookup[b64.charCodeAt(i + 3)]\r\n    arr[curByte++] = (tmp >> 16) & 0xFF\r\n    arr[curByte++] = (tmp >> 8) & 0xFF\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  if (placeHoldersLen === 2) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 2) |\r\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  if (placeHoldersLen === 1) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 10) |\r\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\r\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\r\n    arr[curByte++] = (tmp >> 8) & 0xFF\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nfunction tripletToBase64 (num) {\r\n  return lookup[num >> 18 & 0x3F] +\r\n    lookup[num >> 12 & 0x3F] +\r\n    lookup[num >> 6 & 0x3F] +\r\n    lookup[num & 0x3F]\r\n}\r\n\r\nfunction encodeChunk (uint8, start, end) {\r\n  var tmp\r\n  var output = []\r\n  for (var i = start; i < end; i += 3) {\r\n    tmp =\r\n      ((uint8[i] << 16) & 0xFF0000) +\r\n      ((uint8[i + 1] << 8) & 0xFF00) +\r\n      (uint8[i + 2] & 0xFF)\r\n    output.push(tripletToBase64(tmp))\r\n  }\r\n  return output.join('')\r\n}\r\n\r\nfunction fromByteArray (uint8) {\r\n  var tmp\r\n  var len = uint8.length\r\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\r\n  var parts = []\r\n  var maxChunkLength = 16383 // must be multiple of 3\r\n\r\n  // go through the array every three bytes, we'll deal with trailing stuff later\r\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\r\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\r\n  }\r\n\r\n  // pad the end with zeros, but make sure to not forget the extra bytes\r\n  if (extraBytes === 1) {\r\n    tmp = uint8[len - 1]\r\n    parts.push(\r\n      lookup[tmp >> 2] +\r\n      lookup[(tmp << 4) & 0x3F] +\r\n      '=='\r\n    )\r\n  } else if (extraBytes === 2) {\r\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\r\n    parts.push(\r\n      lookup[tmp >> 10] +\r\n      lookup[(tmp >> 4) & 0x3F] +\r\n      lookup[(tmp << 2) & 0x3F] +\r\n      '='\r\n    )\r\n  }\r\n\r\n  return parts.join('')\r\n}\r\n","\"use strict\";\r\n\r\n// Update this array if you add/rename/remove files in this directory.\r\n// We support Browserify by skipping automatic module discovery and requiring modules directly.\r\nvar modules = [\r\n    require(\"./internal\"),\r\n    require(\"./utf16\"),\r\n    require(\"./utf7\"),\r\n    require(\"./sbcs-codec\"),\r\n    require(\"./sbcs-data\"),\r\n    require(\"./sbcs-data-generated\"),\r\n    require(\"./dbcs-codec\"),\r\n    require(\"./dbcs-data\"),\r\n];\r\n\r\n// Put all encoding/alias/codec definitions to single object and export it. \r\nfor (var i = 0; i < modules.length; i++) {\r\n    var module = modules[i];\r\n    for (var enc in module)\r\n        if (Object.prototype.hasOwnProperty.call(module, enc))\r\n            exports[enc] = module[enc];\r\n}\r\n","\"use strict\";\r\nvar Buffer = require(\"safer-buffer\").Buffer;\r\n\r\n// Export Node.js internal encodings.\r\n\r\nmodule.exports = {\r\n    // Encodings\r\n    utf8:   { type: \"_internal\", bomAware: true},\r\n    cesu8:  { type: \"_internal\", bomAware: true},\r\n    unicode11utf8: \"utf8\",\r\n\r\n    ucs2:   { type: \"_internal\", bomAware: true},\r\n    utf16le: \"ucs2\",\r\n\r\n    binary: { type: \"_internal\" },\r\n    base64: { type: \"_internal\" },\r\n    hex:    { type: \"_internal\" },\r\n\r\n    // Codec.\r\n    _internal: InternalCodec,\r\n};\r\n\r\n//------------------------------------------------------------------------------\r\n\r\nfunction InternalCodec(codecOptions, iconv) {\r\n    this.enc = codecOptions.encodingName;\r\n    this.bomAware = codecOptions.bomAware;\r\n\r\n    if (this.enc === \"base64\")\r\n        this.encoder = InternalEncoderBase64;\r\n    else if (this.enc === \"cesu8\") {\r\n        this.enc = \"utf8\"; // Use utf8 for decoding.\r\n        this.encoder = InternalEncoderCesu8;\r\n\r\n        // Add decoder for versions of Node not supporting CESU-8\r\n        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {\r\n            this.decoder = InternalDecoderCesu8;\r\n            this.defaultCharUnicode = iconv.defaultCharUnicode;\r\n        }\r\n    }\r\n}\r\n\r\nInternalCodec.prototype.encoder = InternalEncoder;\r\nInternalCodec.prototype.decoder = InternalDecoder;\r\n\r\n//------------------------------------------------------------------------------\r\n\r\n// We use node.js internal decoder. Its signature is the same as ours.\r\nvar StringDecoder = require('string_decoder').StringDecoder;\r\n\r\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\r\n    StringDecoder.prototype.end = function() {};\r\n\r\n\r\nfunction InternalDecoder(options, codec) {\r\n    StringDecoder.call(this, codec.enc);\r\n}\r\n\r\nInternalDecoder.prototype = StringDecoder.prototype;\r\n\r\n\r\n//------------------------------------------------------------------------------\r\n// Encoder is mostly trivial\r\n\r\nfunction InternalEncoder(options, codec) {\r\n    this.enc = codec.enc;\r\n}\r\n\r\nInternalEncoder.prototype.write = function(str) {\r\n    return Buffer.from(str, this.enc);\r\n}\r\n\r\nInternalEncoder.prototype.end = function() {\r\n}\r\n\r\n\r\n//------------------------------------------------------------------------------\r\n// Except base64 encoder, which must keep its state.\r\n\r\nfunction InternalEncoderBase64(options, codec) {\r\n    this.prevStr = '';\r\n}\r\n\r\nInternalEncoderBase64.prototype.write = function(str) {\r\n    str = this.prevStr + str;\r\n    var completeQuads = str.length - (str.length % 4);\r\n    this.prevStr = str.slice(completeQuads);\r\n    str = str.slice(0, completeQuads);\r\n\r\n    return Buffer.from(str, \"base64\");\r\n}\r\n\r\nInternalEncoderBase64.prototype.end = function() {\r\n    return Buffer.from(this.prevStr, \"base64\");\r\n}\r\n\r\n\r\n//------------------------------------------------------------------------------\r\n// CESU-8 encoder is also special.\r\n\r\nfunction InternalEncoderCesu8(options, codec) {\r\n}\r\n\r\nInternalEncoderCesu8.prototype.write = function(str) {\r\n    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var charCode = str.charCodeAt(i);\r\n        // Naive implementation, but it works because CESU-8 is especially easy\r\n        // to convert from UTF-16 (which all JS strings are encoded in).\r\n        if (charCode < 0x80)\r\n            buf[bufIdx++] = charCode;\r\n        else if (charCode < 0x800) {\r\n            buf[bufIdx++] = 0xC0 + (charCode >>> 6);\r\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\r\n        }\r\n        else { // charCode will always be < 0x10000 in javascript.\r\n            buf[bufIdx++] = 0xE0 + (charCode >>> 12);\r\n            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);\r\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\r\n        }\r\n    }\r\n    return buf.slice(0, bufIdx);\r\n}\r\n\r\nInternalEncoderCesu8.prototype.end = function() {\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n// CESU-8 decoder is not implemented in Node v4.0+\r\n\r\nfunction InternalDecoderCesu8(options, codec) {\r\n    this.acc = 0;\r\n    this.contBytes = 0;\r\n    this.accBytes = 0;\r\n    this.defaultCharUnicode = codec.defaultCharUnicode;\r\n}\r\n\r\nInternalDecoderCesu8.prototype.write = function(buf) {\r\n    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, \r\n        res = '';\r\n    for (var i = 0; i < buf.length; i++) {\r\n        var curByte = buf[i];\r\n        if ((curByte & 0xC0) !== 0x80) { // Leading byte\r\n            if (contBytes > 0) { // Previous code is invalid\r\n                res += this.defaultCharUnicode;\r\n                contBytes = 0;\r\n            }\r\n\r\n            if (curByte < 0x80) { // Single-byte code\r\n                res += String.fromCharCode(curByte);\r\n            } else if (curByte < 0xE0) { // Two-byte code\r\n                acc = curByte & 0x1F;\r\n                contBytes = 1; accBytes = 1;\r\n            } else if (curByte < 0xF0) { // Three-byte code\r\n                acc = curByte & 0x0F;\r\n                contBytes = 2; accBytes = 1;\r\n            } else { // Four or more are not supported for CESU-8.\r\n                res += this.defaultCharUnicode;\r\n            }\r\n        } else { // Continuation byte\r\n            if (contBytes > 0) { // We're waiting for it.\r\n                acc = (acc << 6) | (curByte & 0x3f);\r\n                contBytes--; accBytes++;\r\n                if (contBytes === 0) {\r\n                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\r\n                    if (accBytes === 2 && acc < 0x80 && acc > 0)\r\n                        res += this.defaultCharUnicode;\r\n                    else if (accBytes === 3 && acc < 0x800)\r\n                        res += this.defaultCharUnicode;\r\n                    else\r\n                        // Actually add character.\r\n                        res += String.fromCharCode(acc);\r\n                }\r\n            } else { // Unexpected continuation byte\r\n                res += this.defaultCharUnicode;\r\n            }\r\n        }\r\n    }\r\n    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;\r\n    return res;\r\n}\r\n\r\nInternalDecoderCesu8.prototype.end = function() {\r\n    var res = 0;\r\n    if (this.contBytes > 0)\r\n        res += this.defaultCharUnicode;\r\n    return res;\r\n}\r\n","\"use strict\";\r\nvar Buffer = require(\"safer-buffer\").Buffer;\r\n\r\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\r\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\r\n\r\nexports.utf7 = Utf7Codec;\r\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\r\nfunction Utf7Codec(codecOptions, iconv) {\r\n    this.iconv = iconv;\r\n};\r\n\r\nUtf7Codec.prototype.encoder = Utf7Encoder;\r\nUtf7Codec.prototype.decoder = Utf7Decoder;\r\nUtf7Codec.prototype.bomAware = true;\r\n\r\n\r\n// -- Encoding\r\n\r\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\r\n\r\nfunction Utf7Encoder(options, codec) {\r\n    this.iconv = codec.iconv;\r\n}\r\n\r\nUtf7Encoder.prototype.write = function(str) {\r\n    // Naive implementation.\r\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\r\n    return Buffer.from(str.replace(nonDirectChars, function(chunk) {\r\n        return \"+\" + (chunk === '+' ? '' : \r\n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \r\n            + \"-\";\r\n    }.bind(this)));\r\n}\r\n\r\nUtf7Encoder.prototype.end = function() {\r\n}\r\n\r\n\r\n// -- Decoding\r\n\r\nfunction Utf7Decoder(options, codec) {\r\n    this.iconv = codec.iconv;\r\n    this.inBase64 = false;\r\n    this.base64Accum = '';\r\n}\r\n\r\nvar base64Regex = /[A-Za-z0-9\\/+]/;\r\nvar base64Chars = [];\r\nfor (var i = 0; i < 256; i++)\r\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\r\n\r\nvar plusChar = '+'.charCodeAt(0), \r\n    minusChar = '-'.charCodeAt(0),\r\n    andChar = '&'.charCodeAt(0);\r\n\r\nUtf7Decoder.prototype.write = function(buf) {\r\n    var res = \"\", lastI = 0,\r\n        inBase64 = this.inBase64,\r\n        base64Accum = this.base64Accum;\r\n\r\n    // The decoder is more involved as we must handle chunks in stream.\r\n\r\n    for (var i = 0; i < buf.length; i++) {\r\n        if (!inBase64) { // We're in direct mode.\r\n            // Write direct chars until '+'\r\n            if (buf[i] == plusChar) {\r\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\r\n                lastI = i+1;\r\n                inBase64 = true;\r\n            }\r\n        } else { // We decode base64.\r\n            if (!base64Chars[buf[i]]) { // Base64 ended.\r\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\r\n                    res += \"+\";\r\n                } else {\r\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\r\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\r\n                }\r\n\r\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\r\n                    i--;\r\n\r\n                lastI = i+1;\r\n                inBase64 = false;\r\n                base64Accum = '';\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!inBase64) {\r\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\r\n    } else {\r\n        var b64str = base64Accum + buf.slice(lastI).toString();\r\n\r\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\r\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\r\n        b64str = b64str.slice(0, canBeDecoded);\r\n\r\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\r\n    }\r\n\r\n    this.inBase64 = inBase64;\r\n    this.base64Accum = base64Accum;\r\n\r\n    return res;\r\n}\r\n\r\nUtf7Decoder.prototype.end = function() {\r\n    var res = \"\";\r\n    if (this.inBase64 && this.base64Accum.length > 0)\r\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\r\n\r\n    this.inBase64 = false;\r\n    this.base64Accum = '';\r\n    return res;\r\n}\r\n\r\n\r\n// UTF-7-IMAP codec.\r\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\r\n// Differences:\r\n//  * Base64 part is started by \"&\" instead of \"+\"\r\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\r\n//  * In Base64, \",\" is used instead of \"/\"\r\n//  * Base64 must not be used to represent direct characters.\r\n//  * No implicit shift back from Base64 (should always end with '-')\r\n//  * String must end in non-shifted position.\r\n//  * \"-&\" while in base64 is not allowed.\r\n\r\n\r\nexports.utf7imap = Utf7IMAPCodec;\r\nfunction Utf7IMAPCodec(codecOptions, iconv) {\r\n    this.iconv = iconv;\r\n};\r\n\r\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\r\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\r\nUtf7IMAPCodec.prototype.bomAware = true;\r\n\r\n\r\n// -- Encoding\r\n\r\nfunction Utf7IMAPEncoder(options, codec) {\r\n    this.iconv = codec.iconv;\r\n    this.inBase64 = false;\r\n    this.base64Accum = Buffer.alloc(6);\r\n    this.base64AccumIdx = 0;\r\n}\r\n\r\nUtf7IMAPEncoder.prototype.write = function(str) {\r\n    var inBase64 = this.inBase64,\r\n        base64Accum = this.base64Accum,\r\n        base64AccumIdx = this.base64AccumIdx,\r\n        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;\r\n\r\n    for (var i = 0; i < str.length; i++) {\r\n        var uChar = str.charCodeAt(i);\r\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\r\n            if (inBase64) {\r\n                if (base64AccumIdx > 0) {\r\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\r\n                    base64AccumIdx = 0;\r\n                }\r\n\r\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\r\n                inBase64 = false;\r\n            }\r\n\r\n            if (!inBase64) {\r\n                buf[bufIdx++] = uChar; // Write direct character\r\n\r\n                if (uChar === andChar)  // Ampersand -> '&-'\r\n                    buf[bufIdx++] = minusChar;\r\n            }\r\n\r\n        } else { // Non-direct character\r\n            if (!inBase64) {\r\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\r\n                inBase64 = true;\r\n            }\r\n            if (inBase64) {\r\n                base64Accum[base64AccumIdx++] = uChar >> 8;\r\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\r\n\r\n                if (base64AccumIdx == base64Accum.length) {\r\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\r\n                    base64AccumIdx = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    this.inBase64 = inBase64;\r\n    this.base64AccumIdx = base64AccumIdx;\r\n\r\n    return buf.slice(0, bufIdx);\r\n}\r\n\r\nUtf7IMAPEncoder.prototype.end = function() {\r\n    var buf = Buffer.alloc(10), bufIdx = 0;\r\n    if (this.inBase64) {\r\n        if (this.base64AccumIdx > 0) {\r\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\r\n            this.base64AccumIdx = 0;\r\n        }\r\n\r\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\r\n        this.inBase64 = false;\r\n    }\r\n\r\n    return buf.slice(0, bufIdx);\r\n}\r\n\r\n\r\n// -- Decoding\r\n\r\nfunction Utf7IMAPDecoder(options, codec) {\r\n    this.iconv = codec.iconv;\r\n    this.inBase64 = false;\r\n    this.base64Accum = '';\r\n}\r\n\r\nvar base64IMAPChars = base64Chars.slice();\r\nbase64IMAPChars[','.charCodeAt(0)] = true;\r\n\r\nUtf7IMAPDecoder.prototype.write = function(buf) {\r\n    var res = \"\", lastI = 0,\r\n        inBase64 = this.inBase64,\r\n        base64Accum = this.base64Accum;\r\n\r\n    // The decoder is more involved as we must handle chunks in stream.\r\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\r\n\r\n    for (var i = 0; i < buf.length; i++) {\r\n        if (!inBase64) { // We're in direct mode.\r\n            // Write direct chars until '&'\r\n            if (buf[i] == andChar) {\r\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\r\n                lastI = i+1;\r\n                inBase64 = true;\r\n            }\r\n        } else { // We decode base64.\r\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\r\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\r\n                    res += \"&\";\r\n                } else {\r\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\r\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\r\n                }\r\n\r\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\r\n                    i--;\r\n\r\n                lastI = i+1;\r\n                inBase64 = false;\r\n                base64Accum = '';\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!inBase64) {\r\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\r\n    } else {\r\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\r\n\r\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\r\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\r\n        b64str = b64str.slice(0, canBeDecoded);\r\n\r\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\r\n    }\r\n\r\n    this.inBase64 = inBase64;\r\n    this.base64Accum = base64Accum;\r\n\r\n    return res;\r\n}\r\n\r\nUtf7IMAPDecoder.prototype.end = function() {\r\n    var res = \"\";\r\n    if (this.inBase64 && this.base64Accum.length > 0)\r\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\r\n\r\n    this.inBase64 = false;\r\n    this.base64Accum = '';\r\n    return res;\r\n}\r\n\r\n\r\n","/**\r\n * Use the ImageData from a Canvas and turn the image in a 1-bit black and white image using dithering\r\n */\r\nclass CanvasDither {\r\n  /**\r\n     * Change the image to grayscale\r\n     *\r\n     * @param  {object}   image         The imageData of a Canvas 2d context\r\n     * @return {object}                 The resulting imageData\r\n     *\r\n     */\r\n  grayscale(image) {\r\n    for (let i = 0; i < image.data.length; i += 4) {\r\n      const luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\r\n      image.data.fill(luminance, i, i + 3);\r\n    }\r\n\r\n    return image;\r\n  }\r\n\r\n  /**\r\n     * Change the image to blank and white using a simple threshold\r\n     *\r\n     * @param  {object}   image         The imageData of a Canvas 2d context\r\n     * @param  {number}   threshold     Threshold value (0-255)\r\n     * @return {object}                 The resulting imageData\r\n     *\r\n     */\r\n  threshold(image, threshold) {\r\n    for (let i = 0; i < image.data.length; i += 4) {\r\n      const luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\r\n\r\n      const value = luminance < threshold ? 0 : 255;\r\n      image.data.fill(value, i, i + 3);\r\n    }\r\n\r\n    return image;\r\n  }\r\n\r\n  /**\r\n     * Change the image to blank and white using the Bayer algorithm\r\n     *\r\n     * @param  {object}   image         The imageData of a Canvas 2d context\r\n     * @param  {number}   threshold     Threshold value (0-255)\r\n     * @return {object}                 The resulting imageData\r\n     *\r\n     */\r\n  bayer(image, threshold) {\r\n    const thresholdMap = [\r\n      [15, 135, 45, 165],\r\n      [195, 75, 225, 105],\r\n      [60, 180, 30, 150],\r\n      [240, 120, 210, 90],\r\n    ];\r\n\r\n    for (let i = 0; i < image.data.length; i += 4) {\r\n      const luminance = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\r\n\r\n      const x = i / 4 % image.width;\r\n      const y = Math.floor(i / 4 / image.width);\r\n      const map = Math.floor((luminance + thresholdMap[x % 4][y % 4]) / 2);\r\n      const value = map < threshold ? 0 : 255;\r\n      image.data.fill(value, i, i + 3);\r\n    }\r\n\r\n    return image;\r\n  }\r\n\r\n  /**\r\n     * Change the image to blank and white using the Floyd-Steinberg algorithm\r\n     *\r\n     * @param  {object}   image         The imageData of a Canvas 2d context\r\n     * @return {object}                 The resulting imageData\r\n     *\r\n     */\r\n  floydsteinberg(image) {\r\n    const width = image.width;\r\n    const luminance = new Uint8ClampedArray(image.width * image.height);\r\n\r\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\r\n      luminance[l] = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\r\n    }\r\n\r\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\r\n      const value = luminance[l] < 129 ? 0 : 255;\r\n      const error = Math.floor((luminance[l] - value) / 16);\r\n      image.data.fill(value, i, i + 3);\r\n\r\n      luminance[l + 1] += error * 7;\r\n      luminance[l + width - 1] += error * 3;\r\n      luminance[l + width] += error * 5;\r\n      luminance[l + width + 1] += error * 1;\r\n    }\r\n\r\n    return image;\r\n  }\r\n\r\n  /**\r\n     * Change the image to blank and white using the Atkinson algorithm\r\n     *\r\n     * @param  {object}   image         The imageData of a Canvas 2d context\r\n     * @return {object}                 The resulting imageData\r\n     *\r\n     */\r\n  atkinson(image) {\r\n    const width = image.width;\r\n    const luminance = new Uint8ClampedArray(image.width * image.height);\r\n\r\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\r\n      luminance[l] = (image.data[i] * 0.299) + (image.data[i + 1] * 0.587) + (image.data[i + 2] * 0.114);\r\n    }\r\n\r\n    for (let l = 0, i = 0; i < image.data.length; l++, i += 4) {\r\n      const value = luminance[l] < 129 ? 0 : 255;\r\n      const error = Math.floor((luminance[l] - value) / 8);\r\n      image.data.fill(value, i, i + 3);\r\n\r\n      luminance[l + 1] += error;\r\n      luminance[l + 2] += error;\r\n      luminance[l + width - 1] += error;\r\n      luminance[l + width] += error;\r\n      luminance[l + width + 1] += error;\r\n      luminance[l + 2 * width] += error;\r\n    }\r\n\r\n    return image;\r\n  }\r\n}\r\n\r\nmodule.exports = new CanvasDither();\r\n","\"use strict\";\r\n\r\n// Manually added data to be used by sbcs codec in addition to generated one.\r\n\r\nmodule.exports = {\r\n    // Not supported by iconv, not sure why.\r\n    \"10029\": \"maccenteuro\",\r\n    \"maccenteuro\": {\r\n        \"type\": \"_sbcs\",\r\n        \"chars\": \"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\"\r\n    },\r\n\r\n    \"808\": \"cp808\",\r\n    \"ibm808\": \"cp808\",\r\n    \"cp808\": {\r\n        \"type\": \"_sbcs\",\r\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ \"\r\n    },\r\n\r\n    \"mik\": {\r\n        \"type\": \"_sbcs\",\r\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\r\n    },\r\n\r\n    // Aliases of generated encodings.\r\n    \"ascii8bit\": \"ascii\",\r\n    \"usascii\": \"ascii\",\r\n    \"ansix34\": \"ascii\",\r\n    \"ansix341968\": \"ascii\",\r\n    \"ansix341986\": \"ascii\",\r\n    \"csascii\": \"ascii\",\r\n    \"cp367\": \"ascii\",\r\n    \"ibm367\": \"ascii\",\r\n    \"isoir6\": \"ascii\",\r\n    \"iso646us\": \"ascii\",\r\n    \"iso646irv\": \"ascii\",\r\n    \"us\": \"ascii\",\r\n\r\n    \"latin1\": \"iso88591\",\r\n    \"latin2\": \"iso88592\",\r\n    \"latin3\": \"iso88593\",\r\n    \"latin4\": \"iso88594\",\r\n    \"latin5\": \"iso88599\",\r\n    \"latin6\": \"iso885910\",\r\n    \"latin7\": \"iso885913\",\r\n    \"latin8\": \"iso885914\",\r\n    \"latin9\": \"iso885915\",\r\n    \"latin10\": \"iso885916\",\r\n\r\n    \"csisolatin1\": \"iso88591\",\r\n    \"csisolatin2\": \"iso88592\",\r\n    \"csisolatin3\": \"iso88593\",\r\n    \"csisolatin4\": \"iso88594\",\r\n    \"csisolatincyrillic\": \"iso88595\",\r\n    \"csisolatinarabic\": \"iso88596\",\r\n    \"csisolatingreek\" : \"iso88597\",\r\n    \"csisolatinhebrew\": \"iso88598\",\r\n    \"csisolatin5\": \"iso88599\",\r\n    \"csisolatin6\": \"iso885910\",\r\n\r\n    \"l1\": \"iso88591\",\r\n    \"l2\": \"iso88592\",\r\n    \"l3\": \"iso88593\",\r\n    \"l4\": \"iso88594\",\r\n    \"l5\": \"iso88599\",\r\n    \"l6\": \"iso885910\",\r\n    \"l7\": \"iso885913\",\r\n    \"l8\": \"iso885914\",\r\n    \"l9\": \"iso885915\",\r\n    \"l10\": \"iso885916\",\r\n\r\n    \"isoir14\": \"iso646jp\",\r\n    \"isoir57\": \"iso646cn\",\r\n    \"isoir100\": \"iso88591\",\r\n    \"isoir101\": \"iso88592\",\r\n    \"isoir109\": \"iso88593\",\r\n    \"isoir110\": \"iso88594\",\r\n    \"isoir144\": \"iso88595\",\r\n    \"isoir127\": \"iso88596\",\r\n    \"isoir126\": \"iso88597\",\r\n    \"isoir138\": \"iso88598\",\r\n    \"isoir148\": \"iso88599\",\r\n    \"isoir157\": \"iso885910\",\r\n    \"isoir166\": \"tis620\",\r\n    \"isoir179\": \"iso885913\",\r\n    \"isoir199\": \"iso885914\",\r\n    \"isoir203\": \"iso885915\",\r\n    \"isoir226\": \"iso885916\",\r\n\r\n    \"cp819\": \"iso88591\",\r\n    \"ibm819\": \"iso88591\",\r\n\r\n    \"cyrillic\": \"iso88595\",\r\n\r\n    \"arabic\": \"iso88596\",\r\n    \"arabic8\": \"iso88596\",\r\n    \"ecma114\": \"iso88596\",\r\n    \"asmo708\": \"iso88596\",\r\n\r\n    \"greek\" : \"iso88597\",\r\n    \"greek8\" : \"iso88597\",\r\n    \"ecma118\" : \"iso88597\",\r\n    \"elot928\" : \"iso88597\",\r\n\r\n    \"hebrew\": \"iso88598\",\r\n    \"hebrew8\": \"iso88598\",\r\n\r\n    \"turkish\": \"iso88599\",\r\n    \"turkish8\": \"iso88599\",\r\n\r\n    \"thai\": \"iso885911\",\r\n    \"thai8\": \"iso885911\",\r\n\r\n    \"celtic\": \"iso885914\",\r\n    \"celtic8\": \"iso885914\",\r\n    \"isoceltic\": \"iso885914\",\r\n\r\n    \"tis6200\": \"tis620\",\r\n    \"tis62025291\": \"tis620\",\r\n    \"tis62025330\": \"tis620\",\r\n\r\n    \"10000\": \"macroman\",\r\n    \"10006\": \"macgreek\",\r\n    \"10007\": \"maccyrillic\",\r\n    \"10079\": \"maciceland\",\r\n    \"10081\": \"macturkish\",\r\n\r\n    \"cspc8codepage437\": \"cp437\",\r\n    \"cspc775baltic\": \"cp775\",\r\n    \"cspc850multilingual\": \"cp850\",\r\n    \"cspcp852\": \"cp852\",\r\n    \"cspc862latinhebrew\": \"cp862\",\r\n    \"cpgr\": \"cp869\",\r\n\r\n    \"msee\": \"cp1250\",\r\n    \"mscyrl\": \"cp1251\",\r\n    \"msansi\": \"cp1252\",\r\n    \"msgreek\": \"cp1253\",\r\n    \"msturk\": \"cp1254\",\r\n    \"mshebr\": \"cp1255\",\r\n    \"msarab\": \"cp1256\",\r\n    \"winbaltrim\": \"cp1257\",\r\n\r\n    \"cp20866\": \"koi8r\",\r\n    \"20866\": \"koi8r\",\r\n    \"ibm878\": \"koi8r\",\r\n    \"cskoi8r\": \"koi8r\",\r\n\r\n    \"cp21866\": \"koi8u\",\r\n    \"21866\": \"koi8u\",\r\n    \"ibm1168\": \"koi8u\",\r\n\r\n    \"strk10482002\": \"rk1048\",\r\n\r\n    \"tcvn5712\": \"tcvn\",\r\n    \"tcvn57121\": \"tcvn\",\r\n\r\n    \"gb198880\": \"iso646cn\",\r\n    \"cn\": \"iso646cn\",\r\n\r\n    \"csiso14jisc6220ro\": \"iso646jp\",\r\n    \"jisc62201969ro\": \"iso646jp\",\r\n    \"jp\": \"iso646jp\",\r\n\r\n    \"cshproman8\": \"hproman8\",\r\n    \"r8\": \"hproman8\",\r\n    \"roman8\": \"hproman8\",\r\n    \"xroman8\": \"hproman8\",\r\n    \"ibm1051\": \"hproman8\",\r\n\r\n    \"mac\": \"macintosh\",\r\n    \"csmacintosh\": \"macintosh\",\r\n};\r\n\r\n","// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\n/*<replacement>*/\r\n\r\nvar Buffer = require('safe-buffer').Buffer;\r\n/*</replacement>*/\r\n\r\nvar isEncoding = Buffer.isEncoding || function (encoding) {\r\n  encoding = '' + encoding;\r\n  switch (encoding && encoding.toLowerCase()) {\r\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\nfunction _normalizeEncoding(enc) {\r\n  if (!enc) return 'utf8';\r\n  var retried;\r\n  while (true) {\r\n    switch (enc) {\r\n      case 'utf8':\r\n      case 'utf-8':\r\n        return 'utf8';\r\n      case 'ucs2':\r\n      case 'ucs-2':\r\n      case 'utf16le':\r\n      case 'utf-16le':\r\n        return 'utf16le';\r\n      case 'latin1':\r\n      case 'binary':\r\n        return 'latin1';\r\n      case 'base64':\r\n      case 'ascii':\r\n      case 'hex':\r\n        return enc;\r\n      default:\r\n        if (retried) return; // undefined\r\n        enc = ('' + enc).toLowerCase();\r\n        retried = true;\r\n    }\r\n  }\r\n};\r\n\r\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\r\n// modules monkey-patch it to support additional encodings\r\nfunction normalizeEncoding(enc) {\r\n  var nenc = _normalizeEncoding(enc);\r\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\r\n  return nenc || enc;\r\n}\r\n\r\n// StringDecoder provides an interface for efficiently splitting a series of\r\n// buffers into a series of JS strings without breaking apart multi-byte\r\n// characters.\r\nexports.StringDecoder = StringDecoder;\r\nfunction StringDecoder(encoding) {\r\n  this.encoding = normalizeEncoding(encoding);\r\n  var nb;\r\n  switch (this.encoding) {\r\n    case 'utf16le':\r\n      this.text = utf16Text;\r\n      this.end = utf16End;\r\n      nb = 4;\r\n      break;\r\n    case 'utf8':\r\n      this.fillLast = utf8FillLast;\r\n      nb = 4;\r\n      break;\r\n    case 'base64':\r\n      this.text = base64Text;\r\n      this.end = base64End;\r\n      nb = 3;\r\n      break;\r\n    default:\r\n      this.write = simpleWrite;\r\n      this.end = simpleEnd;\r\n      return;\r\n  }\r\n  this.lastNeed = 0;\r\n  this.lastTotal = 0;\r\n  this.lastChar = Buffer.allocUnsafe(nb);\r\n}\r\n\r\nStringDecoder.prototype.write = function (buf) {\r\n  if (buf.length === 0) return '';\r\n  var r;\r\n  var i;\r\n  if (this.lastNeed) {\r\n    r = this.fillLast(buf);\r\n    if (r === undefined) return '';\r\n    i = this.lastNeed;\r\n    this.lastNeed = 0;\r\n  } else {\r\n    i = 0;\r\n  }\r\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\r\n  return r || '';\r\n};\r\n\r\nStringDecoder.prototype.end = utf8End;\r\n\r\n// Returns only complete characters in a Buffer\r\nStringDecoder.prototype.text = utf8Text;\r\n\r\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\r\nStringDecoder.prototype.fillLast = function (buf) {\r\n  if (this.lastNeed <= buf.length) {\r\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\r\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\r\n  }\r\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\r\n  this.lastNeed -= buf.length;\r\n};\r\n\r\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\r\n// continuation byte. If an invalid byte is detected, -2 is returned.\r\nfunction utf8CheckByte(byte) {\r\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\r\n  return byte >> 6 === 0x02 ? -1 : -2;\r\n}\r\n\r\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\r\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\r\n// needed to complete the UTF-8 character (if applicable) are returned.\r\nfunction utf8CheckIncomplete(self, buf, i) {\r\n  var j = buf.length - 1;\r\n  if (j < i) return 0;\r\n  var nb = utf8CheckByte(buf[j]);\r\n  if (nb >= 0) {\r\n    if (nb > 0) self.lastNeed = nb - 1;\r\n    return nb;\r\n  }\r\n  if (--j < i || nb === -2) return 0;\r\n  nb = utf8CheckByte(buf[j]);\r\n  if (nb >= 0) {\r\n    if (nb > 0) self.lastNeed = nb - 2;\r\n    return nb;\r\n  }\r\n  if (--j < i || nb === -2) return 0;\r\n  nb = utf8CheckByte(buf[j]);\r\n  if (nb >= 0) {\r\n    if (nb > 0) {\r\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\r\n    }\r\n    return nb;\r\n  }\r\n  return 0;\r\n}\r\n\r\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\r\n// needed or are available. If we see a non-continuation byte where we expect\r\n// one, we \"replace\" the validated continuation bytes we've seen so far with\r\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\r\n// behavior. The continuation byte check is included three times in the case\r\n// where all of the continuation bytes for a character exist in the same buffer.\r\n// It is also done this way as a slight performance increase instead of using a\r\n// loop.\r\nfunction utf8CheckExtraBytes(self, buf, p) {\r\n  if ((buf[0] & 0xC0) !== 0x80) {\r\n    self.lastNeed = 0;\r\n    return '\\ufffd';\r\n  }\r\n  if (self.lastNeed > 1 && buf.length > 1) {\r\n    if ((buf[1] & 0xC0) !== 0x80) {\r\n      self.lastNeed = 1;\r\n      return '\\ufffd';\r\n    }\r\n    if (self.lastNeed > 2 && buf.length > 2) {\r\n      if ((buf[2] & 0xC0) !== 0x80) {\r\n        self.lastNeed = 2;\r\n        return '\\ufffd';\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\r\nfunction utf8FillLast(buf) {\r\n  var p = this.lastTotal - this.lastNeed;\r\n  var r = utf8CheckExtraBytes(this, buf, p);\r\n  if (r !== undefined) return r;\r\n  if (this.lastNeed <= buf.length) {\r\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\r\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\r\n  }\r\n  buf.copy(this.lastChar, p, 0, buf.length);\r\n  this.lastNeed -= buf.length;\r\n}\r\n\r\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\r\n// partial character, the character's bytes are buffered until the required\r\n// number of bytes are available.\r\nfunction utf8Text(buf, i) {\r\n  var total = utf8CheckIncomplete(this, buf, i);\r\n  if (!this.lastNeed) return buf.toString('utf8', i);\r\n  this.lastTotal = total;\r\n  var end = buf.length - (total - this.lastNeed);\r\n  buf.copy(this.lastChar, 0, end);\r\n  return buf.toString('utf8', i, end);\r\n}\r\n\r\n// For UTF-8, a replacement character is added when ending on a partial\r\n// character.\r\nfunction utf8End(buf) {\r\n  var r = buf && buf.length ? this.write(buf) : '';\r\n  if (this.lastNeed) return r + '\\ufffd';\r\n  return r;\r\n}\r\n\r\n// UTF-16LE typically needs two bytes per character, but even if we have an even\r\n// number of bytes available, we need to check if we end on a leading/high\r\n// surrogate. In that case, we need to wait for the next two bytes in order to\r\n// decode the last character properly.\r\nfunction utf16Text(buf, i) {\r\n  if ((buf.length - i) % 2 === 0) {\r\n    var r = buf.toString('utf16le', i);\r\n    if (r) {\r\n      var c = r.charCodeAt(r.length - 1);\r\n      if (c >= 0xD800 && c <= 0xDBFF) {\r\n        this.lastNeed = 2;\r\n        this.lastTotal = 4;\r\n        this.lastChar[0] = buf[buf.length - 2];\r\n        this.lastChar[1] = buf[buf.length - 1];\r\n        return r.slice(0, -1);\r\n      }\r\n    }\r\n    return r;\r\n  }\r\n  this.lastNeed = 1;\r\n  this.lastTotal = 2;\r\n  this.lastChar[0] = buf[buf.length - 1];\r\n  return buf.toString('utf16le', i, buf.length - 1);\r\n}\r\n\r\n// For UTF-16LE we do not explicitly append special replacement characters if we\r\n// end on a partial character, we simply let v8 handle that.\r\nfunction utf16End(buf) {\r\n  var r = buf && buf.length ? this.write(buf) : '';\r\n  if (this.lastNeed) {\r\n    var end = this.lastTotal - this.lastNeed;\r\n    return r + this.lastChar.toString('utf16le', 0, end);\r\n  }\r\n  return r;\r\n}\r\n\r\nfunction base64Text(buf, i) {\r\n  var n = (buf.length - i) % 3;\r\n  if (n === 0) return buf.toString('base64', i);\r\n  this.lastNeed = 3 - n;\r\n  this.lastTotal = 3;\r\n  if (n === 1) {\r\n    this.lastChar[0] = buf[buf.length - 1];\r\n  } else {\r\n    this.lastChar[0] = buf[buf.length - 2];\r\n    this.lastChar[1] = buf[buf.length - 1];\r\n  }\r\n  return buf.toString('base64', i, buf.length - n);\r\n}\r\n\r\nfunction base64End(buf) {\r\n  var r = buf && buf.length ? this.write(buf) : '';\r\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\r\n  return r;\r\n}\r\n\r\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\r\nfunction simpleWrite(buf) {\r\n  return buf.toString(this.encoding);\r\n}\r\n\r\nfunction simpleEnd(buf) {\r\n  return buf && buf.length ? this.write(buf) : '';\r\n}","\"use strict\";\r\nvar Buffer = require(\"safer-buffer\").Buffer;\r\n\r\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\r\n\r\n// == UTF16-BE codec. ==========================================================\r\n\r\nexports.utf16be = Utf16BECodec;\r\nfunction Utf16BECodec() {\r\n}\r\n\r\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\r\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\r\nUtf16BECodec.prototype.bomAware = true;\r\n\r\n\r\n// -- Encoding\r\n\r\nfunction Utf16BEEncoder() {\r\n}\r\n\r\nUtf16BEEncoder.prototype.write = function(str) {\r\n    var buf = Buffer.from(str, 'ucs2');\r\n    for (var i = 0; i < buf.length; i += 2) {\r\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\r\n    }\r\n    return buf;\r\n}\r\n\r\nUtf16BEEncoder.prototype.end = function() {\r\n}\r\n\r\n\r\n// -- Decoding\r\n\r\nfunction Utf16BEDecoder() {\r\n    this.overflowByte = -1;\r\n}\r\n\r\nUtf16BEDecoder.prototype.write = function(buf) {\r\n    if (buf.length == 0)\r\n        return '';\r\n\r\n    var buf2 = Buffer.alloc(buf.length + 1),\r\n        i = 0, j = 0;\r\n\r\n    if (this.overflowByte !== -1) {\r\n        buf2[0] = buf[0];\r\n        buf2[1] = this.overflowByte;\r\n        i = 1; j = 2;\r\n    }\r\n\r\n    for (; i < buf.length-1; i += 2, j+= 2) {\r\n        buf2[j] = buf[i+1];\r\n        buf2[j+1] = buf[i];\r\n    }\r\n\r\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\r\n\r\n    return buf2.slice(0, j).toString('ucs2');\r\n}\r\n\r\nUtf16BEDecoder.prototype.end = function() {\r\n}\r\n\r\n\r\n// == UTF-16 codec =============================================================\r\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\r\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\r\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\r\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\r\n\r\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\r\n\r\nexports.utf16 = Utf16Codec;\r\nfunction Utf16Codec(codecOptions, iconv) {\r\n    this.iconv = iconv;\r\n}\r\n\r\nUtf16Codec.prototype.encoder = Utf16Encoder;\r\nUtf16Codec.prototype.decoder = Utf16Decoder;\r\n\r\n\r\n// -- Encoding (pass-through)\r\n\r\nfunction Utf16Encoder(options, codec) {\r\n    options = options || {};\r\n    if (options.addBOM === undefined)\r\n        options.addBOM = true;\r\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\r\n}\r\n\r\nUtf16Encoder.prototype.write = function(str) {\r\n    return this.encoder.write(str);\r\n}\r\n\r\nUtf16Encoder.prototype.end = function() {\r\n    return this.encoder.end();\r\n}\r\n\r\n\r\n// -- Decoding\r\n\r\nfunction Utf16Decoder(options, codec) {\r\n    this.decoder = null;\r\n    this.initialBytes = [];\r\n    this.initialBytesLen = 0;\r\n\r\n    this.options = options || {};\r\n    this.iconv = codec.iconv;\r\n}\r\n\r\nUtf16Decoder.prototype.write = function(buf) {\r\n    if (!this.decoder) {\r\n        // Codec is not chosen yet. Accumulate initial bytes.\r\n        this.initialBytes.push(buf);\r\n        this.initialBytesLen += buf.length;\r\n        \r\n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\r\n            return '';\r\n\r\n        // We have enough bytes -> detect endianness.\r\n        var buf = Buffer.concat(this.initialBytes),\r\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\r\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\r\n        this.initialBytes.length = this.initialBytesLen = 0;\r\n    }\r\n\r\n    return this.decoder.write(buf);\r\n}\r\n\r\nUtf16Decoder.prototype.end = function() {\r\n    if (!this.decoder) {\r\n        var buf = Buffer.concat(this.initialBytes),\r\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\r\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\r\n\r\n        var res = this.decoder.write(buf),\r\n            trail = this.decoder.end();\r\n\r\n        return trail ? (res + trail) : res;\r\n    }\r\n    return this.decoder.end();\r\n}\r\n\r\nfunction detectEncoding(buf, defaultEncoding) {\r\n    var enc = defaultEncoding || 'utf-16le';\r\n\r\n    if (buf.length >= 2) {\r\n        // Check BOM.\r\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\r\n            enc = 'utf-16be';\r\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\r\n            enc = 'utf-16le';\r\n        else {\r\n            // No BOM found. Try to deduce encoding from initial content.\r\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\r\n            // So, we count ASCII as if it was LE or BE, and decide from that.\r\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\r\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\r\n\r\n            for (var i = 0; i < _len; i += 2) {\r\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\r\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\r\n            }\r\n\r\n            if (asciiCharsBE > asciiCharsLE)\r\n                enc = 'utf-16be';\r\n            else if (asciiCharsBE < asciiCharsLE)\r\n                enc = 'utf-16le';\r\n        }\r\n    }\r\n\r\n    return enc;\r\n}\r\n\r\n\r\n","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\r\n/* eslint-disable node/no-deprecated-api */\r\nvar buffer = require('buffer')\r\nvar Buffer = buffer.Buffer\r\n\r\n// alternative to using Object.keys for old browsers\r\nfunction copyProps (src, dst) {\r\n  for (var key in src) {\r\n    dst[key] = src[key]\r\n  }\r\n}\r\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\r\n  module.exports = buffer\r\n} else {\r\n  // Copy properties from require('buffer')\r\n  copyProps(buffer, exports)\r\n  exports.Buffer = SafeBuffer\r\n}\r\n\r\nfunction SafeBuffer (arg, encodingOrOffset, length) {\r\n  return Buffer(arg, encodingOrOffset, length)\r\n}\r\n\r\nSafeBuffer.prototype = Object.create(Buffer.prototype)\r\n\r\n// Copy static methods from Buffer\r\ncopyProps(Buffer, SafeBuffer)\r\n\r\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\r\n  if (typeof arg === 'number') {\r\n    throw new TypeError('Argument must not be a number')\r\n  }\r\n  return Buffer(arg, encodingOrOffset, length)\r\n}\r\n\r\nSafeBuffer.alloc = function (size, fill, encoding) {\r\n  if (typeof size !== 'number') {\r\n    throw new TypeError('Argument must be a number')\r\n  }\r\n  var buf = Buffer(size)\r\n  if (fill !== undefined) {\r\n    if (typeof encoding === 'string') {\r\n      buf.fill(fill, encoding)\r\n    } else {\r\n      buf.fill(fill)\r\n    }\r\n  } else {\r\n    buf.fill(0)\r\n  }\r\n  return buf\r\n}\r\n\r\nSafeBuffer.allocUnsafe = function (size) {\r\n  if (typeof size !== 'number') {\r\n    throw new TypeError('Argument must be a number')\r\n  }\r\n  return Buffer(size)\r\n}\r\n\r\nSafeBuffer.allocUnsafeSlow = function (size) {\r\n  if (typeof size !== 'number') {\r\n    throw new TypeError('Argument must be a number')\r\n  }\r\n  return buffer.SlowBuffer(size)\r\n}\r\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\r\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\r\n  var e, m\r\n  var eLen = (nBytes * 8) - mLen - 1\r\n  var eMax = (1 << eLen) - 1\r\n  var eBias = eMax >> 1\r\n  var nBits = -7\r\n  var i = isLE ? (nBytes - 1) : 0\r\n  var d = isLE ? -1 : 1\r\n  var s = buffer[offset + i]\r\n\r\n  i += d\r\n\r\n  e = s & ((1 << (-nBits)) - 1)\r\n  s >>= (-nBits)\r\n  nBits += eLen\r\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\r\n\r\n  m = e & ((1 << (-nBits)) - 1)\r\n  e >>= (-nBits)\r\n  nBits += mLen\r\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\r\n\r\n  if (e === 0) {\r\n    e = 1 - eBias\r\n  } else if (e === eMax) {\r\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\r\n  } else {\r\n    m = m + Math.pow(2, mLen)\r\n    e = e - eBias\r\n  }\r\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\r\n}\r\n\r\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\r\n  var e, m, c\r\n  var eLen = (nBytes * 8) - mLen - 1\r\n  var eMax = (1 << eLen) - 1\r\n  var eBias = eMax >> 1\r\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\r\n  var i = isLE ? 0 : (nBytes - 1)\r\n  var d = isLE ? 1 : -1\r\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\r\n\r\n  value = Math.abs(value)\r\n\r\n  if (isNaN(value) || value === Infinity) {\r\n    m = isNaN(value) ? 1 : 0\r\n    e = eMax\r\n  } else {\r\n    e = Math.floor(Math.log(value) / Math.LN2)\r\n    if (value * (c = Math.pow(2, -e)) < 1) {\r\n      e--\r\n      c *= 2\r\n    }\r\n    if (e + eBias >= 1) {\r\n      value += rt / c\r\n    } else {\r\n      value += rt * Math.pow(2, 1 - eBias)\r\n    }\r\n    if (value * c >= 2) {\r\n      e++\r\n      c /= 2\r\n    }\r\n\r\n    if (e + eBias >= eMax) {\r\n      m = 0\r\n      e = eMax\r\n    } else if (e + eBias >= 1) {\r\n      m = ((value * c) - 1) * Math.pow(2, mLen)\r\n      e = e + eBias\r\n    } else {\r\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\r\n      e = 0\r\n    }\r\n  }\r\n\r\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\r\n\r\n  e = (e << mLen) | m\r\n  eLen += mLen\r\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\r\n\r\n  buffer[offset + i - d] |= s * 128\r\n}\r\n","/**\r\n * Use the ImageData from a Canvas and flatten the image on a solid background\r\n */\r\nclass CanvasFlatten {\r\n  /**\r\n     * Change the image to grayscale\r\n     *\r\n     * @param  {object}   image         The imageData of a Canvas 2d context\r\n     * @param  {array}    background    Three values consisting of the r, g, b of the background\r\n     * @return {object}                 The resulting imageData\r\n     *\r\n     */\r\n  flatten(image, background) {\r\n    for (let i = 0; i < image.data.length; i += 4) {\r\n      const alpha = image.data[i + 3];\r\n      const invAlpha = 255 - alpha;\r\n\r\n      image.data[i] = (alpha * image.data[i] + invAlpha * background[0]) / 255;\r\n      image.data[i + 1] = (alpha * image.data[i + 1] + invAlpha * background[1]) / 255;\r\n      image.data[i + 2] = (alpha * image.data[i + 2] + invAlpha * background[2]) / 255;\r\n      image.data[i + 3] = 0xff;\r\n    }\r\n\r\n    return image;\r\n  }\r\n}\r\n\r\nmodule.exports = new CanvasFlatten();\r\n","/*!\r\n * The buffer module from node.js, for the browser.\r\n *\r\n * @author   Feross Aboukhadijeh <https://feross.org>\r\n * @license  MIT\r\n */\r\n/* eslint-disable no-proto */\r\n\r\n'use strict'\r\n\r\nvar base64 = require('base64-js')\r\nvar ieee754 = require('ieee754')\r\n\r\nexports.Buffer = Buffer\r\nexports.SlowBuffer = SlowBuffer\r\nexports.INSPECT_MAX_BYTES = 50\r\n\r\nvar K_MAX_LENGTH = 0x7fffffff\r\nexports.kMaxLength = K_MAX_LENGTH\r\n\r\n/**\r\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\r\n *   === true    Use Uint8Array implementation (fastest)\r\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\r\n *               implementation (most compatible, even IE6)\r\n *\r\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\r\n * Opera 11.6+, iOS 4.2+.\r\n *\r\n * We report that the browser does not support typed arrays if the are not subclassable\r\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\r\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\r\n * for __proto__ and has a buggy typed array implementation.\r\n */\r\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\r\n\r\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\r\n    typeof console.error === 'function') {\r\n  console.error(\r\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\r\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\r\n  )\r\n}\r\n\r\nfunction typedArraySupport () {\r\n  // Can typed array instances can be augmented?\r\n  try {\r\n    var arr = new Uint8Array(1)\r\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\r\n    return arr.foo() === 42\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\nObject.defineProperty(Buffer.prototype, 'parent', {\r\n  enumerable: true,\r\n  get: function () {\r\n    if (!Buffer.isBuffer(this)) return undefined\r\n    return this.buffer\r\n  }\r\n})\r\n\r\nObject.defineProperty(Buffer.prototype, 'offset', {\r\n  enumerable: true,\r\n  get: function () {\r\n    if (!Buffer.isBuffer(this)) return undefined\r\n    return this.byteOffset\r\n  }\r\n})\r\n\r\nfunction createBuffer (length) {\r\n  if (length > K_MAX_LENGTH) {\r\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\r\n  }\r\n  // Return an augmented `Uint8Array` instance\r\n  var buf = new Uint8Array(length)\r\n  buf.__proto__ = Buffer.prototype\r\n  return buf\r\n}\r\n\r\n/**\r\n * The Buffer constructor returns instances of `Uint8Array` that have their\r\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\r\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\r\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\r\n * returns a single octet.\r\n *\r\n * The `Uint8Array` prototype remains unmodified.\r\n */\r\n\r\nfunction Buffer (arg, encodingOrOffset, length) {\r\n  // Common case.\r\n  if (typeof arg === 'number') {\r\n    if (typeof encodingOrOffset === 'string') {\r\n      throw new TypeError(\r\n        'The \"string\" argument must be of type string. Received type number'\r\n      )\r\n    }\r\n    return allocUnsafe(arg)\r\n  }\r\n  return from(arg, encodingOrOffset, length)\r\n}\r\n\r\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\r\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\r\n    Buffer[Symbol.species] === Buffer) {\r\n  Object.defineProperty(Buffer, Symbol.species, {\r\n    value: null,\r\n    configurable: true,\r\n    enumerable: false,\r\n    writable: false\r\n  })\r\n}\r\n\r\nBuffer.poolSize = 8192 // not used by this implementation\r\n\r\nfunction from (value, encodingOrOffset, length) {\r\n  if (typeof value === 'string') {\r\n    return fromString(value, encodingOrOffset)\r\n  }\r\n\r\n  if (ArrayBuffer.isView(value)) {\r\n    return fromArrayLike(value)\r\n  }\r\n\r\n  if (value == null) {\r\n    throw TypeError(\r\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\r\n      'or Array-like Object. Received type ' + (typeof value)\r\n    )\r\n  }\r\n\r\n  if (isInstance(value, ArrayBuffer) ||\r\n      (value && isInstance(value.buffer, ArrayBuffer))) {\r\n    return fromArrayBuffer(value, encodingOrOffset, length)\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    throw new TypeError(\r\n      'The \"value\" argument must not be of type number. Received type number'\r\n    )\r\n  }\r\n\r\n  var valueOf = value.valueOf && value.valueOf()\r\n  if (valueOf != null && valueOf !== value) {\r\n    return Buffer.from(valueOf, encodingOrOffset, length)\r\n  }\r\n\r\n  var b = fromObject(value)\r\n  if (b) return b\r\n\r\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\r\n      typeof value[Symbol.toPrimitive] === 'function') {\r\n    return Buffer.from(\r\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\r\n    )\r\n  }\r\n\r\n  throw new TypeError(\r\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\r\n    'or Array-like Object. Received type ' + (typeof value)\r\n  )\r\n}\r\n\r\n/**\r\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\r\n * if value is a number.\r\n * Buffer.from(str[, encoding])\r\n * Buffer.from(array)\r\n * Buffer.from(buffer)\r\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\r\n **/\r\nBuffer.from = function (value, encodingOrOffset, length) {\r\n  return from(value, encodingOrOffset, length)\r\n}\r\n\r\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\r\n// https://github.com/feross/buffer/pull/148\r\nBuffer.prototype.__proto__ = Uint8Array.prototype\r\nBuffer.__proto__ = Uint8Array\r\n\r\nfunction assertSize (size) {\r\n  if (typeof size !== 'number') {\r\n    throw new TypeError('\"size\" argument must be of type number')\r\n  } else if (size < 0) {\r\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\r\n  }\r\n}\r\n\r\nfunction alloc (size, fill, encoding) {\r\n  assertSize(size)\r\n  if (size <= 0) {\r\n    return createBuffer(size)\r\n  }\r\n  if (fill !== undefined) {\r\n    // Only pay attention to encoding if it's a string. This\r\n    // prevents accidentally sending in a number that would\r\n    // be interpretted as a start offset.\r\n    return typeof encoding === 'string'\r\n      ? createBuffer(size).fill(fill, encoding)\r\n      : createBuffer(size).fill(fill)\r\n  }\r\n  return createBuffer(size)\r\n}\r\n\r\n/**\r\n * Creates a new filled Buffer instance.\r\n * alloc(size[, fill[, encoding]])\r\n **/\r\nBuffer.alloc = function (size, fill, encoding) {\r\n  return alloc(size, fill, encoding)\r\n}\r\n\r\nfunction allocUnsafe (size) {\r\n  assertSize(size)\r\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\r\n}\r\n\r\n/**\r\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\r\n * */\r\nBuffer.allocUnsafe = function (size) {\r\n  return allocUnsafe(size)\r\n}\r\n/**\r\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\r\n */\r\nBuffer.allocUnsafeSlow = function (size) {\r\n  return allocUnsafe(size)\r\n}\r\n\r\nfunction fromString (string, encoding) {\r\n  if (typeof encoding !== 'string' || encoding === '') {\r\n    encoding = 'utf8'\r\n  }\r\n\r\n  if (!Buffer.isEncoding(encoding)) {\r\n    throw new TypeError('Unknown encoding: ' + encoding)\r\n  }\r\n\r\n  var length = byteLength(string, encoding) | 0\r\n  var buf = createBuffer(length)\r\n\r\n  var actual = buf.write(string, encoding)\r\n\r\n  if (actual !== length) {\r\n    // Writing a hex string, for example, that contains invalid characters will\r\n    // cause everything after the first invalid character to be ignored. (e.g.\r\n    // 'abxxcd' will be treated as 'ab')\r\n    buf = buf.slice(0, actual)\r\n  }\r\n\r\n  return buf\r\n}\r\n\r\nfunction fromArrayLike (array) {\r\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\r\n  var buf = createBuffer(length)\r\n  for (var i = 0; i < length; i += 1) {\r\n    buf[i] = array[i] & 255\r\n  }\r\n  return buf\r\n}\r\n\r\nfunction fromArrayBuffer (array, byteOffset, length) {\r\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\r\n    throw new RangeError('\"offset\" is outside of buffer bounds')\r\n  }\r\n\r\n  if (array.byteLength < byteOffset + (length || 0)) {\r\n    throw new RangeError('\"length\" is outside of buffer bounds')\r\n  }\r\n\r\n  var buf\r\n  if (byteOffset === undefined && length === undefined) {\r\n    buf = new Uint8Array(array)\r\n  } else if (length === undefined) {\r\n    buf = new Uint8Array(array, byteOffset)\r\n  } else {\r\n    buf = new Uint8Array(array, byteOffset, length)\r\n  }\r\n\r\n  // Return an augmented `Uint8Array` instance\r\n  buf.__proto__ = Buffer.prototype\r\n  return buf\r\n}\r\n\r\nfunction fromObject (obj) {\r\n  if (Buffer.isBuffer(obj)) {\r\n    var len = checked(obj.length) | 0\r\n    var buf = createBuffer(len)\r\n\r\n    if (buf.length === 0) {\r\n      return buf\r\n    }\r\n\r\n    obj.copy(buf, 0, 0, len)\r\n    return buf\r\n  }\r\n\r\n  if (obj.length !== undefined) {\r\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\r\n      return createBuffer(0)\r\n    }\r\n    return fromArrayLike(obj)\r\n  }\r\n\r\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\r\n    return fromArrayLike(obj.data)\r\n  }\r\n}\r\n\r\nfunction checked (length) {\r\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\r\n  // length is NaN (which is otherwise coerced to zero.)\r\n  if (length >= K_MAX_LENGTH) {\r\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\r\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\r\n  }\r\n  return length | 0\r\n}\r\n\r\nfunction SlowBuffer (length) {\r\n  if (+length != length) { // eslint-disable-line eqeqeq\r\n    length = 0\r\n  }\r\n  return Buffer.alloc(+length)\r\n}\r\n\r\nBuffer.isBuffer = function isBuffer (b) {\r\n  return b != null && b._isBuffer === true &&\r\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\r\n}\r\n\r\nBuffer.compare = function compare (a, b) {\r\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\r\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\r\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\r\n    throw new TypeError(\r\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\r\n    )\r\n  }\r\n\r\n  if (a === b) return 0\r\n\r\n  var x = a.length\r\n  var y = b.length\r\n\r\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\r\n    if (a[i] !== b[i]) {\r\n      x = a[i]\r\n      y = b[i]\r\n      break\r\n    }\r\n  }\r\n\r\n  if (x < y) return -1\r\n  if (y < x) return 1\r\n  return 0\r\n}\r\n\r\nBuffer.isEncoding = function isEncoding (encoding) {\r\n  switch (String(encoding).toLowerCase()) {\r\n    case 'hex':\r\n    case 'utf8':\r\n    case 'utf-8':\r\n    case 'ascii':\r\n    case 'latin1':\r\n    case 'binary':\r\n    case 'base64':\r\n    case 'ucs2':\r\n    case 'ucs-2':\r\n    case 'utf16le':\r\n    case 'utf-16le':\r\n      return true\r\n    default:\r\n      return false\r\n  }\r\n}\r\n\r\nBuffer.concat = function concat (list, length) {\r\n  if (!Array.isArray(list)) {\r\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\r\n  }\r\n\r\n  if (list.length === 0) {\r\n    return Buffer.alloc(0)\r\n  }\r\n\r\n  var i\r\n  if (length === undefined) {\r\n    length = 0\r\n    for (i = 0; i < list.length; ++i) {\r\n      length += list[i].length\r\n    }\r\n  }\r\n\r\n  var buffer = Buffer.allocUnsafe(length)\r\n  var pos = 0\r\n  for (i = 0; i < list.length; ++i) {\r\n    var buf = list[i]\r\n    if (isInstance(buf, Uint8Array)) {\r\n      buf = Buffer.from(buf)\r\n    }\r\n    if (!Buffer.isBuffer(buf)) {\r\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\r\n    }\r\n    buf.copy(buffer, pos)\r\n    pos += buf.length\r\n  }\r\n  return buffer\r\n}\r\n\r\nfunction byteLength (string, encoding) {\r\n  if (Buffer.isBuffer(string)) {\r\n    return string.length\r\n  }\r\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\r\n    return string.byteLength\r\n  }\r\n  if (typeof string !== 'string') {\r\n    throw new TypeError(\r\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\r\n      'Received type ' + typeof string\r\n    )\r\n  }\r\n\r\n  var len = string.length\r\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\r\n  if (!mustMatch && len === 0) return 0\r\n\r\n  // Use a for loop to avoid recursion\r\n  var loweredCase = false\r\n  for (;;) {\r\n    switch (encoding) {\r\n      case 'ascii':\r\n      case 'latin1':\r\n      case 'binary':\r\n        return len\r\n      case 'utf8':\r\n      case 'utf-8':\r\n        return utf8ToBytes(string).length\r\n      case 'ucs2':\r\n      case 'ucs-2':\r\n      case 'utf16le':\r\n      case 'utf-16le':\r\n        return len * 2\r\n      case 'hex':\r\n        return len >>> 1\r\n      case 'base64':\r\n        return base64ToBytes(string).length\r\n      default:\r\n        if (loweredCase) {\r\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\r\n        }\r\n        encoding = ('' + encoding).toLowerCase()\r\n        loweredCase = true\r\n    }\r\n  }\r\n}\r\nBuffer.byteLength = byteLength\r\n\r\nfunction slowToString (encoding, start, end) {\r\n  var loweredCase = false\r\n\r\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\r\n  // property of a typed array.\r\n\r\n  // This behaves neither like String nor Uint8Array in that we set start/end\r\n  // to their upper/lower bounds if the value passed is out of range.\r\n  // undefined is handled specially as per ECMA-262 6th Edition,\r\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\r\n  if (start === undefined || start < 0) {\r\n    start = 0\r\n  }\r\n  // Return early if start > this.length. Done here to prevent potential uint32\r\n  // coercion fail below.\r\n  if (start > this.length) {\r\n    return ''\r\n  }\r\n\r\n  if (end === undefined || end > this.length) {\r\n    end = this.length\r\n  }\r\n\r\n  if (end <= 0) {\r\n    return ''\r\n  }\r\n\r\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\r\n  end >>>= 0\r\n  start >>>= 0\r\n\r\n  if (end <= start) {\r\n    return ''\r\n  }\r\n\r\n  if (!encoding) encoding = 'utf8'\r\n\r\n  while (true) {\r\n    switch (encoding) {\r\n      case 'hex':\r\n        return hexSlice(this, start, end)\r\n\r\n      case 'utf8':\r\n      case 'utf-8':\r\n        return utf8Slice(this, start, end)\r\n\r\n      case 'ascii':\r\n        return asciiSlice(this, start, end)\r\n\r\n      case 'latin1':\r\n      case 'binary':\r\n        return latin1Slice(this, start, end)\r\n\r\n      case 'base64':\r\n        return base64Slice(this, start, end)\r\n\r\n      case 'ucs2':\r\n      case 'ucs-2':\r\n      case 'utf16le':\r\n      case 'utf-16le':\r\n        return utf16leSlice(this, start, end)\r\n\r\n      default:\r\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\r\n        encoding = (encoding + '').toLowerCase()\r\n        loweredCase = true\r\n    }\r\n  }\r\n}\r\n\r\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\r\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\r\n// reliably in a browserify context because there could be multiple different\r\n// copies of the 'buffer' package in use. This method works even for Buffer\r\n// instances that were created from another copy of the `buffer` package.\r\n// See: https://github.com/feross/buffer/issues/154\r\nBuffer.prototype._isBuffer = true\r\n\r\nfunction swap (b, n, m) {\r\n  var i = b[n]\r\n  b[n] = b[m]\r\n  b[m] = i\r\n}\r\n\r\nBuffer.prototype.swap16 = function swap16 () {\r\n  var len = this.length\r\n  if (len % 2 !== 0) {\r\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\r\n  }\r\n  for (var i = 0; i < len; i += 2) {\r\n    swap(this, i, i + 1)\r\n  }\r\n  return this\r\n}\r\n\r\nBuffer.prototype.swap32 = function swap32 () {\r\n  var len = this.length\r\n  if (len % 4 !== 0) {\r\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\r\n  }\r\n  for (var i = 0; i < len; i += 4) {\r\n    swap(this, i, i + 3)\r\n    swap(this, i + 1, i + 2)\r\n  }\r\n  return this\r\n}\r\n\r\nBuffer.prototype.swap64 = function swap64 () {\r\n  var len = this.length\r\n  if (len % 8 !== 0) {\r\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\r\n  }\r\n  for (var i = 0; i < len; i += 8) {\r\n    swap(this, i, i + 7)\r\n    swap(this, i + 1, i + 6)\r\n    swap(this, i + 2, i + 5)\r\n    swap(this, i + 3, i + 4)\r\n  }\r\n  return this\r\n}\r\n\r\nBuffer.prototype.toString = function toString () {\r\n  var length = this.length\r\n  if (length === 0) return ''\r\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\r\n  return slowToString.apply(this, arguments)\r\n}\r\n\r\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\r\n\r\nBuffer.prototype.equals = function equals (b) {\r\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\r\n  if (this === b) return true\r\n  return Buffer.compare(this, b) === 0\r\n}\r\n\r\nBuffer.prototype.inspect = function inspect () {\r\n  var str = ''\r\n  var max = exports.INSPECT_MAX_BYTES\r\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\r\n  if (this.length > max) str += ' ... '\r\n  return '<Buffer ' + str + '>'\r\n}\r\n\r\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\r\n  if (isInstance(target, Uint8Array)) {\r\n    target = Buffer.from(target, target.offset, target.byteLength)\r\n  }\r\n  if (!Buffer.isBuffer(target)) {\r\n    throw new TypeError(\r\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\r\n      'Received type ' + (typeof target)\r\n    )\r\n  }\r\n\r\n  if (start === undefined) {\r\n    start = 0\r\n  }\r\n  if (end === undefined) {\r\n    end = target ? target.length : 0\r\n  }\r\n  if (thisStart === undefined) {\r\n    thisStart = 0\r\n  }\r\n  if (thisEnd === undefined) {\r\n    thisEnd = this.length\r\n  }\r\n\r\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\r\n    throw new RangeError('out of range index')\r\n  }\r\n\r\n  if (thisStart >= thisEnd && start >= end) {\r\n    return 0\r\n  }\r\n  if (thisStart >= thisEnd) {\r\n    return -1\r\n  }\r\n  if (start >= end) {\r\n    return 1\r\n  }\r\n\r\n  start >>>= 0\r\n  end >>>= 0\r\n  thisStart >>>= 0\r\n  thisEnd >>>= 0\r\n\r\n  if (this === target) return 0\r\n\r\n  var x = thisEnd - thisStart\r\n  var y = end - start\r\n  var len = Math.min(x, y)\r\n\r\n  var thisCopy = this.slice(thisStart, thisEnd)\r\n  var targetCopy = target.slice(start, end)\r\n\r\n  for (var i = 0; i < len; ++i) {\r\n    if (thisCopy[i] !== targetCopy[i]) {\r\n      x = thisCopy[i]\r\n      y = targetCopy[i]\r\n      break\r\n    }\r\n  }\r\n\r\n  if (x < y) return -1\r\n  if (y < x) return 1\r\n  return 0\r\n}\r\n\r\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\r\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\r\n//\r\n// Arguments:\r\n// - buffer - a Buffer to search\r\n// - val - a string, Buffer, or number\r\n// - byteOffset - an index into `buffer`; will be clamped to an int32\r\n// - encoding - an optional encoding, relevant is val is a string\r\n// - dir - true for indexOf, false for lastIndexOf\r\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\r\n  // Empty buffer means no match\r\n  if (buffer.length === 0) return -1\r\n\r\n  // Normalize byteOffset\r\n  if (typeof byteOffset === 'string') {\r\n    encoding = byteOffset\r\n    byteOffset = 0\r\n  } else if (byteOffset > 0x7fffffff) {\r\n    byteOffset = 0x7fffffff\r\n  } else if (byteOffset < -0x80000000) {\r\n    byteOffset = -0x80000000\r\n  }\r\n  byteOffset = +byteOffset // Coerce to Number.\r\n  if (numberIsNaN(byteOffset)) {\r\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\r\n    byteOffset = dir ? 0 : (buffer.length - 1)\r\n  }\r\n\r\n  // Normalize byteOffset: negative offsets start from the end of the buffer\r\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\r\n  if (byteOffset >= buffer.length) {\r\n    if (dir) return -1\r\n    else byteOffset = buffer.length - 1\r\n  } else if (byteOffset < 0) {\r\n    if (dir) byteOffset = 0\r\n    else return -1\r\n  }\r\n\r\n  // Normalize val\r\n  if (typeof val === 'string') {\r\n    val = Buffer.from(val, encoding)\r\n  }\r\n\r\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\r\n  if (Buffer.isBuffer(val)) {\r\n    // Special case: looking for empty string/buffer always fails\r\n    if (val.length === 0) {\r\n      return -1\r\n    }\r\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\r\n  } else if (typeof val === 'number') {\r\n    val = val & 0xFF // Search for a byte value [0-255]\r\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\r\n      if (dir) {\r\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\r\n      } else {\r\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\r\n      }\r\n    }\r\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\r\n  }\r\n\r\n  throw new TypeError('val must be string, number or Buffer')\r\n}\r\n\r\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\r\n  var indexSize = 1\r\n  var arrLength = arr.length\r\n  var valLength = val.length\r\n\r\n  if (encoding !== undefined) {\r\n    encoding = String(encoding).toLowerCase()\r\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\r\n        encoding === 'utf16le' || encoding === 'utf-16le') {\r\n      if (arr.length < 2 || val.length < 2) {\r\n        return -1\r\n      }\r\n      indexSize = 2\r\n      arrLength /= 2\r\n      valLength /= 2\r\n      byteOffset /= 2\r\n    }\r\n  }\r\n\r\n  function read (buf, i) {\r\n    if (indexSize === 1) {\r\n      return buf[i]\r\n    } else {\r\n      return buf.readUInt16BE(i * indexSize)\r\n    }\r\n  }\r\n\r\n  var i\r\n  if (dir) {\r\n    var foundIndex = -1\r\n    for (i = byteOffset; i < arrLength; i++) {\r\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\r\n        if (foundIndex === -1) foundIndex = i\r\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\r\n      } else {\r\n        if (foundIndex !== -1) i -= i - foundIndex\r\n        foundIndex = -1\r\n      }\r\n    }\r\n  } else {\r\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\r\n    for (i = byteOffset; i >= 0; i--) {\r\n      var found = true\r\n      for (var j = 0; j < valLength; j++) {\r\n        if (read(arr, i + j) !== read(val, j)) {\r\n          found = false\r\n          break\r\n        }\r\n      }\r\n      if (found) return i\r\n    }\r\n  }\r\n\r\n  return -1\r\n}\r\n\r\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\r\n  return this.indexOf(val, byteOffset, encoding) !== -1\r\n}\r\n\r\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\r\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\r\n}\r\n\r\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\r\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\r\n}\r\n\r\nfunction hexWrite (buf, string, offset, length) {\r\n  offset = Number(offset) || 0\r\n  var remaining = buf.length - offset\r\n  if (!length) {\r\n    length = remaining\r\n  } else {\r\n    length = Number(length)\r\n    if (length > remaining) {\r\n      length = remaining\r\n    }\r\n  }\r\n\r\n  var strLen = string.length\r\n\r\n  if (length > strLen / 2) {\r\n    length = strLen / 2\r\n  }\r\n  for (var i = 0; i < length; ++i) {\r\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\r\n    if (numberIsNaN(parsed)) return i\r\n    buf[offset + i] = parsed\r\n  }\r\n  return i\r\n}\r\n\r\nfunction utf8Write (buf, string, offset, length) {\r\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\r\n}\r\n\r\nfunction asciiWrite (buf, string, offset, length) {\r\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\r\n}\r\n\r\nfunction latin1Write (buf, string, offset, length) {\r\n  return asciiWrite(buf, string, offset, length)\r\n}\r\n\r\nfunction base64Write (buf, string, offset, length) {\r\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\r\n}\r\n\r\nfunction ucs2Write (buf, string, offset, length) {\r\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\r\n}\r\n\r\nBuffer.prototype.write = function write (string, offset, length, encoding) {\r\n  // Buffer#write(string)\r\n  if (offset === undefined) {\r\n    encoding = 'utf8'\r\n    length = this.length\r\n    offset = 0\r\n  // Buffer#write(string, encoding)\r\n  } else if (length === undefined && typeof offset === 'string') {\r\n    encoding = offset\r\n    length = this.length\r\n    offset = 0\r\n  // Buffer#write(string, offset[, length][, encoding])\r\n  } else if (isFinite(offset)) {\r\n    offset = offset >>> 0\r\n    if (isFinite(length)) {\r\n      length = length >>> 0\r\n      if (encoding === undefined) encoding = 'utf8'\r\n    } else {\r\n      encoding = length\r\n      length = undefined\r\n    }\r\n  } else {\r\n    throw new Error(\r\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\r\n    )\r\n  }\r\n\r\n  var remaining = this.length - offset\r\n  if (length === undefined || length > remaining) length = remaining\r\n\r\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\r\n    throw new RangeError('Attempt to write outside buffer bounds')\r\n  }\r\n\r\n  if (!encoding) encoding = 'utf8'\r\n\r\n  var loweredCase = false\r\n  for (;;) {\r\n    switch (encoding) {\r\n      case 'hex':\r\n        return hexWrite(this, string, offset, length)\r\n\r\n      case 'utf8':\r\n      case 'utf-8':\r\n        return utf8Write(this, string, offset, length)\r\n\r\n      case 'ascii':\r\n        return asciiWrite(this, string, offset, length)\r\n\r\n      case 'latin1':\r\n      case 'binary':\r\n        return latin1Write(this, string, offset, length)\r\n\r\n      case 'base64':\r\n        // Warning: maxLength not taken into account in base64Write\r\n        return base64Write(this, string, offset, length)\r\n\r\n      case 'ucs2':\r\n      case 'ucs-2':\r\n      case 'utf16le':\r\n      case 'utf-16le':\r\n        return ucs2Write(this, string, offset, length)\r\n\r\n      default:\r\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\r\n        encoding = ('' + encoding).toLowerCase()\r\n        loweredCase = true\r\n    }\r\n  }\r\n}\r\n\r\nBuffer.prototype.toJSON = function toJSON () {\r\n  return {\r\n    type: 'Buffer',\r\n    data: Array.prototype.slice.call(this._arr || this, 0)\r\n  }\r\n}\r\n\r\nfunction base64Slice (buf, start, end) {\r\n  if (start === 0 && end === buf.length) {\r\n    return base64.fromByteArray(buf)\r\n  } else {\r\n    return base64.fromByteArray(buf.slice(start, end))\r\n  }\r\n}\r\n\r\nfunction utf8Slice (buf, start, end) {\r\n  end = Math.min(buf.length, end)\r\n  var res = []\r\n\r\n  var i = start\r\n  while (i < end) {\r\n    var firstByte = buf[i]\r\n    var codePoint = null\r\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\r\n      : (firstByte > 0xDF) ? 3\r\n        : (firstByte > 0xBF) ? 2\r\n          : 1\r\n\r\n    if (i + bytesPerSequence <= end) {\r\n      var secondByte, thirdByte, fourthByte, tempCodePoint\r\n\r\n      switch (bytesPerSequence) {\r\n        case 1:\r\n          if (firstByte < 0x80) {\r\n            codePoint = firstByte\r\n          }\r\n          break\r\n        case 2:\r\n          secondByte = buf[i + 1]\r\n          if ((secondByte & 0xC0) === 0x80) {\r\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\r\n            if (tempCodePoint > 0x7F) {\r\n              codePoint = tempCodePoint\r\n            }\r\n          }\r\n          break\r\n        case 3:\r\n          secondByte = buf[i + 1]\r\n          thirdByte = buf[i + 2]\r\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\r\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\r\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\r\n              codePoint = tempCodePoint\r\n            }\r\n          }\r\n          break\r\n        case 4:\r\n          secondByte = buf[i + 1]\r\n          thirdByte = buf[i + 2]\r\n          fourthByte = buf[i + 3]\r\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\r\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\r\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\r\n              codePoint = tempCodePoint\r\n            }\r\n          }\r\n      }\r\n    }\r\n\r\n    if (codePoint === null) {\r\n      // we did not generate a valid codePoint so insert a\r\n      // replacement char (U+FFFD) and advance only 1 byte\r\n      codePoint = 0xFFFD\r\n      bytesPerSequence = 1\r\n    } else if (codePoint > 0xFFFF) {\r\n      // encode to utf16 (surrogate pair dance)\r\n      codePoint -= 0x10000\r\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\r\n      codePoint = 0xDC00 | codePoint & 0x3FF\r\n    }\r\n\r\n    res.push(codePoint)\r\n    i += bytesPerSequence\r\n  }\r\n\r\n  return decodeCodePointsArray(res)\r\n}\r\n\r\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\r\n// the lowest limit is Chrome, with 0x10000 args.\r\n// We go 1 magnitude less, for safety\r\nvar MAX_ARGUMENTS_LENGTH = 0x1000\r\n\r\nfunction decodeCodePointsArray (codePoints) {\r\n  var len = codePoints.length\r\n  if (len <= MAX_ARGUMENTS_LENGTH) {\r\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\r\n  }\r\n\r\n  // Decode in chunks to avoid \"call stack size exceeded\".\r\n  var res = ''\r\n  var i = 0\r\n  while (i < len) {\r\n    res += String.fromCharCode.apply(\r\n      String,\r\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\r\n    )\r\n  }\r\n  return res\r\n}\r\n\r\nfunction asciiSlice (buf, start, end) {\r\n  var ret = ''\r\n  end = Math.min(buf.length, end)\r\n\r\n  for (var i = start; i < end; ++i) {\r\n    ret += String.fromCharCode(buf[i] & 0x7F)\r\n  }\r\n  return ret\r\n}\r\n\r\nfunction latin1Slice (buf, start, end) {\r\n  var ret = ''\r\n  end = Math.min(buf.length, end)\r\n\r\n  for (var i = start; i < end; ++i) {\r\n    ret += String.fromCharCode(buf[i])\r\n  }\r\n  return ret\r\n}\r\n\r\nfunction hexSlice (buf, start, end) {\r\n  var len = buf.length\r\n\r\n  if (!start || start < 0) start = 0\r\n  if (!end || end < 0 || end > len) end = len\r\n\r\n  var out = ''\r\n  for (var i = start; i < end; ++i) {\r\n    out += toHex(buf[i])\r\n  }\r\n  return out\r\n}\r\n\r\nfunction utf16leSlice (buf, start, end) {\r\n  var bytes = buf.slice(start, end)\r\n  var res = ''\r\n  for (var i = 0; i < bytes.length; i += 2) {\r\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\r\n  }\r\n  return res\r\n}\r\n\r\nBuffer.prototype.slice = function slice (start, end) {\r\n  var len = this.length\r\n  start = ~~start\r\n  end = end === undefined ? len : ~~end\r\n\r\n  if (start < 0) {\r\n    start += len\r\n    if (start < 0) start = 0\r\n  } else if (start > len) {\r\n    start = len\r\n  }\r\n\r\n  if (end < 0) {\r\n    end += len\r\n    if (end < 0) end = 0\r\n  } else if (end > len) {\r\n    end = len\r\n  }\r\n\r\n  if (end < start) end = start\r\n\r\n  var newBuf = this.subarray(start, end)\r\n  // Return an augmented `Uint8Array` instance\r\n  newBuf.__proto__ = Buffer.prototype\r\n  return newBuf\r\n}\r\n\r\n/*\r\n * Need to make sure that buffer isn't trying to write out of bounds.\r\n */\r\nfunction checkOffset (offset, ext, length) {\r\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\r\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\r\n}\r\n\r\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\r\n  offset = offset >>> 0\r\n  byteLength = byteLength >>> 0\r\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n  var val = this[offset]\r\n  var mul = 1\r\n  var i = 0\r\n  while (++i < byteLength && (mul *= 0x100)) {\r\n    val += this[offset + i] * mul\r\n  }\r\n\r\n  return val\r\n}\r\n\r\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\r\n  offset = offset >>> 0\r\n  byteLength = byteLength >>> 0\r\n  if (!noAssert) {\r\n    checkOffset(offset, byteLength, this.length)\r\n  }\r\n\r\n  var val = this[offset + --byteLength]\r\n  var mul = 1\r\n  while (byteLength > 0 && (mul *= 0x100)) {\r\n    val += this[offset + --byteLength] * mul\r\n  }\r\n\r\n  return val\r\n}\r\n\r\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 1, this.length)\r\n  return this[offset]\r\n}\r\n\r\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 2, this.length)\r\n  return this[offset] | (this[offset + 1] << 8)\r\n}\r\n\r\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 2, this.length)\r\n  return (this[offset] << 8) | this[offset + 1]\r\n}\r\n\r\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n  return ((this[offset]) |\r\n      (this[offset + 1] << 8) |\r\n      (this[offset + 2] << 16)) +\r\n      (this[offset + 3] * 0x1000000)\r\n}\r\n\r\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n  return (this[offset] * 0x1000000) +\r\n    ((this[offset + 1] << 16) |\r\n    (this[offset + 2] << 8) |\r\n    this[offset + 3])\r\n}\r\n\r\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\r\n  offset = offset >>> 0\r\n  byteLength = byteLength >>> 0\r\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n  var val = this[offset]\r\n  var mul = 1\r\n  var i = 0\r\n  while (++i < byteLength && (mul *= 0x100)) {\r\n    val += this[offset + i] * mul\r\n  }\r\n  mul *= 0x80\r\n\r\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\r\n\r\n  return val\r\n}\r\n\r\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\r\n  offset = offset >>> 0\r\n  byteLength = byteLength >>> 0\r\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\r\n\r\n  var i = byteLength\r\n  var mul = 1\r\n  var val = this[offset + --i]\r\n  while (i > 0 && (mul *= 0x100)) {\r\n    val += this[offset + --i] * mul\r\n  }\r\n  mul *= 0x80\r\n\r\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\r\n\r\n  return val\r\n}\r\n\r\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 1, this.length)\r\n  if (!(this[offset] & 0x80)) return (this[offset])\r\n  return ((0xff - this[offset] + 1) * -1)\r\n}\r\n\r\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 2, this.length)\r\n  var val = this[offset] | (this[offset + 1] << 8)\r\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\r\n}\r\n\r\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 2, this.length)\r\n  var val = this[offset + 1] | (this[offset] << 8)\r\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\r\n}\r\n\r\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n  return (this[offset]) |\r\n    (this[offset + 1] << 8) |\r\n    (this[offset + 2] << 16) |\r\n    (this[offset + 3] << 24)\r\n}\r\n\r\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 4, this.length)\r\n\r\n  return (this[offset] << 24) |\r\n    (this[offset + 1] << 16) |\r\n    (this[offset + 2] << 8) |\r\n    (this[offset + 3])\r\n}\r\n\r\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 4, this.length)\r\n  return ieee754.read(this, offset, true, 23, 4)\r\n}\r\n\r\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 4, this.length)\r\n  return ieee754.read(this, offset, false, 23, 4)\r\n}\r\n\r\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 8, this.length)\r\n  return ieee754.read(this, offset, true, 52, 8)\r\n}\r\n\r\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkOffset(offset, 8, this.length)\r\n  return ieee754.read(this, offset, false, 52, 8)\r\n}\r\n\r\nfunction checkInt (buf, value, offset, ext, max, min) {\r\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\r\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\r\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\r\n}\r\n\r\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  byteLength = byteLength >>> 0\r\n  if (!noAssert) {\r\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\r\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\r\n  }\r\n\r\n  var mul = 1\r\n  var i = 0\r\n  this[offset] = value & 0xFF\r\n  while (++i < byteLength && (mul *= 0x100)) {\r\n    this[offset + i] = (value / mul) & 0xFF\r\n  }\r\n\r\n  return offset + byteLength\r\n}\r\n\r\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  byteLength = byteLength >>> 0\r\n  if (!noAssert) {\r\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\r\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\r\n  }\r\n\r\n  var i = byteLength - 1\r\n  var mul = 1\r\n  this[offset + i] = value & 0xFF\r\n  while (--i >= 0 && (mul *= 0x100)) {\r\n    this[offset + i] = (value / mul) & 0xFF\r\n  }\r\n\r\n  return offset + byteLength\r\n}\r\n\r\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\r\n  this[offset] = (value & 0xff)\r\n  return offset + 1\r\n}\r\n\r\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\r\n  this[offset] = (value & 0xff)\r\n  this[offset + 1] = (value >>> 8)\r\n  return offset + 2\r\n}\r\n\r\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\r\n  this[offset] = (value >>> 8)\r\n  this[offset + 1] = (value & 0xff)\r\n  return offset + 2\r\n}\r\n\r\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\r\n  this[offset + 3] = (value >>> 24)\r\n  this[offset + 2] = (value >>> 16)\r\n  this[offset + 1] = (value >>> 8)\r\n  this[offset] = (value & 0xff)\r\n  return offset + 4\r\n}\r\n\r\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\r\n  this[offset] = (value >>> 24)\r\n  this[offset + 1] = (value >>> 16)\r\n  this[offset + 2] = (value >>> 8)\r\n  this[offset + 3] = (value & 0xff)\r\n  return offset + 4\r\n}\r\n\r\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) {\r\n    var limit = Math.pow(2, (8 * byteLength) - 1)\r\n\r\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\r\n  }\r\n\r\n  var i = 0\r\n  var mul = 1\r\n  var sub = 0\r\n  this[offset] = value & 0xFF\r\n  while (++i < byteLength && (mul *= 0x100)) {\r\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\r\n      sub = 1\r\n    }\r\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\r\n  }\r\n\r\n  return offset + byteLength\r\n}\r\n\r\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) {\r\n    var limit = Math.pow(2, (8 * byteLength) - 1)\r\n\r\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\r\n  }\r\n\r\n  var i = byteLength - 1\r\n  var mul = 1\r\n  var sub = 0\r\n  this[offset + i] = value & 0xFF\r\n  while (--i >= 0 && (mul *= 0x100)) {\r\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\r\n      sub = 1\r\n    }\r\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\r\n  }\r\n\r\n  return offset + byteLength\r\n}\r\n\r\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\r\n  if (value < 0) value = 0xff + value + 1\r\n  this[offset] = (value & 0xff)\r\n  return offset + 1\r\n}\r\n\r\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\r\n  this[offset] = (value & 0xff)\r\n  this[offset + 1] = (value >>> 8)\r\n  return offset + 2\r\n}\r\n\r\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\r\n  this[offset] = (value >>> 8)\r\n  this[offset + 1] = (value & 0xff)\r\n  return offset + 2\r\n}\r\n\r\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\r\n  this[offset] = (value & 0xff)\r\n  this[offset + 1] = (value >>> 8)\r\n  this[offset + 2] = (value >>> 16)\r\n  this[offset + 3] = (value >>> 24)\r\n  return offset + 4\r\n}\r\n\r\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\r\n  if (value < 0) value = 0xffffffff + value + 1\r\n  this[offset] = (value >>> 24)\r\n  this[offset + 1] = (value >>> 16)\r\n  this[offset + 2] = (value >>> 8)\r\n  this[offset + 3] = (value & 0xff)\r\n  return offset + 4\r\n}\r\n\r\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\r\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\r\n  if (offset < 0) throw new RangeError('Index out of range')\r\n}\r\n\r\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) {\r\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\r\n  }\r\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\r\n  return offset + 4\r\n}\r\n\r\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\r\n  return writeFloat(this, value, offset, true, noAssert)\r\n}\r\n\r\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\r\n  return writeFloat(this, value, offset, false, noAssert)\r\n}\r\n\r\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\r\n  value = +value\r\n  offset = offset >>> 0\r\n  if (!noAssert) {\r\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\r\n  }\r\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\r\n  return offset + 8\r\n}\r\n\r\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\r\n  return writeDouble(this, value, offset, true, noAssert)\r\n}\r\n\r\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\r\n  return writeDouble(this, value, offset, false, noAssert)\r\n}\r\n\r\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\r\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\r\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\r\n  if (!start) start = 0\r\n  if (!end && end !== 0) end = this.length\r\n  if (targetStart >= target.length) targetStart = target.length\r\n  if (!targetStart) targetStart = 0\r\n  if (end > 0 && end < start) end = start\r\n\r\n  // Copy 0 bytes; we're done\r\n  if (end === start) return 0\r\n  if (target.length === 0 || this.length === 0) return 0\r\n\r\n  // Fatal error conditions\r\n  if (targetStart < 0) {\r\n    throw new RangeError('targetStart out of bounds')\r\n  }\r\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\r\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\r\n\r\n  // Are we oob?\r\n  if (end > this.length) end = this.length\r\n  if (target.length - targetStart < end - start) {\r\n    end = target.length - targetStart + start\r\n  }\r\n\r\n  var len = end - start\r\n\r\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\r\n    // Use built-in when available, missing from IE11\r\n    this.copyWithin(targetStart, start, end)\r\n  } else if (this === target && start < targetStart && targetStart < end) {\r\n    // descending copy from end\r\n    for (var i = len - 1; i >= 0; --i) {\r\n      target[i + targetStart] = this[i + start]\r\n    }\r\n  } else {\r\n    Uint8Array.prototype.set.call(\r\n      target,\r\n      this.subarray(start, end),\r\n      targetStart\r\n    )\r\n  }\r\n\r\n  return len\r\n}\r\n\r\n// Usage:\r\n//    buffer.fill(number[, offset[, end]])\r\n//    buffer.fill(buffer[, offset[, end]])\r\n//    buffer.fill(string[, offset[, end]][, encoding])\r\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\r\n  // Handle string cases:\r\n  if (typeof val === 'string') {\r\n    if (typeof start === 'string') {\r\n      encoding = start\r\n      start = 0\r\n      end = this.length\r\n    } else if (typeof end === 'string') {\r\n      encoding = end\r\n      end = this.length\r\n    }\r\n    if (encoding !== undefined && typeof encoding !== 'string') {\r\n      throw new TypeError('encoding must be a string')\r\n    }\r\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\r\n      throw new TypeError('Unknown encoding: ' + encoding)\r\n    }\r\n    if (val.length === 1) {\r\n      var code = val.charCodeAt(0)\r\n      if ((encoding === 'utf8' && code < 128) ||\r\n          encoding === 'latin1') {\r\n        // Fast path: If `val` fits into a single byte, use that numeric value.\r\n        val = code\r\n      }\r\n    }\r\n  } else if (typeof val === 'number') {\r\n    val = val & 255\r\n  }\r\n\r\n  // Invalid ranges are not set to a default, so can range check early.\r\n  if (start < 0 || this.length < start || this.length < end) {\r\n    throw new RangeError('Out of range index')\r\n  }\r\n\r\n  if (end <= start) {\r\n    return this\r\n  }\r\n\r\n  start = start >>> 0\r\n  end = end === undefined ? this.length : end >>> 0\r\n\r\n  if (!val) val = 0\r\n\r\n  var i\r\n  if (typeof val === 'number') {\r\n    for (i = start; i < end; ++i) {\r\n      this[i] = val\r\n    }\r\n  } else {\r\n    var bytes = Buffer.isBuffer(val)\r\n      ? val\r\n      : Buffer.from(val, encoding)\r\n    var len = bytes.length\r\n    if (len === 0) {\r\n      throw new TypeError('The value \"' + val +\r\n        '\" is invalid for argument \"value\"')\r\n    }\r\n    for (i = 0; i < end - start; ++i) {\r\n      this[i + start] = bytes[i % len]\r\n    }\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n// HELPER FUNCTIONS\r\n// ================\r\n\r\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\r\n\r\nfunction base64clean (str) {\r\n  // Node takes equal signs as end of the Base64 encoding\r\n  str = str.split('=')[0]\r\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\r\n  str = str.trim().replace(INVALID_BASE64_RE, '')\r\n  // Node converts strings with length < 2 to ''\r\n  if (str.length < 2) return ''\r\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\r\n  while (str.length % 4 !== 0) {\r\n    str = str + '='\r\n  }\r\n  return str\r\n}\r\n\r\nfunction toHex (n) {\r\n  if (n < 16) return '0' + n.toString(16)\r\n  return n.toString(16)\r\n}\r\n\r\nfunction utf8ToBytes (string, units) {\r\n  units = units || Infinity\r\n  var codePoint\r\n  var length = string.length\r\n  var leadSurrogate = null\r\n  var bytes = []\r\n\r\n  for (var i = 0; i < length; ++i) {\r\n    codePoint = string.charCodeAt(i)\r\n\r\n    // is surrogate component\r\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\r\n      // last char was a lead\r\n      if (!leadSurrogate) {\r\n        // no lead yet\r\n        if (codePoint > 0xDBFF) {\r\n          // unexpected trail\r\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n          continue\r\n        } else if (i + 1 === length) {\r\n          // unpaired lead\r\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n          continue\r\n        }\r\n\r\n        // valid lead\r\n        leadSurrogate = codePoint\r\n\r\n        continue\r\n      }\r\n\r\n      // 2 leads in a row\r\n      if (codePoint < 0xDC00) {\r\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n        leadSurrogate = codePoint\r\n        continue\r\n      }\r\n\r\n      // valid surrogate pair\r\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\r\n    } else if (leadSurrogate) {\r\n      // valid bmp char, but last char was a lead\r\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\r\n    }\r\n\r\n    leadSurrogate = null\r\n\r\n    // encode utf8\r\n    if (codePoint < 0x80) {\r\n      if ((units -= 1) < 0) break\r\n      bytes.push(codePoint)\r\n    } else if (codePoint < 0x800) {\r\n      if ((units -= 2) < 0) break\r\n      bytes.push(\r\n        codePoint >> 0x6 | 0xC0,\r\n        codePoint & 0x3F | 0x80\r\n      )\r\n    } else if (codePoint < 0x10000) {\r\n      if ((units -= 3) < 0) break\r\n      bytes.push(\r\n        codePoint >> 0xC | 0xE0,\r\n        codePoint >> 0x6 & 0x3F | 0x80,\r\n        codePoint & 0x3F | 0x80\r\n      )\r\n    } else if (codePoint < 0x110000) {\r\n      if ((units -= 4) < 0) break\r\n      bytes.push(\r\n        codePoint >> 0x12 | 0xF0,\r\n        codePoint >> 0xC & 0x3F | 0x80,\r\n        codePoint >> 0x6 & 0x3F | 0x80,\r\n        codePoint & 0x3F | 0x80\r\n      )\r\n    } else {\r\n      throw new Error('Invalid code point')\r\n    }\r\n  }\r\n\r\n  return bytes\r\n}\r\n\r\nfunction asciiToBytes (str) {\r\n  var byteArray = []\r\n  for (var i = 0; i < str.length; ++i) {\r\n    // Node's code seems to be doing this and not & 0x7F..\r\n    byteArray.push(str.charCodeAt(i) & 0xFF)\r\n  }\r\n  return byteArray\r\n}\r\n\r\nfunction utf16leToBytes (str, units) {\r\n  var c, hi, lo\r\n  var byteArray = []\r\n  for (var i = 0; i < str.length; ++i) {\r\n    if ((units -= 2) < 0) break\r\n\r\n    c = str.charCodeAt(i)\r\n    hi = c >> 8\r\n    lo = c % 256\r\n    byteArray.push(lo)\r\n    byteArray.push(hi)\r\n  }\r\n\r\n  return byteArray\r\n}\r\n\r\nfunction base64ToBytes (str) {\r\n  return base64.toByteArray(base64clean(str))\r\n}\r\n\r\nfunction blitBuffer (src, dst, offset, length) {\r\n  for (var i = 0; i < length; ++i) {\r\n    if ((i + offset >= dst.length) || (i >= src.length)) break\r\n    dst[i + offset] = src[i]\r\n  }\r\n  return i\r\n}\r\n\r\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\r\n// the `instanceof` check but they should be treated as of that type.\r\n// See: https://github.com/feross/buffer/issues/166\r\nfunction isInstance (obj, type) {\r\n  return obj instanceof type ||\r\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\r\n      obj.constructor.name === type.name)\r\n}\r\nfunction numberIsNaN (obj) {\r\n  // For IE11 support\r\n  return obj !== obj // eslint-disable-line no-self-compare\r\n}\r\n","\"use strict\";\r\n\r\nvar BOMChar = '\\uFEFF';\r\n\r\nexports.PrependBOM = PrependBOMWrapper\r\nfunction PrependBOMWrapper(encoder, options) {\r\n    this.encoder = encoder;\r\n    this.addBOM = true;\r\n}\r\n\r\nPrependBOMWrapper.prototype.write = function(str) {\r\n    if (this.addBOM) {\r\n        str = BOMChar + str;\r\n        this.addBOM = false;\r\n    }\r\n\r\n    return this.encoder.write(str);\r\n}\r\n\r\nPrependBOMWrapper.prototype.end = function() {\r\n    return this.encoder.end();\r\n}\r\n\r\n\r\n//------------------------------------------------------------------------------\r\n\r\nexports.StripBOM = StripBOMWrapper;\r\nfunction StripBOMWrapper(decoder, options) {\r\n    this.decoder = decoder;\r\n    this.pass = false;\r\n    this.options = options || {};\r\n}\r\n\r\nStripBOMWrapper.prototype.write = function(buf) {\r\n    var res = this.decoder.write(buf);\r\n    if (this.pass || !res)\r\n        return res;\r\n\r\n    if (res[0] === BOMChar) {\r\n        res = res.slice(1);\r\n        if (typeof this.options.stripBOM === 'function')\r\n            this.options.stripBOM();\r\n    }\r\n\r\n    this.pass = true;\r\n    return res;\r\n}\r\n\r\nStripBOMWrapper.prototype.end = function() {\r\n    return this.decoder.end();\r\n}\r\n\r\n","\"use strict\";\r\n\r\n// Description of supported double byte encodings and aliases.\r\n// Tables are not require()-d until they are needed to speed up library load.\r\n// require()-s are direct to support Browserify.\r\n\r\nmodule.exports = {\r\n    \r\n    // == Japanese/ShiftJIS ====================================================\r\n    // All japanese encodings are based on JIS X set of standards:\r\n    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.\r\n    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. \r\n    //              Has several variations in 1978, 1983, 1990 and 1997.\r\n    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.\r\n    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.\r\n    //              2 planes, first is superset of 0208, second - revised 0212.\r\n    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)\r\n\r\n    // Byte encodings are:\r\n    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte\r\n    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.\r\n    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.\r\n    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.\r\n    //               0x00-0x7F       - lower part of 0201\r\n    //               0x8E, 0xA1-0xDF - upper part of 0201\r\n    //               (0xA1-0xFE)x2   - 0208 plane (94x94).\r\n    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).\r\n    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.\r\n    //               Used as-is in ISO2022 family.\r\n    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, \r\n    //                0201-1976 Roman, 0208-1978, 0208-1983.\r\n    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.\r\n    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.\r\n    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.\r\n    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.\r\n    //\r\n    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.\r\n    //\r\n    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html\r\n\r\n    'shiftjis': {\r\n        type: '_dbcs',\r\n        table: function() { return require('./tables/shiftjis.json') },\r\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\r\n        encodeSkipVals: [{from: 0xED40, to: 0xF940}],\r\n    },\r\n    'csshiftjis': 'shiftjis',\r\n    'mskanji': 'shiftjis',\r\n    'sjis': 'shiftjis',\r\n    'windows31j': 'shiftjis',\r\n    'ms31j': 'shiftjis',\r\n    'xsjis': 'shiftjis',\r\n    'windows932': 'shiftjis',\r\n    'ms932': 'shiftjis',\r\n    '932': 'shiftjis',\r\n    'cp932': 'shiftjis',\r\n\r\n    'eucjp': {\r\n        type: '_dbcs',\r\n        table: function() { return require('./tables/eucjp.json') },\r\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\r\n    },\r\n\r\n    // TODO: KDDI extension to Shift_JIS\r\n    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.\r\n    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.\r\n\r\n\r\n    // == Chinese/GBK ==========================================================\r\n    // http://en.wikipedia.org/wiki/GBK\r\n    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder\r\n\r\n    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936\r\n    'gb2312': 'cp936',\r\n    'gb231280': 'cp936',\r\n    'gb23121980': 'cp936',\r\n    'csgb2312': 'cp936',\r\n    'csiso58gb231280': 'cp936',\r\n    'euccn': 'cp936',\r\n\r\n    // Microsoft's CP936 is a subset and approximation of GBK.\r\n    'windows936': 'cp936',\r\n    'ms936': 'cp936',\r\n    '936': 'cp936',\r\n    'cp936': {\r\n        type: '_dbcs',\r\n        table: function() { return require('./tables/cp936.json') },\r\n    },\r\n\r\n    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.\r\n    'gbk': {\r\n        type: '_dbcs',\r\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\r\n    },\r\n    'xgbk': 'gbk',\r\n    'isoir58': 'gbk',\r\n\r\n    // GB18030 is an algorithmic extension of GBK.\r\n    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder\r\n    // http://icu-project.org/docs/papers/gb18030.html\r\n    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml\r\n    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0\r\n    'gb18030': {\r\n        type: '_dbcs',\r\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\r\n        gb18030: function() { return require('./tables/gb18030-ranges.json') },\r\n        encodeSkipVals: [0x80],\r\n        encodeAdd: {'€': 0xA2E3},\r\n    },\r\n\r\n    'chinese': 'gb18030',\r\n\r\n\r\n    // == Korean ===============================================================\r\n    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.\r\n    'windows949': 'cp949',\r\n    'ms949': 'cp949',\r\n    '949': 'cp949',\r\n    'cp949': {\r\n        type: '_dbcs',\r\n        table: function() { return require('./tables/cp949.json') },\r\n    },\r\n\r\n    'cseuckr': 'cp949',\r\n    'csksc56011987': 'cp949',\r\n    'euckr': 'cp949',\r\n    'isoir149': 'cp949',\r\n    'korean': 'cp949',\r\n    'ksc56011987': 'cp949',\r\n    'ksc56011989': 'cp949',\r\n    'ksc5601': 'cp949',\r\n\r\n\r\n    // == Big5/Taiwan/Hong Kong ================================================\r\n    // There are lots of tables for Big5 and cp950. Please see the following links for history:\r\n    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html\r\n    // Variations, in roughly number of defined chars:\r\n    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT\r\n    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/\r\n    //  * Big5-2003 (Taiwan standard) almost superset of cp950.\r\n    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.\r\n    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. \r\n    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.\r\n    //    Plus, it has 4 combining sequences.\r\n    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299\r\n    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.\r\n    //    Implementations are not consistent within browsers; sometimes labeled as just big5.\r\n    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.\r\n    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31\r\n    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.\r\n    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt\r\n    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt\r\n    // \r\n    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder\r\n    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.\r\n\r\n    'windows950': 'cp950',\r\n    'ms950': 'cp950',\r\n    '950': 'cp950',\r\n    'cp950': {\r\n        type: '_dbcs',\r\n        table: function() { return require('./tables/cp950.json') },\r\n    },\r\n\r\n    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.\r\n    'big5': 'big5hkscs',\r\n    'big5hkscs': {\r\n        type: '_dbcs',\r\n        table: function() { return require('./tables/cp950.json').concat(require('./tables/big5-added.json')) },\r\n        encodeSkipVals: [0xa2cc],\r\n    },\r\n\r\n    'cnbig5': 'big5hkscs',\r\n    'csbig5': 'big5hkscs',\r\n    'xxbig5': 'big5hkscs',\r\n};\r\n","/* eslint-disable node/no-deprecated-api */\r\n\r\n'use strict'\r\n\r\nvar buffer = require('buffer')\r\nvar Buffer = buffer.Buffer\r\n\r\nvar safer = {}\r\n\r\nvar key\r\n\r\nfor (key in buffer) {\r\n  if (!buffer.hasOwnProperty(key)) continue\r\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\r\n  safer[key] = buffer[key]\r\n}\r\n\r\nvar Safer = safer.Buffer = {}\r\nfor (key in Buffer) {\r\n  if (!Buffer.hasOwnProperty(key)) continue\r\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\r\n  Safer[key] = Buffer[key]\r\n}\r\n\r\nsafer.Buffer.prototype = Buffer.prototype\r\n\r\nif (!Safer.from || Safer.from === Uint8Array.from) {\r\n  Safer.from = function (value, encodingOrOffset, length) {\r\n    if (typeof value === 'number') {\r\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\r\n    }\r\n    if (value && typeof value.length === 'undefined') {\r\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\r\n    }\r\n    return Buffer(value, encodingOrOffset, length)\r\n  }\r\n}\r\n\r\nif (!Safer.alloc) {\r\n  Safer.alloc = function (size, fill, encoding) {\r\n    if (typeof size !== 'number') {\r\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\r\n    }\r\n    if (size < 0 || size >= 2 * (1 << 30)) {\r\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\r\n    }\r\n    var buf = Buffer(size)\r\n    if (!fill || fill.length === 0) {\r\n      buf.fill(0)\r\n    } else if (typeof encoding === 'string') {\r\n      buf.fill(fill, encoding)\r\n    } else {\r\n      buf.fill(fill)\r\n    }\r\n    return buf\r\n  }\r\n}\r\n\r\nif (!safer.kStringMaxLength) {\r\n  try {\r\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\r\n  } catch (e) {\r\n    // we can't determine kStringMaxLength in environments where process.binding\r\n    // is unsupported, so let's not set it\r\n  }\r\n}\r\n\r\nif (!safer.constants) {\r\n  safer.constants = {\r\n    MAX_LENGTH: safer.kMaxLength\r\n  }\r\n  if (safer.kStringMaxLength) {\r\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\r\n  }\r\n}\r\n\r\nmodule.exports = safer\r\n"],"sourceRoot":"webpack:///"}