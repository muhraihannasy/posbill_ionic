import { Component, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, NgModule, Optional, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { enabled, exit, request } from 'screenfull';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function ImageViewerComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelement(1, "div", 8);
    ɵngcc0.ɵɵelementEnd();
} }
function ImageViewerComponent_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function ImageViewerComponent_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.rotateCounterClockwise(); });
    ɵngcc0.ɵɵelement(1, "span");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r1.config.btnClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r1.config.btnIcons.rotateCounterClockwise);
} }
function ImageViewerComponent_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function ImageViewerComponent_button_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.rotateClockwise(); });
    ɵngcc0.ɵɵelement(1, "span");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r2.config.btnClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r2.config.btnIcons.rotateClockwise);
} }
function ImageViewerComponent_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function ImageViewerComponent_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.zoomOut(); });
    ɵngcc0.ɵɵelement(1, "span");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r3.config.btnClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r3.config.btnIcons.zoomOut);
} }
function ImageViewerComponent_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function ImageViewerComponent_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.zoomIn(); });
    ɵngcc0.ɵɵelement(1, "span");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r4.config.btnClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r4.config.btnIcons.zoomIn);
} }
function ImageViewerComponent_button_8_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function ImageViewerComponent_button_8_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const cBtn_r16 = ctx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.fireCustomEvent(cBtn_r16.name, ctx_r17.index); });
    ɵngcc0.ɵɵelement(1, "span");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const cBtn_r16 = ctx.$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r5.config.btnClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(cBtn_r16.icon);
} }
function ImageViewerComponent_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function ImageViewerComponent_button_9_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.toggleFullscreen(); });
    ɵngcc0.ɵɵelement(1, "span");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r6.config.btnClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r6.config.btnIcons.fullscreen);
} }
function ImageViewerComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "button", 12);
    ɵngcc0.ɵɵlistener("click", function ImageViewerComponent_div_10_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.prevImage(); });
    ɵngcc0.ɵɵelement(2, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 12);
    ɵngcc0.ɵɵlistener("click", function ImageViewerComponent_div_10_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.nextImage(); });
    ɵngcc0.ɵɵelement(4, "span");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r7.config.btnClass);
    ɵngcc0.ɵɵproperty("disabled", ctx_r7.index === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r7.config.btnIcons.prev);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r7.config.btnClass);
    ɵngcc0.ɵɵproperty("disabled", ctx_r7.index === ctx_r7.src.length - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r7.config.btnIcons.next);
} }
class CustomEvent {
    /**
     * @param {?} name
     * @param {?} imageIndex
     */
    constructor(name, imageIndex) {
        this.name = name;
        this.imageIndex = imageIndex;
    }
}

const DEFAULT_CONFIG = {
    btnClass: 'default',
    zoomFactor: 0.1,
    containerBackgroundColor: '#ccc',
    wheelZoom: false,
    allowFullscreen: true,
    allowKeyboardNavigation: true,
    btnShow: {
        zoomIn: true,
        zoomOut: true,
        rotateClockwise: true,
        rotateCounterClockwise: true,
        next: true,
        prev: true
    },
    btnIcons: {
        zoomIn: 'fa fa-plus',
        zoomOut: 'fa fa-minus',
        rotateClockwise: 'fa fa-repeat',
        rotateCounterClockwise: 'fa fa-undo',
        next: 'fa fa-arrow-right',
        prev: 'fa fa-arrow-left',
        fullscreen: 'fa fa-arrows-alt',
    }
};
class ImageViewerComponent {
    /**
     * @param {?} moduleConfig
     */
    constructor(moduleConfig) {
        this.moduleConfig = moduleConfig;
        this.index = 0;
        this.indexChange = new EventEmitter();
        this.configChange = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.style = { transform: '', msTransform: '', oTransform: '', webkitTransform: '' };
        this.fullscreen = false;
        this.loading = true;
        this.scale = 1;
        this.rotation = 0;
        this.translateX = 0;
        this.translateY = 0;
        this.hovered = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ merged = this.mergeConfig(DEFAULT_CONFIG, this.moduleConfig);
        this.config = this.mergeConfig(merged, this.config);
        this.triggerConfigBinding();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    nextImage(event) {
        if (this.canNavigate(event) && this.index < this.src.length - 1) {
            this.loading = true;
            this.index++;
            this.triggerIndexBinding();
            this.reset();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    prevImage(event) {
        if (this.canNavigate(event) && this.index > 0) {
            this.loading = true;
            this.index--;
            this.triggerIndexBinding();
            this.reset();
        }
    }
    /**
     * @return {?}
     */
    zoomIn() {
        this.scale *= (1 + this.config.zoomFactor);
        this.updateStyle();
    }
    /**
     * @return {?}
     */
    zoomOut() {
        if (this.scale > this.config.zoomFactor) {
            this.scale /= (1 + this.config.zoomFactor);
        }
        this.updateStyle();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    scrollZoom(evt) {
        if (this.config.wheelZoom) {
            evt.deltaY > 0 ? this.zoomOut() : this.zoomIn();
            return false;
        }
    }
    /**
     * @return {?}
     */
    rotateClockwise() {
        this.rotation += 90;
        this.updateStyle();
    }
    /**
     * @return {?}
     */
    rotateCounterClockwise() {
        this.rotation -= 90;
        this.updateStyle();
    }
    /**
     * @return {?}
     */
    onLoad() {
        this.loading = false;
    }
    /**
     * @return {?}
     */
    onLoadStart() {
        this.loading = true;
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onDragOver(evt) {
        this.translateX += (evt.clientX - this.prevX);
        this.translateY += (evt.clientY - this.prevY);
        this.prevX = evt.clientX;
        this.prevY = evt.clientY;
        this.updateStyle();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onDragStart(evt) {
        if (evt.dataTransfer && evt.dataTransfer.setDragImage) {
            evt.dataTransfer.setDragImage(evt.target.nextElementSibling, 0, 0);
        }
        this.prevX = evt.clientX;
        this.prevY = evt.clientY;
    }
    /**
     * @return {?}
     */
    toggleFullscreen() {
        this.fullscreen = !this.fullscreen;
        if (!this.fullscreen) {
            this.reset();
        }
    }
    /**
     * @return {?}
     */
    triggerIndexBinding() {
        this.indexChange.emit(this.index);
    }
    /**
     * @return {?}
     */
    triggerConfigBinding() {
        this.configChange.next(this.config);
    }
    /**
     * @param {?} name
     * @param {?} imageIndex
     * @return {?}
     */
    fireCustomEvent(name, imageIndex) {
        this.customEvent.emit(new CustomEvent(name, imageIndex));
    }
    /**
     * @return {?}
     */
    reset() {
        this.scale = 1;
        this.rotation = 0;
        this.translateX = 0;
        this.translateY = 0;
        this.updateStyle();
    }
    /**
     * @return {?}
     */
    onMouseOver() {
        this.hovered = true;
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        this.hovered = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    canNavigate(event) {
        return event == null || (this.config.allowKeyboardNavigation && this.hovered);
    }
    /**
     * @return {?}
     */
    updateStyle() {
        this.style.transform = `translate(${this.translateX}px, ${this.translateY}px) rotate(${this.rotation}deg) scale(${this.scale})`;
        this.style.msTransform = this.style.transform;
        this.style.webkitTransform = this.style.transform;
        this.style.oTransform = this.style.transform;
    }
    /**
     * @param {?} defaultValues
     * @param {?} overrideValues
     * @return {?}
     */
    mergeConfig(defaultValues, overrideValues) {
        let /** @type {?} */ result = Object.assign({}, defaultValues);
        if (overrideValues) {
            result = Object.assign({}, defaultValues, overrideValues);
            if (overrideValues.btnIcons) {
                result.btnIcons = Object.assign({}, defaultValues.btnIcons, overrideValues.btnIcons);
            }
        }
        return result;
    }
}
ImageViewerComponent.ɵfac = function ImageViewerComponent_Factory(t) { return new (t || ImageViewerComponent)(ɵngcc0.ɵɵdirectiveInject('config', 8)); };
ImageViewerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ImageViewerComponent, selectors: [["ngx-image-viewer"]], hostBindings: function ImageViewerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup.ArrowRight", function ImageViewerComponent_keyup_ArrowRight_HostBindingHandler($event) { return ctx.nextImage($event); }, false, ɵngcc0.ɵɵresolveWindow)("keyup.ArrowLeft", function ImageViewerComponent_keyup_ArrowLeft_HostBindingHandler($event) { return ctx.prevImage($event); }, false, ɵngcc0.ɵɵresolveWindow)("mouseover", function ImageViewerComponent_mouseover_HostBindingHandler() { return ctx.onMouseOver(); })("mouseleave", function ImageViewerComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
    } }, inputs: { index: "index", config: "config", src: "src" }, outputs: { indexChange: "indexChange", configChange: "configChange", customEvent: "customEvent" }, decls: 11, vars: 13, consts: [[1, "img-container", 3, "ngxToggleFullscreen", "wheel", "dragover"], ["alt", "Image not found...", 3, "src", "ngStyle", "dragstart", "load", "loadstart"], ["class", "spinner-container", 4, "ngIf"], ["type", "button", 3, "class", "click", 4, "ngIf"], ["type", "button", 3, "class", "click", 4, "ngFor", "ngForOf"], ["type", "button", "id", "ngx-fs-btn", 3, "class", "click", 4, "ngIf"], ["class", "nav-button-container", 4, "ngIf"], [1, "spinner-container"], [1, "spinner"], ["type", "button", 3, "click"], ["type", "button", "id", "ngx-fs-btn", 3, "click"], [1, "nav-button-container"], ["type", "button", 3, "disabled", "click"]], template: function ImageViewerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("wheel", function ImageViewerComponent_Template_div_wheel_0_listener($event) { return ctx.scrollZoom($event); })("dragover", function ImageViewerComponent_Template_div_dragover_0_listener($event) { return ctx.onDragOver($event); });
        ɵngcc0.ɵɵelementStart(1, "img", 1);
        ɵngcc0.ɵɵlistener("dragstart", function ImageViewerComponent_Template_img_dragstart_1_listener($event) { return ctx.onDragStart($event); })("load", function ImageViewerComponent_Template_img_load_1_listener() { return ctx.onLoad(); })("loadstart", function ImageViewerComponent_Template_img_loadstart_1_listener() { return ctx.onLoadStart(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "div");
        ɵngcc0.ɵɵtemplate(3, ImageViewerComponent_div_3_Template, 2, 0, "div", 2);
        ɵngcc0.ɵɵtemplate(4, ImageViewerComponent_button_4_Template, 2, 4, "button", 3);
        ɵngcc0.ɵɵtemplate(5, ImageViewerComponent_button_5_Template, 2, 4, "button", 3);
        ɵngcc0.ɵɵtemplate(6, ImageViewerComponent_button_6_Template, 2, 4, "button", 3);
        ɵngcc0.ɵɵtemplate(7, ImageViewerComponent_button_7_Template, 2, 4, "button", 3);
        ɵngcc0.ɵɵtemplate(8, ImageViewerComponent_button_8_Template, 2, 4, "button", 4);
        ɵngcc0.ɵɵtemplate(9, ImageViewerComponent_button_9_Template, 2, 4, "button", 5);
        ɵngcc0.ɵɵtemplate(10, ImageViewerComponent_div_10_Template, 5, 10, "div", 6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("background-color", ctx.config.containerBackgroundColor);
        ɵngcc0.ɵɵproperty("ngxToggleFullscreen", ctx.fullscreen);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("src", ctx.src[ctx.index], ɵngcc0.ɵɵsanitizeUrl)("ngStyle", ctx.style);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.config.btnShow.rotateCounterClockwise);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.config.btnShow.rotateClockwise);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.config.btnShow.zoomOut);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.config.btnShow.zoomIn);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.config.customBtns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.config.allowFullscreen);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.src.length > 1);
    } }, directives: function () { return [ToggleFullscreenDirective, ɵngcc1.NgStyle, ɵngcc1.NgIf, ɵngcc1.NgForOf]; }, styles: [".img-container[_ngcontent-%COMP%] {\n      height: 100%;\n      width: 100%;\n      overflow: hidden;\n      position: relative; }\n\n    .img-container[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n      z-index: 2;\n      margin: 0 auto;\n      display: block;\n      max-width: 100%;\n      max-height: 100%; }\n\n    .img-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n      z-index: 99;\n      position: absolute;\n      right: 15px; }\n      .img-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:not(:disabled) {\n        cursor: pointer; }\n\n    .img-container[_ngcontent-%COMP%]    > button[_ngcontent-%COMP%]:nth-of-type(1):not(#ngx-fs-btn) {\n      bottom: 15px; }\n\n    .img-container[_ngcontent-%COMP%]    > button[_ngcontent-%COMP%]:nth-of-type(2):not(#ngx-fs-btn) {\n      bottom: 65px; }\n\n    .img-container[_ngcontent-%COMP%]    > button[_ngcontent-%COMP%]:nth-of-type(3):not(#ngx-fs-btn) {\n      bottom: 115px; }\n\n    .img-container[_ngcontent-%COMP%]    > button[_ngcontent-%COMP%]:nth-of-type(4):not(#ngx-fs-btn) {\n      bottom: 165px; }\n\n    .img-container[_ngcontent-%COMP%]    > button[_ngcontent-%COMP%]:nth-of-type(5):not(#ngx-fs-btn) {\n      bottom: 215px; }\n\n    .img-container[_ngcontent-%COMP%]    > button[_ngcontent-%COMP%]:nth-of-type(6):not(#ngx-fs-btn) {\n      bottom: 265px; }\n\n    .img-container[_ngcontent-%COMP%]    > button[_ngcontent-%COMP%]:nth-of-type(7):not(#ngx-fs-btn) {\n      bottom: 315px; }\n\n    #ngx-fs-btn[_ngcontent-%COMP%] {\n      top: 15px; }\n\n    button.default[_ngcontent-%COMP%] {\n      height: 40px;\n      width: 40px;\n      border: 1px solid #555;\n      border-radius: 50%;\n      background-color: white;\n      opacity: 0.7;\n      -webkit-transition: opacity 200ms;\n      transition: opacity 200ms; }\n\n    button.default[_ngcontent-%COMP%]:hover {\n      opacity: 1; }\n\n    button.default[_ngcontent-%COMP%]:disabled {\n      opacity: 0.25; }\n\n    .nav-button-container[_ngcontent-%COMP%]    > button[_ngcontent-%COMP%] {\n      position: relative;\n      right: 0;\n      margin: 0 10px; }\n\n    .nav-button-container[_ngcontent-%COMP%] {\n      text-align: center;\n      position: absolute;\n      z-index: 98;\n      bottom: 10px;\n      left: 0;\n      right: 0; }\n\n    .spinner-container[_ngcontent-%COMP%] {\n      position: absolute;\n      left: 0;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      width: 60px;\n      height: 60px;\n      margin: auto;\n      padding: 10px;\n      background-color: rgba(0, 0, 0, 0.4);\n      border-radius: 25%; }\n\n    .spinner[_ngcontent-%COMP%] {\n      border-width: 7px;\n      border-style: solid;\n      border-color: #ccc;\n      border-bottom-color: #222;\n      border-radius: 50%;\n      height: 100%;\n      width: 100%;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      -webkit-animation: rotation 2s linear infinite;\n      \n      \n      \n      animation: rotation 2s linear infinite;\n       }\n\n    @keyframes rotation {\n      from {\n        -webkit-transform: rotate(0deg); }\n      to {\n        -webkit-transform: rotate(359deg); } }\n\n    @-webkit-keyframes rotation {\n      from {\n        -webkit-transform: rotate(0deg); }\n      to {\n        -webkit-transform: rotate(359deg); } }"] });
/**
 * @nocollapse
 */
ImageViewerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['config',] },] },
];
ImageViewerComponent.propDecorators = {
    'src': [{ type: Input },],
    'index': [{ type: Input },],
    'config': [{ type: Input },],
    'indexChange': [{ type: Output },],
    'configChange': [{ type: Output },],
    'customEvent': [{ type: Output },],
    'nextImage': [{ type: HostListener, args: ['window:keyup.ArrowRight', ['$event'],] },],
    'prevImage': [{ type: HostListener, args: ['window:keyup.ArrowLeft', ['$event'],] },],
    'onMouseOver': [{ type: HostListener, args: ['mouseover',] },],
    'onMouseLeave': [{ type: HostListener, args: ['mouseleave',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImageViewerComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-image-viewer',
                template: `
    <div [ngxToggleFullscreen]="fullscreen" class="img-container" [style.backgroundColor]="config.containerBackgroundColor"
         (wheel)="scrollZoom($event)" (dragover)="onDragOver($event)">
      <img [src]="src[index]" [ngStyle]="style" alt="Image not found..." (dragstart)="onDragStart($event)" (load)="onLoad()" (loadstart)="onLoadStart()"/>
      <!-- Div below will be used to hide the 'ghost' image when dragging -->
      <div></div>
      <div class="spinner-container" *ngIf="loading">
        <div class="spinner"></div>
      </div>

      <button type="button" [class]="config.btnClass" *ngIf="config.btnShow.rotateCounterClockwise" (click)="rotateCounterClockwise()">
        <span [class]="config.btnIcons.rotateCounterClockwise"></span>
      </button>
      <button type="button" [class]="config.btnClass" *ngIf="config.btnShow.rotateClockwise" (click)="rotateClockwise()">
        <span [class]="config.btnIcons.rotateClockwise"></span>
      </button>

      <button type="button" [class]="config.btnClass" *ngIf="config.btnShow.zoomOut" (click)="zoomOut()">
        <span [class]="config.btnIcons.zoomOut"></span>
      </button>
      <button type="button" [class]="config.btnClass" *ngIf="config.btnShow.zoomIn" (click)="zoomIn()">
        <span [class]="config.btnIcons.zoomIn"></span>
      </button>

      <button type="button" [class]="config.btnClass" *ngFor="let cBtn of config.customBtns" (click)="fireCustomEvent(cBtn.name, index)">
        <span [class]="cBtn.icon"></span>
      </button>

      <button type="button" id="ngx-fs-btn" [class]="config.btnClass" (click)="toggleFullscreen()" *ngIf="config.allowFullscreen">
        <span [class]="config.btnIcons.fullscreen"></span>
      </button>

      <div class="nav-button-container" *ngIf="src.length > 1">
        <button type="button" [class]="config.btnClass" (click)="prevImage()" [disabled]="index === 0">
          <span [class]="config.btnIcons.prev"></span>
        </button>
        <button type="button" [class]="config.btnClass" (click)="nextImage()" [disabled]="index === src.length - 1">
          <span [class]="config.btnIcons.next"></span>
        </button>
      </div>
    </div>
  `,
                styles: [`
    .img-container {
      height: 100%;
      width: 100%;
      overflow: hidden;
      position: relative; }

    .img-container img {
      z-index: 2;
      margin: 0 auto;
      display: block;
      max-width: 100%;
      max-height: 100%; }

    .img-container button {
      z-index: 99;
      position: absolute;
      right: 15px; }
      .img-container button:not(:disabled) {
        cursor: pointer; }

    .img-container > button:nth-of-type(1):not(#ngx-fs-btn) {
      bottom: 15px; }

    .img-container > button:nth-of-type(2):not(#ngx-fs-btn) {
      bottom: 65px; }

    .img-container > button:nth-of-type(3):not(#ngx-fs-btn) {
      bottom: 115px; }

    .img-container > button:nth-of-type(4):not(#ngx-fs-btn) {
      bottom: 165px; }

    .img-container > button:nth-of-type(5):not(#ngx-fs-btn) {
      bottom: 215px; }

    .img-container > button:nth-of-type(6):not(#ngx-fs-btn) {
      bottom: 265px; }

    .img-container > button:nth-of-type(7):not(#ngx-fs-btn) {
      bottom: 315px; }

    #ngx-fs-btn {
      top: 15px; }

    button.default {
      height: 40px;
      width: 40px;
      border: 1px solid #555;
      border-radius: 50%;
      background-color: white;
      opacity: 0.7;
      -webkit-transition: opacity 200ms;
      transition: opacity 200ms; }

    button.default:hover {
      opacity: 1; }

    button.default:disabled {
      opacity: 0.25; }

    .nav-button-container > button {
      position: relative;
      right: 0;
      margin: 0 10px; }

    .nav-button-container {
      text-align: center;
      position: absolute;
      z-index: 98;
      bottom: 10px;
      left: 0;
      right: 0; }

    .spinner-container {
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      width: 60px;
      height: 60px;
      margin: auto;
      padding: 10px;
      background-color: rgba(0, 0, 0, 0.4);
      border-radius: 25%; }

    .spinner {
      border-width: 7px;
      border-style: solid;
      border-color: #ccc;
      border-bottom-color: #222;
      border-radius: 50%;
      height: 100%;
      width: 100%;
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
      -webkit-animation: rotation 2s linear infinite;
      /* Safari 4+ */
      /* Fx 5+ */
      /* Opera 12+ */
      animation: rotation 2s linear infinite;
      /* IE 10+, Fx 29+ */ }

    @keyframes rotation {
      from {
        -webkit-transform: rotate(0deg); }
      to {
        -webkit-transform: rotate(359deg); } }

    @-webkit-keyframes rotation {
      from {
        -webkit-transform: rotate(0deg); }
      to {
        -webkit-transform: rotate(359deg); } }
  `]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: ['config']
            }] }]; }, { index: [{
            type: Input
        }], indexChange: [{
            type: Output
        }], configChange: [{
            type: Output
        }], customEvent: [{
            type: Output
        }], config: [{
            type: Input
        }], 
    /**
     * @param {?} event
     * @return {?}
     */
    nextImage: [{
            type: HostListener,
            args: ['window:keyup.ArrowRight', ['$event']]
        }], 
    /**
     * @param {?} event
     * @return {?}
     */
    prevImage: [{
            type: HostListener,
            args: ['window:keyup.ArrowLeft', ['$event']]
        }], 
    /**
     * @return {?}
     */
    onMouseOver: [{
            type: HostListener,
            args: ['mouseover']
        }], 
    /**
     * @return {?}
     */
    onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }], src: [{
            type: Input
        }] }); })();

class ToggleFullscreenDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.isFullscreen && enabled) {
            request(this.el.nativeElement);
        }
        else if (enabled) {
            exit();
        }
    }
}
ToggleFullscreenDirective.ɵfac = function ToggleFullscreenDirective_Factory(t) { return new (t || ToggleFullscreenDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ToggleFullscreenDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ToggleFullscreenDirective, selectors: [["", "ngxToggleFullscreen", ""]], inputs: { isFullscreen: ["ngxToggleFullscreen", "isFullscreen"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/**
 * @nocollapse
 */
ToggleFullscreenDirective.ctorParameters = () => [
    { type: ElementRef, },
];
ToggleFullscreenDirective.propDecorators = {
    'isFullscreen': [{ type: Input, args: ['ngxToggleFullscreen',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToggleFullscreenDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxToggleFullscreen]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFullscreen: [{
            type: Input,
            args: ['ngxToggleFullscreen']
        }] }); })();

class ImageViewerModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: ImageViewerModule,
            providers: [{ provide: 'config', useValue: config }]
        };
    }
}
ImageViewerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ImageViewerModule });
ImageViewerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ImageViewerModule_Factory(t) { return new (t || ImageViewerModule)(); }, imports: [[
            CommonModule
        ]] });
/**
 * @nocollapse
 */
ImageViewerModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ImageViewerModule, { declarations: function () { return [ImageViewerComponent, ToggleFullscreenDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ImageViewerComponent, ToggleFullscreenDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImageViewerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    ImageViewerComponent,
                    ToggleFullscreenDirective
                ],
                exports: [
                    ImageViewerComponent,
                    ToggleFullscreenDirective
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ImageViewerComponent, CustomEvent, ImageViewerModule, ToggleFullscreenDirective as ɵa };

//# sourceMappingURL=ngx-image-viewer.js.map