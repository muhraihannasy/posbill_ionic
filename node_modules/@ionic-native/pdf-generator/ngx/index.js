import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var PDFGenerator = /** @class */ (function (_super) {
    __extends(PDFGenerator, _super);
    function PDFGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PDFGenerator.prototype.fromURL = function (url, options) { return cordova(this, "fromURL", { "otherPromise": true }, arguments); };
    PDFGenerator.prototype.fromData = function (data, options) { return cordova(this, "fromData", { "otherPromise": true }, arguments); };
    PDFGenerator.pluginName = "PDFGenerator";
    PDFGenerator.plugin = "cordova-pdf-generator";
    PDFGenerator.pluginRef = "cordova.plugins.pdf";
    PDFGenerator.repo = "https://github.com/cesarvr/pdf-generator";
    PDFGenerator.platforms = ["Android", "iOS"];
    PDFGenerator.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    return PDFGenerator;
}(IonicNativePlugin));
export { PDFGenerator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3BkZi1nZW5lcmF0b3Ivbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBK0R0QyxnQ0FBaUI7Ozs7SUFRakQsOEJBQU8sYUFBQyxHQUFXLEVBQUUsT0FBNkI7SUFXbEQsK0JBQVEsYUFBQyxJQUFZLEVBQUUsT0FBNkI7Ozs7Ozs7Z0JBdEJyRCxVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzt1QkEvREQ7RUFnRWtDLGlCQUFpQjtTQUF0QyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUERGR2VuZXJhdG9yT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgZG9jdW1lbnQgc2l6ZSwgZS5nLiwgQTIsIEEzLCBvciBBNC5cbiAgICogT25seSBzdXBwb3J0ZWQgb24gaU9TLlxuICAgKiBUaGUgZGVmYXVsdCBpcyAnQTQnLlxuICAgKi9cbiAgZG9jdW1lbnRTaXplPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBPcHRpb24gdG8gY2hhbmdlIHRvIGxhbmRzY2FwZSBvcmllbnRhdGlvbi5cbiAgICogRGVmYXVsdCBpcyAncG9ydHJhaXQnLlxuICAgKi9cbiAgbGFuZHNjYXBlPzogJ2xhbmRzY2FwZScgfCAncG9ydHJhaXQnO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSB0byBiZSByZXR1cm5lZCwgZWl0aGVyICdzaGFyZScgb3IgJ2Jhc2U2NCcuXG4gICAqIElmICdzaGFyZSBpcyBjaG9zZW4sIHRoZSBQREYgaXMgc2hhcmVkIHdpdGggdGhlIHN5c3RlbSBjYXBhYmlsaXRpZXMuXG4gICAqIERlZmF1bHQgaXMgJ2Jhc2U2NCdcbiAgICovXG4gIHR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBkZXNpcmVkIGZpbGVuYW1lIHRoZSByZXN1bHRpbmcgUERGIHNob3VsZCBoYXZlLlxuICAgKiBEZWZhdWx0IGlzICdkZWZhdWx0LnBkZidcbiAgICovXG4gIGZpbGVOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBPcHRpb24gdG8gc2V0IHRoZSBiYXNlIFVSTCBmb3IgcGF0aGluZy5cbiAgICogRGVmYXVsdCBpcyAnbnVsbCcuXG4gICAqL1xuICBiYXNlVXJsPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIFBERkdlbmVyYXRvclxuICogQGRlc2NyaXB0aW9uXG4gKiBTaW1wbGUgcGx1Z2luIHRvIGdlbmVyYXRlIChvZmZsaW5lKSBwZGYuIFRoZSBwbHVnaW4gdHJhbnNmb3JtcyBIVE1MIHRvIFBERiBhbmQgYWxzbyBwcm92aWRlIHRoZSBtZWNoYW5pc20gdG8gc2hhcmUgdGhlIHBkZiB0byBvdGhlciBhcHBzIGxpa2UgTWFpbCwgZXRjLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgUERGR2VuZXJhdG9yIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9wZGYtZ2VuZXJhdG9yJztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHBkZkdlbmVyYXRvcjogUERGR2VuZXJhdG9yKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnBkZkdlbmVyYXRvci5mcm9tVVJMKHVybCwgb3B0aW9ucykudGhlbihiYXNlNjRTdHJpbmcgPT4gY29uc29sZS5sb2coYmFzZTY0U3RyaW5nKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnUERGR2VuZXJhdG9yJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wZGYtZ2VuZXJhdG9yJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnBkZicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY2VzYXJ2ci9wZGYtZ2VuZXJhdG9yJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFBERkdlbmVyYXRvciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBQREYgdXNpbmcgYSBVUkwsIGl0IGRvd25sb2FkIHRoZSBkb2N1bWVudCBpbnRvIGFuIGluIG1lbW9yeSBXZWJraXQgb2JqZWN0LCBhbmQgcmVuZGVycyBpdCBpbnRvIGEgUERGLlxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFVSTCB0byBjcmVhdGUgYSBQREYgZnJvbVxuICAgKiBAcGFyYW0gb3B0aW9ucyB7UERGR2VuZXJhdG9yT3B0aW9uc30gb3B0aW9ucyBmb3IgUERGIGdlbmVyYXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGZyb21VUkwodXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBQREZHZW5lcmF0b3JPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFBERiB1c2luZyBzdHJpbmcgd2l0aCB0aGUgSFRNTCByZXByZXNlbnRhdGlvbiwgaXQgZG93bmxvYWQgdGhlIGRvY3VtZW50IGludG8gYW4gaW4gbWVtb3J5IFdlYmtpdCBvYmplY3QsIGFuZCByZW5kZXJzIGl0IGludG8gYSBQREYuXG4gICAqIEBwYXJhbSBkYXRhIHtzdHJpbmd9IEhUTUwgc3RyaW5nIHJlcHJlc2VudGF0aW9uIHRvIGNyZWF0ZSBhIFBERiBmcm9tXG4gICAqIEBwYXJhbSBvcHRpb25zIHtQREZHZW5lcmF0b3JPcHRpb25zfSBvcHRpb25zIGZvciBQREYgZ2VuZXJhdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgZnJvbURhdGEoZGF0YTogc3RyaW5nLCBvcHRpb25zPzogUERGR2VuZXJhdG9yT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=