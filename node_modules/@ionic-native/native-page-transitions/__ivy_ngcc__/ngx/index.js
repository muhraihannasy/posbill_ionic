import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var NativePageTransitions = /** @class */ (function (_super) {
    __extends(NativePageTransitions, _super);
    function NativePageTransitions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativePageTransitions.prototype.slide = function (options) { return cordova(this, "slide", {}, arguments); };
    NativePageTransitions.prototype.flip = function (options) { return cordova(this, "flip", {}, arguments); };
    NativePageTransitions.prototype.fade = function (options) { return cordova(this, "fade", { "platforms": ["iOS", "Android"] }, arguments); };
    NativePageTransitions.prototype.drawer = function (options) { return cordova(this, "drawer", { "platforms": ["iOS", "Android"] }, arguments); };
    NativePageTransitions.prototype.curl = function (options) { return cordova(this, "curl", { "platforms": ["iOS"] }, arguments); };
    NativePageTransitions.prototype.executePendingTransition = function () { return cordova(this, "executePendingTransition", {}, arguments); };
    NativePageTransitions.prototype.cancelPendingTransition = function () { return cordova(this, "cancelPendingTransition", {}, arguments); };
    NativePageTransitions.pluginName = "NativePageTransitions";
    NativePageTransitions.plugin = "com.telerik.plugins.nativepagetransitions";
    NativePageTransitions.pluginRef = "plugins.nativepagetransitions";
    NativePageTransitions.repo = "https://github.com/Telerik-Verified-Plugins/NativePageTransitions";
    NativePageTransitions.platforms = ["Android", "iOS", "Windows Phone 8"];
NativePageTransitions.ɵfac = function NativePageTransitions_Factory(t) { return ɵNativePageTransitions_BaseFactory(t || NativePageTransitions); };
NativePageTransitions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NativePageTransitions, factory: function (t) { return NativePageTransitions.ɵfac(t); } });
var ɵNativePageTransitions_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(NativePageTransitions);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NativePageTransitions, [{
        type: Injectable
    }], null, null); })();
    return NativePageTransitions;
}(IonicNativePlugin));
export { NativePageTransitions };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvbmF0aXZlLXBhZ2UtdHJhbnNpdGlvbnMvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0FBQ3hFO0FBRW1CLElBbUV3Qix5Q0FBaUI7QUFBQztBQUc3RDtBQUNBO0FBQU0sSUFHSixxQ0FBSyxhQUFDLE9BQWdDO0FBSzVCLElBS1Ysb0NBQUksYUFBQyxPQUFnQztBQUs1QixJQUtULG9DQUFJLGFBQUMsT0FBZ0M7QUFNMUIsSUFJWCxzQ0FBTSxhQUFDLE9BQWdDO0FBTTFCLElBSWIsb0NBQUksYUFBQyxPQUFnQztBQU10QyxJQUdDLHdEQUF3QjtBQU1kLElBR1YsdURBQXVCO0FBSXNCO0FBQWdFO0FBQWdGO0FBQXVFO0FBQXNHO3lEQXRFM1csVUFBVTs7Ozs7MEJBQ0w7QUFBQyxnQ0F2RVA7QUFBRSxFQXVFeUMsaUJBQWlCO0FBQzNELFNBRFkscUJBQXFCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyB7XG4gIGRpcmVjdGlvbj86IHN0cmluZztcbiAgZHVyYXRpb24/OiBudW1iZXI7XG4gIHNsb3dkb3duZmFjdG9yPzogbnVtYmVyO1xuICBzbGlkZVBpeGVscz86IG51bWJlcjtcbiAgaW9zZGVsYXk/OiBudW1iZXI7XG4gIGFuZHJvaWRkZWxheT86IG51bWJlcjtcbiAgd2lucGhvbmVkZWxheT86IG51bWJlcjtcbiAgZml4ZWRQaXhlbHNUb3A/OiBudW1iZXI7XG4gIGZpeGVkUGl4ZWxzQm90dG9tPzogbnVtYmVyO1xuICBhY3Rpb24/OiBzdHJpbmc7XG4gIG9yaWdpbj86IHN0cmluZztcbiAgaHJlZj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBOYXRpdmUgUGFnZSBUcmFuc2l0aW9uc1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgTmF0aXZlIFBhZ2UgVHJhbnNpdGlvbnMgcGx1Z2luIHVzZXMgbmF0aXZlIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiB0byBhbmltYXRlIHlvdXIgdHJhbnNpdGlvbnMgYmV0d2VlbiB2aWV3cy4gWW91IGhhdmUgY29tcGxldGUgY29udHJvbCBvdmVyIHRoZSB0eXBlIG9mIHRyYW5zaXRpb24sIHRoZSBkdXJhdGlvbiwgYW5kIGRpcmVjdGlvbi5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IE5hdGl2ZVBhZ2VUcmFuc2l0aW9ucywgTmF0aXZlVHJhbnNpdGlvbk9wdGlvbnMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL25hdGl2ZS1wYWdlLXRyYW5zaXRpb25zL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBuYXRpdmVQYWdlVHJhbnNpdGlvbnM6IE5hdGl2ZVBhZ2VUcmFuc2l0aW9ucykgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIC8vIGV4YW1wbGUgb2YgYWRkaW5nIGEgdHJhbnNpdGlvbiB3aGVuIGEgcGFnZS9tb2RhbCBjbG9zZXNcbiAqIGlvblZpZXdXaWxsTGVhdmUoKSB7XG4gKlxuICogIGxldCBvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyA9IHtcbiAqICAgICBkaXJlY3Rpb246ICd1cCcsXG4gKiAgICAgZHVyYXRpb246IDUwMCxcbiAqICAgICBzbG93ZG93bmZhY3RvcjogMyxcbiAqICAgICBzbGlkZVBpeGVsczogMjAsXG4gKiAgICAgaW9zZGVsYXk6IDEwMCxcbiAqICAgICBhbmRyb2lkZGVsYXk6IDE1MCxcbiAqICAgICBmaXhlZFBpeGVsc1RvcDogMCxcbiAqICAgICBmaXhlZFBpeGVsc0JvdHRvbTogNjBcbiAqICAgIH1cbiAqXG4gKiAgdGhpcy5uYXRpdmVQYWdlVHJhbnNpdGlvbnMuc2xpZGUob3B0aW9ucylcbiAqICAgIC50aGVuKG9uU3VjY2VzcylcbiAqICAgIC5jYXRjaChvbkVycm9yKTtcbiAqXG4gKiB9XG4gKlxuICpcbiAqIC8vIGV4YW1wbGUgb2YgYWRkaW5nIGEgdHJhbnNpdGlvbiB3aGVuIHB1c2hpbmcgYSBuZXcgcGFnZVxuICogb3BlblBhZ2UocGFnZTogYW55KSB7XG4gKlxuICogICB0aGlzLm5hdGl2ZVBhZ2VUcmFuc2l0aW9ucy5zbGlkZShvcHRpb25zKTtcbiAqICAgdGhpcy5uYXZDdHJsLnB1c2gocGFnZSk7XG4gKlxuICogfVxuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ05hdGl2ZVBhZ2VUcmFuc2l0aW9ucycsXG4gIHBsdWdpbjogJ2NvbS50ZWxlcmlrLnBsdWdpbnMubmF0aXZlcGFnZXRyYW5zaXRpb25zJyxcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy5uYXRpdmVwYWdldHJhbnNpdGlvbnMnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1RlbGVyaWstVmVyaWZpZWQtUGx1Z2lucy9OYXRpdmVQYWdlVHJhbnNpdGlvbnMnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnV2luZG93cyBQaG9uZSA4J10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVBhZ2VUcmFuc2l0aW9ucyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBzbGlkZSBhbmltYXRpb25cbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzbGlkZShvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBmbGlwIGFuaW1hdGlvblxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TmF0aXZlVHJhbnNpdGlvbk9wdGlvbnN9IE9wdGlvbnMgZm9yIHRoZSB0cmFuc2l0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGZsaXAob3B0aW9uczogTmF0aXZlVHJhbnNpdGlvbk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgZmFkZSBhbmltYXRpb25cbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXSB9KVxuICBmYWRlKG9wdGlvbnM6IE5hdGl2ZVRyYW5zaXRpb25PcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSBhIHNsaWRlIGFuaW1hdGlvblxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TmF0aXZlVHJhbnNpdGlvbk9wdGlvbnN9IE9wdGlvbnMgZm9yIHRoZSB0cmFuc2l0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnLCAnQW5kcm9pZCddIH0pXG4gIGRyYXdlcihvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBzbGlkZSBhbmltYXRpb25cbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZVRyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgY3VybChvcHRpb25zOiBOYXRpdmVUcmFuc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcGVuZGluZyB0cmFuc2l0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGV4ZWN1dGVQZW5kaW5nVHJhbnNpdGlvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWwgcGVuZGluZyB0cmFuc2l0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNhbmNlbFBlbmRpbmdUcmFuc2l0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=